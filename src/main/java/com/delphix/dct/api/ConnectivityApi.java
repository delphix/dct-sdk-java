/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiCallback;
import com.delphix.dct.ApiClient;
import com.delphix.dct.ApiException;
import com.delphix.dct.ApiResponse;
import com.delphix.dct.Configuration;
import com.delphix.dct.Pair;
import com.delphix.dct.ProgressRequestBody;
import com.delphix.dct.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.delphix.dct.models.CommvaultConnectivityCheckParameters;
import com.delphix.dct.models.ConnectivityCheckParameters;
import com.delphix.dct.models.ConnectivityCheckResponse;
import com.delphix.dct.models.DatabaseConnectivityCheckParameters;
import com.delphix.dct.models.NetbackupConnectivityCheckParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectivityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectivityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectivityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for commvaultConnectivityCheck
     * @param commvaultConnectivityCheckParameters The api to check connectivity to the CommServe host and staging client from an environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commvaultConnectivityCheckCall(CommvaultConnectivityCheckParameters commvaultConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commvaultConnectivityCheckParameters;

        // create path and map variables
        String localVarPath = "/commvault/connectivity/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commvaultConnectivityCheckValidateBeforeCall(CommvaultConnectivityCheckParameters commvaultConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commvaultConnectivityCheckParameters' is set
        if (commvaultConnectivityCheckParameters == null) {
            throw new ApiException("Missing the required parameter 'commvaultConnectivityCheckParameters' when calling commvaultConnectivityCheck(Async)");
        }

        return commvaultConnectivityCheckCall(commvaultConnectivityCheckParameters, _callback);

    }

    /**
     * Tests whether the CommServe host is accessible from the given environment and Commvault agent.
     * 
     * @param commvaultConnectivityCheckParameters The api to check connectivity to the CommServe host and staging client from an environment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void commvaultConnectivityCheck(CommvaultConnectivityCheckParameters commvaultConnectivityCheckParameters) throws ApiException {
        commvaultConnectivityCheckWithHttpInfo(commvaultConnectivityCheckParameters);
    }

    /**
     * Tests whether the CommServe host is accessible from the given environment and Commvault agent.
     * 
     * @param commvaultConnectivityCheckParameters The api to check connectivity to the CommServe host and staging client from an environment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> commvaultConnectivityCheckWithHttpInfo(CommvaultConnectivityCheckParameters commvaultConnectivityCheckParameters) throws ApiException {
        okhttp3.Call localVarCall = commvaultConnectivityCheckValidateBeforeCall(commvaultConnectivityCheckParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Tests whether the CommServe host is accessible from the given environment and Commvault agent. (asynchronously)
     * 
     * @param commvaultConnectivityCheckParameters The api to check connectivity to the CommServe host and staging client from an environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commvaultConnectivityCheckAsync(CommvaultConnectivityCheckParameters commvaultConnectivityCheckParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = commvaultConnectivityCheckValidateBeforeCall(commvaultConnectivityCheckParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectivityCheck
     * @param connectivityCheckParameters The api to check connectivity of engine and a remote host on given port. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectivityCheckCall(ConnectivityCheckParameters connectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectivityCheckParameters;

        // create path and map variables
        String localVarPath = "/connectivity/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectivityCheckValidateBeforeCall(ConnectivityCheckParameters connectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectivityCheckParameters' is set
        if (connectivityCheckParameters == null) {
            throw new ApiException("Missing the required parameter 'connectivityCheckParameters' when calling connectivityCheck(Async)");
        }

        return connectivityCheckCall(connectivityCheckParameters, _callback);

    }

    /**
     * Checks connectivity between an engine and a remote host machine on a given port.
     * 
     * @param connectivityCheckParameters The api to check connectivity of engine and a remote host on given port. (required)
     * @return ConnectivityCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ConnectivityCheckResponse connectivityCheck(ConnectivityCheckParameters connectivityCheckParameters) throws ApiException {
        ApiResponse<ConnectivityCheckResponse> localVarResp = connectivityCheckWithHttpInfo(connectivityCheckParameters);
        return localVarResp.getData();
    }

    /**
     * Checks connectivity between an engine and a remote host machine on a given port.
     * 
     * @param connectivityCheckParameters The api to check connectivity of engine and a remote host on given port. (required)
     * @return ApiResponse&lt;ConnectivityCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectivityCheckResponse> connectivityCheckWithHttpInfo(ConnectivityCheckParameters connectivityCheckParameters) throws ApiException {
        okhttp3.Call localVarCall = connectivityCheckValidateBeforeCall(connectivityCheckParameters, null);
        Type localVarReturnType = new TypeToken<ConnectivityCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks connectivity between an engine and a remote host machine on a given port. (asynchronously)
     * 
     * @param connectivityCheckParameters The api to check connectivity of engine and a remote host on given port. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectivityCheckAsync(ConnectivityCheckParameters connectivityCheckParameters, final ApiCallback<ConnectivityCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectivityCheckValidateBeforeCall(connectivityCheckParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectivityCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for databaseConnectivityCheck
     * @param databaseConnectivityCheckParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseConnectivityCheckCall(DatabaseConnectivityCheckParameters databaseConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = databaseConnectivityCheckParameters;

        // create path and map variables
        String localVarPath = "/database/connectivity/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call databaseConnectivityCheckValidateBeforeCall(DatabaseConnectivityCheckParameters databaseConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'databaseConnectivityCheckParameters' is set
        if (databaseConnectivityCheckParameters == null) {
            throw new ApiException("Missing the required parameter 'databaseConnectivityCheckParameters' when calling databaseConnectivityCheck(Async)");
        }

        return databaseConnectivityCheckCall(databaseConnectivityCheckParameters, _callback);

    }

    /**
     * Tests the validity of the supplied database credentials, returning an error if unable to connect to the database.
     * 
     * @param databaseConnectivityCheckParameters  (required)
     * @return ConnectivityCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ConnectivityCheckResponse databaseConnectivityCheck(DatabaseConnectivityCheckParameters databaseConnectivityCheckParameters) throws ApiException {
        ApiResponse<ConnectivityCheckResponse> localVarResp = databaseConnectivityCheckWithHttpInfo(databaseConnectivityCheckParameters);
        return localVarResp.getData();
    }

    /**
     * Tests the validity of the supplied database credentials, returning an error if unable to connect to the database.
     * 
     * @param databaseConnectivityCheckParameters  (required)
     * @return ApiResponse&lt;ConnectivityCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectivityCheckResponse> databaseConnectivityCheckWithHttpInfo(DatabaseConnectivityCheckParameters databaseConnectivityCheckParameters) throws ApiException {
        okhttp3.Call localVarCall = databaseConnectivityCheckValidateBeforeCall(databaseConnectivityCheckParameters, null);
        Type localVarReturnType = new TypeToken<ConnectivityCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tests the validity of the supplied database credentials, returning an error if unable to connect to the database. (asynchronously)
     * 
     * @param databaseConnectivityCheckParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call databaseConnectivityCheckAsync(DatabaseConnectivityCheckParameters databaseConnectivityCheckParameters, final ApiCallback<ConnectivityCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = databaseConnectivityCheckValidateBeforeCall(databaseConnectivityCheckParameters, _callback);
        Type localVarReturnType = new TypeToken<ConnectivityCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for netbackupConnectivityCheck
     * @param netbackupConnectivityCheckParameters The api to check connectivity of NetBackup master server and client on an environment. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call netbackupConnectivityCheckCall(NetbackupConnectivityCheckParameters netbackupConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = netbackupConnectivityCheckParameters;

        // create path and map variables
        String localVarPath = "/netbackup/connectivity/check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call netbackupConnectivityCheckValidateBeforeCall(NetbackupConnectivityCheckParameters netbackupConnectivityCheckParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'netbackupConnectivityCheckParameters' is set
        if (netbackupConnectivityCheckParameters == null) {
            throw new ApiException("Missing the required parameter 'netbackupConnectivityCheckParameters' when calling netbackupConnectivityCheck(Async)");
        }

        return netbackupConnectivityCheckCall(netbackupConnectivityCheckParameters, _callback);

    }

    /**
     * Checks whether the specified NetBackup master server and client are able to communicate on the given environment.
     * 
     * @param netbackupConnectivityCheckParameters The api to check connectivity of NetBackup master server and client on an environment. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void netbackupConnectivityCheck(NetbackupConnectivityCheckParameters netbackupConnectivityCheckParameters) throws ApiException {
        netbackupConnectivityCheckWithHttpInfo(netbackupConnectivityCheckParameters);
    }

    /**
     * Checks whether the specified NetBackup master server and client are able to communicate on the given environment.
     * 
     * @param netbackupConnectivityCheckParameters The api to check connectivity of NetBackup master server and client on an environment. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> netbackupConnectivityCheckWithHttpInfo(NetbackupConnectivityCheckParameters netbackupConnectivityCheckParameters) throws ApiException {
        okhttp3.Call localVarCall = netbackupConnectivityCheckValidateBeforeCall(netbackupConnectivityCheckParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Checks whether the specified NetBackup master server and client are able to communicate on the given environment. (asynchronously)
     * 
     * @param netbackupConnectivityCheckParameters The api to check connectivity of NetBackup master server and client on an environment. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call netbackupConnectivityCheckAsync(NetbackupConnectivityCheckParameters netbackupConnectivityCheckParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = netbackupConnectivityCheckValidateBeforeCall(netbackupConnectivityCheckParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
