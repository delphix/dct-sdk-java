/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiCallback;
import com.delphix.dct.ApiClient;
import com.delphix.dct.ApiException;
import com.delphix.dct.ApiResponse;
import com.delphix.dct.Configuration;
import com.delphix.dct.Pair;
import com.delphix.dct.ProgressRequestBody;
import com.delphix.dct.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.delphix.dct.models.CreateHyperscaleConnectorResponse;
import com.delphix.dct.models.CreateHyperscaleMountPointResponse;
import com.delphix.dct.models.DeleteHyperscaleConnectorResponse;
import com.delphix.dct.models.DeleteHyperscaleMountPointResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.HyperscaleConnector;
import com.delphix.dct.models.HyperscaleConnectorCreateParameters;
import com.delphix.dct.models.HyperscaleConnectorUpdateParameters;
import com.delphix.dct.models.HyperscaleDataset;
import com.delphix.dct.models.HyperscaleDatasetTableOrFile;
import com.delphix.dct.models.HyperscaleDatasetTableOrFileUpdateParameters;
import com.delphix.dct.models.HyperscaleDatasetUpdateParameters;
import com.delphix.dct.models.HyperscaleMountPoint;
import com.delphix.dct.models.HyperscaleMountPointUpdateParameters;
import com.delphix.dct.models.ListHyperscaleConnectorsResponse;
import com.delphix.dct.models.ListHyperscaleDatasetTablesOrFilesResponse;
import com.delphix.dct.models.ListHyperscaleDatasetsResponse;
import com.delphix.dct.models.ListHyperscaleMountPointsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchHyperscaleConnectorsResponse;
import com.delphix.dct.models.SearchHyperscaleDatasetTablesOrFilesResponse;
import com.delphix.dct.models.SearchHyperscaleDatasetsResponse;
import com.delphix.dct.models.SearchHyperscaleMountPointsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateHyperscaleConnectorResponse;
import com.delphix.dct.models.UpdateHyperscaleDatasetResponse;
import com.delphix.dct.models.UpdateHyperscaleDatasetTableOrFileResponse;
import com.delphix.dct.models.UpdateHyperscaleMountPointResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HyperscaleObjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HyperscaleObjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HyperscaleObjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createHyperscaleConnector
     * @param hyperscaleConnectorCreateParameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleConnectorCall(HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleConnectorCreateParameters;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHyperscaleConnectorValidateBeforeCall(HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorCreateParameters' is set
        if (hyperscaleConnectorCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorCreateParameters' when calling createHyperscaleConnector(Async)");
        }

        return createHyperscaleConnectorCall(hyperscaleConnectorCreateParameters, _callback);

    }

    /**
     * Create a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorCreateParameters  (required)
     * @return CreateHyperscaleConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperscaleConnectorResponse createHyperscaleConnector(HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters) throws ApiException {
        ApiResponse<CreateHyperscaleConnectorResponse> localVarResp = createHyperscaleConnectorWithHttpInfo(hyperscaleConnectorCreateParameters);
        return localVarResp.getData();
    }

    /**
     * Create a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorCreateParameters  (required)
     * @return ApiResponse&lt;CreateHyperscaleConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperscaleConnectorResponse> createHyperscaleConnectorWithHttpInfo(HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = createHyperscaleConnectorValidateBeforeCall(hyperscaleConnectorCreateParameters, null);
        Type localVarReturnType = new TypeToken<CreateHyperscaleConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorCreateParameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleConnectorAsync(HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters, final ApiCallback<CreateHyperscaleConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHyperscaleConnectorValidateBeforeCall(hyperscaleConnectorCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperscaleConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHyperscaleConnectorTags
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param tagsRequest Tag information for a Hyperscale Connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleConnectorTagsCall(String hyperscaleConnectorId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}/tags"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHyperscaleConnectorTagsValidateBeforeCall(String hyperscaleConnectorId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling createHyperscaleConnectorTags(Async)");
        }

        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling createHyperscaleConnectorTags(Async)");
        }

        return createHyperscaleConnectorTagsCall(hyperscaleConnectorId, tagsRequest, _callback);

    }

    /**
     * Create tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param tagsRequest Tag information for a Hyperscale Connector. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse createHyperscaleConnectorTags(String hyperscaleConnectorId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = createHyperscaleConnectorTagsWithHttpInfo(hyperscaleConnectorId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param tagsRequest Tag information for a Hyperscale Connector. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> createHyperscaleConnectorTagsWithHttpInfo(String hyperscaleConnectorId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tags for a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param tagsRequest Tag information for a Hyperscale Connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleConnectorTagsAsync(String hyperscaleConnectorId, TagsRequest tagsRequest, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHyperscaleDatasetTags
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param tagsRequest Tag information for a Hyperscale Dataset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleDatasetTagsCall(String hyperscaleDatasetId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tags"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHyperscaleDatasetTagsValidateBeforeCall(String hyperscaleDatasetId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling createHyperscaleDatasetTags(Async)");
        }

        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling createHyperscaleDatasetTags(Async)");
        }

        return createHyperscaleDatasetTagsCall(hyperscaleDatasetId, tagsRequest, _callback);

    }

    /**
     * Create tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param tagsRequest Tag information for a Hyperscale Dataset. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse createHyperscaleDatasetTags(String hyperscaleDatasetId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = createHyperscaleDatasetTagsWithHttpInfo(hyperscaleDatasetId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param tagsRequest Tag information for a Hyperscale Dataset. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> createHyperscaleDatasetTagsWithHttpInfo(String hyperscaleDatasetId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tags for a Hyperscale Dataset. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param tagsRequest Tag information for a Hyperscale Dataset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleDatasetTagsAsync(String hyperscaleDatasetId, TagsRequest tagsRequest, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHyperscaleMountPoint
     * @param hyperscaleMountPoint Request to create a Hyperscale Mount Point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleMountPointCall(HyperscaleMountPoint hyperscaleMountPoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleMountPoint;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHyperscaleMountPointValidateBeforeCall(HyperscaleMountPoint hyperscaleMountPoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleMountPoint' is set
        if (hyperscaleMountPoint == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleMountPoint' when calling createHyperscaleMountPoint(Async)");
        }

        return createHyperscaleMountPointCall(hyperscaleMountPoint, _callback);

    }

    /**
     * Create a Hyperscale Mount Point
     * 
     * @param hyperscaleMountPoint Request to create a Hyperscale Mount Point. (required)
     * @return CreateHyperscaleMountPointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateHyperscaleMountPointResponse createHyperscaleMountPoint(HyperscaleMountPoint hyperscaleMountPoint) throws ApiException {
        ApiResponse<CreateHyperscaleMountPointResponse> localVarResp = createHyperscaleMountPointWithHttpInfo(hyperscaleMountPoint);
        return localVarResp.getData();
    }

    /**
     * Create a Hyperscale Mount Point
     * 
     * @param hyperscaleMountPoint Request to create a Hyperscale Mount Point. (required)
     * @return ApiResponse&lt;CreateHyperscaleMountPointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateHyperscaleMountPointResponse> createHyperscaleMountPointWithHttpInfo(HyperscaleMountPoint hyperscaleMountPoint) throws ApiException {
        okhttp3.Call localVarCall = createHyperscaleMountPointValidateBeforeCall(hyperscaleMountPoint, null);
        Type localVarReturnType = new TypeToken<CreateHyperscaleMountPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Hyperscale Mount Point (asynchronously)
     * 
     * @param hyperscaleMountPoint Request to create a Hyperscale Mount Point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHyperscaleMountPointAsync(HyperscaleMountPoint hyperscaleMountPoint, final ApiCallback<CreateHyperscaleMountPointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHyperscaleMountPointValidateBeforeCall(hyperscaleMountPoint, _callback);
        Type localVarReturnType = new TypeToken<CreateHyperscaleMountPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHyperscaleConnector
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleConnectorCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHyperscaleConnectorValidateBeforeCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling deleteHyperscaleConnector(Async)");
        }

        return deleteHyperscaleConnectorCall(hyperscaleConnectorId, _callback);

    }

    /**
     * Delete a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return DeleteHyperscaleConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHyperscaleConnectorResponse deleteHyperscaleConnector(String hyperscaleConnectorId) throws ApiException {
        ApiResponse<DeleteHyperscaleConnectorResponse> localVarResp = deleteHyperscaleConnectorWithHttpInfo(hyperscaleConnectorId);
        return localVarResp.getData();
    }

    /**
     * Delete a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return ApiResponse&lt;DeleteHyperscaleConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteHyperscaleConnectorResponse> deleteHyperscaleConnectorWithHttpInfo(String hyperscaleConnectorId) throws ApiException {
        okhttp3.Call localVarCall = deleteHyperscaleConnectorValidateBeforeCall(hyperscaleConnectorId, null);
        Type localVarReturnType = new TypeToken<DeleteHyperscaleConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleConnectorAsync(String hyperscaleConnectorId, final ApiCallback<DeleteHyperscaleConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHyperscaleConnectorValidateBeforeCall(hyperscaleConnectorId, _callback);
        Type localVarReturnType = new TypeToken<DeleteHyperscaleConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHyperscaleConnectorTags
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleConnectorTagsCall(String hyperscaleConnectorId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}/tags/delete"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHyperscaleConnectorTagsValidateBeforeCall(String hyperscaleConnectorId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling deleteHyperscaleConnectorTags(Async)");
        }

        return deleteHyperscaleConnectorTagsCall(hyperscaleConnectorId, deleteTag, _callback);

    }

    /**
     * Delete tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHyperscaleConnectorTags(String hyperscaleConnectorId, DeleteTag deleteTag) throws ApiException {
        deleteHyperscaleConnectorTagsWithHttpInfo(hyperscaleConnectorId, deleteTag);
    }

    /**
     * Delete tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHyperscaleConnectorTagsWithHttpInfo(String hyperscaleConnectorId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = deleteHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, deleteTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tags for a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleConnectorTagsAsync(String hyperscaleConnectorId, DeleteTag deleteTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, deleteTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHyperscaleDatasetTags
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleDatasetTagsCall(String hyperscaleDatasetId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tags/delete"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHyperscaleDatasetTagsValidateBeforeCall(String hyperscaleDatasetId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling deleteHyperscaleDatasetTags(Async)");
        }

        return deleteHyperscaleDatasetTagsCall(hyperscaleDatasetId, deleteTag, _callback);

    }

    /**
     * Delete tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHyperscaleDatasetTags(String hyperscaleDatasetId, DeleteTag deleteTag) throws ApiException {
        deleteHyperscaleDatasetTagsWithHttpInfo(hyperscaleDatasetId, deleteTag);
    }

    /**
     * Delete tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHyperscaleDatasetTagsWithHttpInfo(String hyperscaleDatasetId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = deleteHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, deleteTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tags for a Hyperscale Dataset. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleDatasetTagsAsync(String hyperscaleDatasetId, DeleteTag deleteTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, deleteTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHyperscaleMountPoint
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleMountPointCall(String hyperscaleMountPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points/{hyperscaleMountPointId}"
            .replace("{" + "hyperscaleMountPointId" + "}", localVarApiClient.escapeString(hyperscaleMountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHyperscaleMountPointValidateBeforeCall(String hyperscaleMountPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleMountPointId' is set
        if (hyperscaleMountPointId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleMountPointId' when calling deleteHyperscaleMountPoint(Async)");
        }

        return deleteHyperscaleMountPointCall(hyperscaleMountPointId, _callback);

    }

    /**
     * Delete a Hyperscale Mount Point.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @return DeleteHyperscaleMountPointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteHyperscaleMountPointResponse deleteHyperscaleMountPoint(String hyperscaleMountPointId) throws ApiException {
        ApiResponse<DeleteHyperscaleMountPointResponse> localVarResp = deleteHyperscaleMountPointWithHttpInfo(hyperscaleMountPointId);
        return localVarResp.getData();
    }

    /**
     * Delete a Hyperscale Mount Point.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @return ApiResponse&lt;DeleteHyperscaleMountPointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteHyperscaleMountPointResponse> deleteHyperscaleMountPointWithHttpInfo(String hyperscaleMountPointId) throws ApiException {
        okhttp3.Call localVarCall = deleteHyperscaleMountPointValidateBeforeCall(hyperscaleMountPointId, null);
        Type localVarReturnType = new TypeToken<DeleteHyperscaleMountPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a Hyperscale Mount Point. (asynchronously)
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHyperscaleMountPointAsync(String hyperscaleMountPointId, final ApiCallback<DeleteHyperscaleMountPointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHyperscaleMountPointValidateBeforeCall(hyperscaleMountPointId, _callback);
        Type localVarReturnType = new TypeToken<DeleteHyperscaleMountPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleConnectorById
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorByIdCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleConnectorByIdValidateBeforeCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling getHyperscaleConnectorById(Async)");
        }

        return getHyperscaleConnectorByIdCall(hyperscaleConnectorId, _callback);

    }

    /**
     * Get a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return HyperscaleConnector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HyperscaleConnector getHyperscaleConnectorById(String hyperscaleConnectorId) throws ApiException {
        ApiResponse<HyperscaleConnector> localVarResp = getHyperscaleConnectorByIdWithHttpInfo(hyperscaleConnectorId);
        return localVarResp.getData();
    }

    /**
     * Get a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return ApiResponse&lt;HyperscaleConnector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperscaleConnector> getHyperscaleConnectorByIdWithHttpInfo(String hyperscaleConnectorId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleConnectorByIdValidateBeforeCall(hyperscaleConnectorId, null);
        Type localVarReturnType = new TypeToken<HyperscaleConnector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorByIdAsync(String hyperscaleConnectorId, final ApiCallback<HyperscaleConnector> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleConnectorByIdValidateBeforeCall(hyperscaleConnectorId, _callback);
        Type localVarReturnType = new TypeToken<HyperscaleConnector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleConnectorTags
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorTagsCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}/tags"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleConnectorTagsValidateBeforeCall(String hyperscaleConnectorId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling getHyperscaleConnectorTags(Async)");
        }

        return getHyperscaleConnectorTagsCall(hyperscaleConnectorId, _callback);

    }

    /**
     * Get tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse getHyperscaleConnectorTags(String hyperscaleConnectorId) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = getHyperscaleConnectorTagsWithHttpInfo(hyperscaleConnectorId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a Hyperscale Connector.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> getHyperscaleConnectorTagsWithHttpInfo(String hyperscaleConnectorId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a Hyperscale Connector. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorTagsAsync(String hyperscaleConnectorId, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleConnectorTagsValidateBeforeCall(hyperscaleConnectorId, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleConnectors
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorsCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleConnectorsValidateBeforeCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        return getHyperscaleConnectorsCall(limit, cursor, sort, _callback);

    }

    /**
     * Returns a list of Hyperscale Connectors.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListHyperscaleConnectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHyperscaleConnectorsResponse getHyperscaleConnectors(Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListHyperscaleConnectorsResponse> localVarResp = getHyperscaleConnectorsWithHttpInfo(limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * Returns a list of Hyperscale Connectors.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListHyperscaleConnectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHyperscaleConnectorsResponse> getHyperscaleConnectorsWithHttpInfo(Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleConnectorsValidateBeforeCall(limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListHyperscaleConnectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Hyperscale Connectors. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleConnectorsAsync(Integer limit, String cursor, String sort, final ApiCallback<ListHyperscaleConnectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleConnectorsValidateBeforeCall(limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListHyperscaleConnectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleDatasetById
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetByIdCall(String hyperscaleDatasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleDatasetByIdValidateBeforeCall(String hyperscaleDatasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling getHyperscaleDatasetById(Async)");
        }

        return getHyperscaleDatasetByIdCall(hyperscaleDatasetId, _callback);

    }

    /**
     * Get a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @return HyperscaleDataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HyperscaleDataset getHyperscaleDatasetById(String hyperscaleDatasetId) throws ApiException {
        ApiResponse<HyperscaleDataset> localVarResp = getHyperscaleDatasetByIdWithHttpInfo(hyperscaleDatasetId);
        return localVarResp.getData();
    }

    /**
     * Get a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @return ApiResponse&lt;HyperscaleDataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperscaleDataset> getHyperscaleDatasetByIdWithHttpInfo(String hyperscaleDatasetId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleDatasetByIdValidateBeforeCall(hyperscaleDatasetId, null);
        Type localVarReturnType = new TypeToken<HyperscaleDataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Hyperscale Dataset. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetByIdAsync(String hyperscaleDatasetId, final ApiCallback<HyperscaleDataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleDatasetByIdValidateBeforeCall(hyperscaleDatasetId, _callback);
        Type localVarReturnType = new TypeToken<HyperscaleDataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleDatasetTableOrFileById
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTableOrFileByIdCall(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()))
            .replace("{" + "hyperscaleDatasetTableOrFileId" + "}", localVarApiClient.escapeString(hyperscaleDatasetTableOrFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleDatasetTableOrFileByIdValidateBeforeCall(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling getHyperscaleDatasetTableOrFileById(Async)");
        }

        // verify the required parameter 'hyperscaleDatasetTableOrFileId' is set
        if (hyperscaleDatasetTableOrFileId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetTableOrFileId' when calling getHyperscaleDatasetTableOrFileById(Async)");
        }

        return getHyperscaleDatasetTableOrFileByIdCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, _callback);

    }

    /**
     * Get a Hyperscale Dataset table or file by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @return HyperscaleDatasetTableOrFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HyperscaleDatasetTableOrFile getHyperscaleDatasetTableOrFileById(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId) throws ApiException {
        ApiResponse<HyperscaleDatasetTableOrFile> localVarResp = getHyperscaleDatasetTableOrFileByIdWithHttpInfo(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId);
        return localVarResp.getData();
    }

    /**
     * Get a Hyperscale Dataset table or file by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @return ApiResponse&lt;HyperscaleDatasetTableOrFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperscaleDatasetTableOrFile> getHyperscaleDatasetTableOrFileByIdWithHttpInfo(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleDatasetTableOrFileByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, null);
        Type localVarReturnType = new TypeToken<HyperscaleDatasetTableOrFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Hyperscale Dataset table or file by ID. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTableOrFileByIdAsync(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, final ApiCallback<HyperscaleDatasetTableOrFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleDatasetTableOrFileByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, _callback);
        Type localVarReturnType = new TypeToken<HyperscaleDatasetTableOrFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleDatasetTablesOrFiles
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTablesOrFilesCall(String hyperscaleDatasetId, Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleDatasetTablesOrFilesValidateBeforeCall(String hyperscaleDatasetId, Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling getHyperscaleDatasetTablesOrFiles(Async)");
        }

        return getHyperscaleDatasetTablesOrFilesCall(hyperscaleDatasetId, limit, cursor, sort, _callback);

    }

    /**
     * Get the tables or files of a hyperscale dataset
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListHyperscaleDatasetTablesOrFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHyperscaleDatasetTablesOrFilesResponse getHyperscaleDatasetTablesOrFiles(String hyperscaleDatasetId, Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListHyperscaleDatasetTablesOrFilesResponse> localVarResp = getHyperscaleDatasetTablesOrFilesWithHttpInfo(hyperscaleDatasetId, limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * Get the tables or files of a hyperscale dataset
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListHyperscaleDatasetTablesOrFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHyperscaleDatasetTablesOrFilesResponse> getHyperscaleDatasetTablesOrFilesWithHttpInfo(String hyperscaleDatasetId, Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleDatasetTablesOrFilesValidateBeforeCall(hyperscaleDatasetId, limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListHyperscaleDatasetTablesOrFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the tables or files of a hyperscale dataset (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTablesOrFilesAsync(String hyperscaleDatasetId, Integer limit, String cursor, String sort, final ApiCallback<ListHyperscaleDatasetTablesOrFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleDatasetTablesOrFilesValidateBeforeCall(hyperscaleDatasetId, limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListHyperscaleDatasetTablesOrFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleDatasetTags
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTagsCall(String hyperscaleDatasetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tags"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleDatasetTagsValidateBeforeCall(String hyperscaleDatasetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling getHyperscaleDatasetTags(Async)");
        }

        return getHyperscaleDatasetTagsCall(hyperscaleDatasetId, _callback);

    }

    /**
     * Get tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse getHyperscaleDatasetTags(String hyperscaleDatasetId) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = getHyperscaleDatasetTagsWithHttpInfo(hyperscaleDatasetId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a Hyperscale Dataset.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> getHyperscaleDatasetTagsWithHttpInfo(String hyperscaleDatasetId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a Hyperscale Dataset. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetTagsAsync(String hyperscaleDatasetId, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleDatasetTagsValidateBeforeCall(hyperscaleDatasetId, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleDatasets
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetsCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleDatasetsValidateBeforeCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        return getHyperscaleDatasetsCall(limit, cursor, sort, _callback);

    }

    /**
     * Returns a list of Hyperscale Datasets.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListHyperscaleDatasetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHyperscaleDatasetsResponse getHyperscaleDatasets(Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListHyperscaleDatasetsResponse> localVarResp = getHyperscaleDatasetsWithHttpInfo(limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * Returns a list of Hyperscale Datasets.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListHyperscaleDatasetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHyperscaleDatasetsResponse> getHyperscaleDatasetsWithHttpInfo(Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleDatasetsValidateBeforeCall(limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListHyperscaleDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Hyperscale Datasets. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleDatasetsAsync(Integer limit, String cursor, String sort, final ApiCallback<ListHyperscaleDatasetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleDatasetsValidateBeforeCall(limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListHyperscaleDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleMountPointById
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleMountPointByIdCall(String hyperscaleMountPointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points/{hyperscaleMountPointId}"
            .replace("{" + "hyperscaleMountPointId" + "}", localVarApiClient.escapeString(hyperscaleMountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleMountPointByIdValidateBeforeCall(String hyperscaleMountPointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleMountPointId' is set
        if (hyperscaleMountPointId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleMountPointId' when calling getHyperscaleMountPointById(Async)");
        }

        return getHyperscaleMountPointByIdCall(hyperscaleMountPointId, _callback);

    }

    /**
     * Get a Hyperscale Mount Points.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @return HyperscaleMountPoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HyperscaleMountPoint getHyperscaleMountPointById(String hyperscaleMountPointId) throws ApiException {
        ApiResponse<HyperscaleMountPoint> localVarResp = getHyperscaleMountPointByIdWithHttpInfo(hyperscaleMountPointId);
        return localVarResp.getData();
    }

    /**
     * Get a Hyperscale Mount Points.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @return ApiResponse&lt;HyperscaleMountPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperscaleMountPoint> getHyperscaleMountPointByIdWithHttpInfo(String hyperscaleMountPointId) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleMountPointByIdValidateBeforeCall(hyperscaleMountPointId, null);
        Type localVarReturnType = new TypeToken<HyperscaleMountPoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Hyperscale Mount Points. (asynchronously)
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleMountPointByIdAsync(String hyperscaleMountPointId, final ApiCallback<HyperscaleMountPoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleMountPointByIdValidateBeforeCall(hyperscaleMountPointId, _callback);
        Type localVarReturnType = new TypeToken<HyperscaleMountPoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHyperscaleMountPoints
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleMountPointsCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHyperscaleMountPointsValidateBeforeCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        return getHyperscaleMountPointsCall(limit, cursor, sort, _callback);

    }

    /**
     * Returns a list of Hyperscale Mount Points.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListHyperscaleMountPointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListHyperscaleMountPointsResponse getHyperscaleMountPoints(Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListHyperscaleMountPointsResponse> localVarResp = getHyperscaleMountPointsWithHttpInfo(limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * Returns a list of Hyperscale Mount Points.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListHyperscaleMountPointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHyperscaleMountPointsResponse> getHyperscaleMountPointsWithHttpInfo(Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getHyperscaleMountPointsValidateBeforeCall(limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListHyperscaleMountPointsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Hyperscale Mount Points. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHyperscaleMountPointsAsync(Integer limit, String cursor, String sort, final ApiCallback<ListHyperscaleMountPointsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHyperscaleMountPointsValidateBeforeCall(limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListHyperscaleMountPointsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHyperscaleConnectors
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleConnectorsCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHyperscaleConnectorsValidateBeforeCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchHyperscaleConnectorsCall(limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search for Hyperscale Connectors.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchHyperscaleConnectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchHyperscaleConnectorsResponse searchHyperscaleConnectors(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchHyperscaleConnectorsResponse> localVarResp = searchHyperscaleConnectorsWithHttpInfo(limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for Hyperscale Connectors.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchHyperscaleConnectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchHyperscaleConnectorsResponse> searchHyperscaleConnectorsWithHttpInfo(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchHyperscaleConnectorsValidateBeforeCall(limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchHyperscaleConnectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Hyperscale Connectors. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleConnectorsAsync(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchHyperscaleConnectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHyperscaleConnectorsValidateBeforeCall(limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchHyperscaleConnectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHyperscaleDatasetTablesOrFiles
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleDatasetTablesOrFilesCall(String hyperscaleDatasetId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/search"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHyperscaleDatasetTablesOrFilesValidateBeforeCall(String hyperscaleDatasetId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling searchHyperscaleDatasetTablesOrFiles(Async)");
        }

        return searchHyperscaleDatasetTablesOrFilesCall(hyperscaleDatasetId, limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search the tables or files of a hyperscale dataset
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchHyperscaleDatasetTablesOrFilesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchHyperscaleDatasetTablesOrFilesResponse searchHyperscaleDatasetTablesOrFiles(String hyperscaleDatasetId, Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchHyperscaleDatasetTablesOrFilesResponse> localVarResp = searchHyperscaleDatasetTablesOrFilesWithHttpInfo(hyperscaleDatasetId, limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search the tables or files of a hyperscale dataset
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchHyperscaleDatasetTablesOrFilesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchHyperscaleDatasetTablesOrFilesResponse> searchHyperscaleDatasetTablesOrFilesWithHttpInfo(String hyperscaleDatasetId, Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchHyperscaleDatasetTablesOrFilesValidateBeforeCall(hyperscaleDatasetId, limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchHyperscaleDatasetTablesOrFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search the tables or files of a hyperscale dataset (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleDatasetTablesOrFilesAsync(String hyperscaleDatasetId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchHyperscaleDatasetTablesOrFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHyperscaleDatasetTablesOrFilesValidateBeforeCall(hyperscaleDatasetId, limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchHyperscaleDatasetTablesOrFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHyperscaleDatasets
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleDatasetsCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHyperscaleDatasetsValidateBeforeCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchHyperscaleDatasetsCall(limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search for Hyperscale Datasets.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchHyperscaleDatasetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchHyperscaleDatasetsResponse searchHyperscaleDatasets(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchHyperscaleDatasetsResponse> localVarResp = searchHyperscaleDatasetsWithHttpInfo(limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for Hyperscale Datasets.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchHyperscaleDatasetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchHyperscaleDatasetsResponse> searchHyperscaleDatasetsWithHttpInfo(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchHyperscaleDatasetsValidateBeforeCall(limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchHyperscaleDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Hyperscale Datasets. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleDatasetsAsync(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchHyperscaleDatasetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHyperscaleDatasetsValidateBeforeCall(limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchHyperscaleDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchHyperscaleMountPoints
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleMountPointsCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchHyperscaleMountPointsValidateBeforeCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchHyperscaleMountPointsCall(limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search for Hyperscale Mount Points.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchHyperscaleMountPointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchHyperscaleMountPointsResponse searchHyperscaleMountPoints(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchHyperscaleMountPointsResponse> localVarResp = searchHyperscaleMountPointsWithHttpInfo(limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for Hyperscale Mount Points.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchHyperscaleMountPointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchHyperscaleMountPointsResponse> searchHyperscaleMountPointsWithHttpInfo(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchHyperscaleMountPointsValidateBeforeCall(limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchHyperscaleMountPointsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for Hyperscale Mount Points. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchHyperscaleMountPointsAsync(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchHyperscaleMountPointsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchHyperscaleMountPointsValidateBeforeCall(limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchHyperscaleMountPointsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHyperscaleConnectorById
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param hyperscaleConnectorUpdateParameters The new data to update a Hyperscale Connector. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleConnectorByIdCall(String hyperscaleConnectorId, HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleConnectorUpdateParameters;

        // create path and map variables
        String localVarPath = "/hyperscale-connectors/{hyperscaleConnectorId}"
            .replace("{" + "hyperscaleConnectorId" + "}", localVarApiClient.escapeString(hyperscaleConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHyperscaleConnectorByIdValidateBeforeCall(String hyperscaleConnectorId, HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleConnectorId' is set
        if (hyperscaleConnectorId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleConnectorId' when calling updateHyperscaleConnectorById(Async)");
        }

        return updateHyperscaleConnectorByIdCall(hyperscaleConnectorId, hyperscaleConnectorUpdateParameters, _callback);

    }

    /**
     * Update a Hyperscale Connector by ID.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param hyperscaleConnectorUpdateParameters The new data to update a Hyperscale Connector. (optional)
     * @return UpdateHyperscaleConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHyperscaleConnectorResponse updateHyperscaleConnectorById(String hyperscaleConnectorId, HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters) throws ApiException {
        ApiResponse<UpdateHyperscaleConnectorResponse> localVarResp = updateHyperscaleConnectorByIdWithHttpInfo(hyperscaleConnectorId, hyperscaleConnectorUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Hyperscale Connector by ID.
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param hyperscaleConnectorUpdateParameters The new data to update a Hyperscale Connector. (optional)
     * @return ApiResponse&lt;UpdateHyperscaleConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHyperscaleConnectorResponse> updateHyperscaleConnectorByIdWithHttpInfo(String hyperscaleConnectorId, HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateHyperscaleConnectorByIdValidateBeforeCall(hyperscaleConnectorId, hyperscaleConnectorUpdateParameters, null);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Hyperscale Connector by ID. (asynchronously)
     * 
     * @param hyperscaleConnectorId The ID of the Hyperscale Connector. (required)
     * @param hyperscaleConnectorUpdateParameters The new data to update a Hyperscale Connector. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleConnectorByIdAsync(String hyperscaleConnectorId, HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters, final ApiCallback<UpdateHyperscaleConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHyperscaleConnectorByIdValidateBeforeCall(hyperscaleConnectorId, hyperscaleConnectorUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHyperscaleDatasetById
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetUpdateParameters The new data to update a Hyperscale Dataset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleDatasetByIdCall(String hyperscaleDatasetId, HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleDatasetUpdateParameters;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHyperscaleDatasetByIdValidateBeforeCall(String hyperscaleDatasetId, HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling updateHyperscaleDatasetById(Async)");
        }

        return updateHyperscaleDatasetByIdCall(hyperscaleDatasetId, hyperscaleDatasetUpdateParameters, _callback);

    }

    /**
     * Update a Hyperscale Dataset by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetUpdateParameters The new data to update a Hyperscale Dataset. (optional)
     * @return UpdateHyperscaleDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHyperscaleDatasetResponse updateHyperscaleDatasetById(String hyperscaleDatasetId, HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters) throws ApiException {
        ApiResponse<UpdateHyperscaleDatasetResponse> localVarResp = updateHyperscaleDatasetByIdWithHttpInfo(hyperscaleDatasetId, hyperscaleDatasetUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Hyperscale Dataset by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetUpdateParameters The new data to update a Hyperscale Dataset. (optional)
     * @return ApiResponse&lt;UpdateHyperscaleDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHyperscaleDatasetResponse> updateHyperscaleDatasetByIdWithHttpInfo(String hyperscaleDatasetId, HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateHyperscaleDatasetByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetUpdateParameters, null);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Hyperscale Dataset by ID. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetUpdateParameters The new data to update a Hyperscale Dataset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleDatasetByIdAsync(String hyperscaleDatasetId, HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters, final ApiCallback<UpdateHyperscaleDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHyperscaleDatasetByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHyperscaleDatasetTableOrFileById
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param hyperscaleDatasetTableOrFileUpdateParameters The new data to update a Hyperscale Dataset table or file. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleDatasetTableOrFileByIdCall(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleDatasetTableOrFileUpdateParameters;

        // create path and map variables
        String localVarPath = "/hyperscale-datasets/{hyperscaleDatasetId}/tables-or-files/{hyperscaleDatasetTableOrFileId}"
            .replace("{" + "hyperscaleDatasetId" + "}", localVarApiClient.escapeString(hyperscaleDatasetId.toString()))
            .replace("{" + "hyperscaleDatasetTableOrFileId" + "}", localVarApiClient.escapeString(hyperscaleDatasetTableOrFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHyperscaleDatasetTableOrFileByIdValidateBeforeCall(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleDatasetId' is set
        if (hyperscaleDatasetId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetId' when calling updateHyperscaleDatasetTableOrFileById(Async)");
        }

        // verify the required parameter 'hyperscaleDatasetTableOrFileId' is set
        if (hyperscaleDatasetTableOrFileId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleDatasetTableOrFileId' when calling updateHyperscaleDatasetTableOrFileById(Async)");
        }

        return updateHyperscaleDatasetTableOrFileByIdCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, hyperscaleDatasetTableOrFileUpdateParameters, _callback);

    }

    /**
     * Update a Hyperscale Dataset table or file by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param hyperscaleDatasetTableOrFileUpdateParameters The new data to update a Hyperscale Dataset table or file. (optional)
     * @return UpdateHyperscaleDatasetTableOrFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHyperscaleDatasetTableOrFileResponse updateHyperscaleDatasetTableOrFileById(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters) throws ApiException {
        ApiResponse<UpdateHyperscaleDatasetTableOrFileResponse> localVarResp = updateHyperscaleDatasetTableOrFileByIdWithHttpInfo(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, hyperscaleDatasetTableOrFileUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Hyperscale Dataset table or file by ID.
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param hyperscaleDatasetTableOrFileUpdateParameters The new data to update a Hyperscale Dataset table or file. (optional)
     * @return ApiResponse&lt;UpdateHyperscaleDatasetTableOrFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHyperscaleDatasetTableOrFileResponse> updateHyperscaleDatasetTableOrFileByIdWithHttpInfo(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateHyperscaleDatasetTableOrFileByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, hyperscaleDatasetTableOrFileUpdateParameters, null);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleDatasetTableOrFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Hyperscale Dataset table or file by ID. (asynchronously)
     * 
     * @param hyperscaleDatasetId The ID of the Hyperscale Dataset. (required)
     * @param hyperscaleDatasetTableOrFileId The ID of the Hyperscale Dataset table or file. (required)
     * @param hyperscaleDatasetTableOrFileUpdateParameters The new data to update a Hyperscale Dataset table or file. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleDatasetTableOrFileByIdAsync(String hyperscaleDatasetId, String hyperscaleDatasetTableOrFileId, HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters, final ApiCallback<UpdateHyperscaleDatasetTableOrFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHyperscaleDatasetTableOrFileByIdValidateBeforeCall(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, hyperscaleDatasetTableOrFileUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleDatasetTableOrFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHyperscaleMountPointById
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param hyperscaleMountPointUpdateParameters The new data to update a Hyperscale Mount Point. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleMountPointByIdCall(String hyperscaleMountPointId, HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hyperscaleMountPointUpdateParameters;

        // create path and map variables
        String localVarPath = "/hyperscale-mount-points/{hyperscaleMountPointId}"
            .replace("{" + "hyperscaleMountPointId" + "}", localVarApiClient.escapeString(hyperscaleMountPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHyperscaleMountPointByIdValidateBeforeCall(String hyperscaleMountPointId, HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hyperscaleMountPointId' is set
        if (hyperscaleMountPointId == null) {
            throw new ApiException("Missing the required parameter 'hyperscaleMountPointId' when calling updateHyperscaleMountPointById(Async)");
        }

        return updateHyperscaleMountPointByIdCall(hyperscaleMountPointId, hyperscaleMountPointUpdateParameters, _callback);

    }

    /**
     * Update a Hyperscale Mount Point by ID.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param hyperscaleMountPointUpdateParameters The new data to update a Hyperscale Mount Point. (optional)
     * @return UpdateHyperscaleMountPointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHyperscaleMountPointResponse updateHyperscaleMountPointById(String hyperscaleMountPointId, HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters) throws ApiException {
        ApiResponse<UpdateHyperscaleMountPointResponse> localVarResp = updateHyperscaleMountPointByIdWithHttpInfo(hyperscaleMountPointId, hyperscaleMountPointUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Hyperscale Mount Point by ID.
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param hyperscaleMountPointUpdateParameters The new data to update a Hyperscale Mount Point. (optional)
     * @return ApiResponse&lt;UpdateHyperscaleMountPointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateHyperscaleMountPointResponse> updateHyperscaleMountPointByIdWithHttpInfo(String hyperscaleMountPointId, HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateHyperscaleMountPointByIdValidateBeforeCall(hyperscaleMountPointId, hyperscaleMountPointUpdateParameters, null);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleMountPointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Hyperscale Mount Point by ID. (asynchronously)
     * 
     * @param hyperscaleMountPointId The ID of the Hyperscale Mount Point. (required)
     * @param hyperscaleMountPointUpdateParameters The new data to update a Hyperscale Mount Point. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHyperscaleMountPointByIdAsync(String hyperscaleMountPointId, HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters, final ApiCallback<UpdateHyperscaleMountPointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHyperscaleMountPointByIdValidateBeforeCall(hyperscaleMountPointId, hyperscaleMountPointUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<UpdateHyperscaleMountPointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
