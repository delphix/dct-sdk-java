/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiCallback;
import com.delphix.dct.ApiClient;
import com.delphix.dct.ApiException;
import com.delphix.dct.ApiResponse;
import com.delphix.dct.Configuration;
import com.delphix.dct.Pair;
import com.delphix.dct.ProgressRequestBody;
import com.delphix.dct.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.delphix.dct.models.ASEDSourceLinkSourceParameters;
import com.delphix.dct.models.DSource;
import com.delphix.dct.models.DSourceSnapshotParameters;
import com.delphix.dct.models.DeleteDSourceRequest;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.Job;
import com.delphix.dct.models.LinkDSourceDefaultRequest;
import com.delphix.dct.models.LinkDSourceResponse;
import com.delphix.dct.models.ListDSourcesResponse;
import com.delphix.dct.models.ListSnapshotsResponse;
import com.delphix.dct.models.OracleDSourceLinkSourceParameters;
import com.delphix.dct.models.PermissionEnum;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchDSourcesResponse;
import com.delphix.dct.models.SnapshotDSourceResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DSourcesApi {
    private ApiClient localVarApiClient;

    public DSourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DSourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTagsDsource
     * @param dsourceId The ID of the dSource. (required)
     * @param tagsRequest Tags information for DSource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagsDsourceCall(String dsourceId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}/tags"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagsDsourceValidateBeforeCall(String dsourceId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling createTagsDsource(Async)");
        }
        
        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling createTagsDsource(Async)");
        }
        

        okhttp3.Call localVarCall = createTagsDsourceCall(dsourceId, tagsRequest, _callback);
        return localVarCall;

    }

    /**
     * Create tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param tagsRequest Tags information for DSource. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse createTagsDsource(String dsourceId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = createTagsDsourceWithHttpInfo(dsourceId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param tagsRequest Tags information for DSource. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> createTagsDsourceWithHttpInfo(String dsourceId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createTagsDsourceValidateBeforeCall(dsourceId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tags for a dSource. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param tagsRequest Tags information for DSource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTagsDsourceAsync(String dsourceId, TagsRequest tagsRequest, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagsDsourceValidateBeforeCall(dsourceId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDsource
     * @param deleteDSourceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDsourceCall(DeleteDSourceRequest deleteDSourceRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteDSourceRequest;

        // create path and map variables
        String localVarPath = "/dsources/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDsourceValidateBeforeCall(DeleteDSourceRequest deleteDSourceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deleteDSourceRequest' is set
        if (deleteDSourceRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDSourceRequest' when calling deleteDsource(Async)");
        }
        

        okhttp3.Call localVarCall = deleteDsourceCall(deleteDSourceRequest, _callback);
        return localVarCall;

    }

    /**
     * Delete the specified dSource.
     * 
     * @param deleteDSourceRequest  (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Job deleteDsource(DeleteDSourceRequest deleteDSourceRequest) throws ApiException {
        ApiResponse<Job> localVarResp = deleteDsourceWithHttpInfo(deleteDSourceRequest);
        return localVarResp.getData();
    }

    /**
     * Delete the specified dSource.
     * 
     * @param deleteDSourceRequest  (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> deleteDsourceWithHttpInfo(DeleteDSourceRequest deleteDSourceRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteDsourceValidateBeforeCall(deleteDSourceRequest, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the specified dSource. (asynchronously)
     * 
     * @param deleteDSourceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDsourceAsync(DeleteDSourceRequest deleteDSourceRequest, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDsourceValidateBeforeCall(deleteDSourceRequest, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTagsDsource
     * @param dsourceId The ID of the dSource. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagsDsourceCall(String dsourceId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}/tags/delete"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagsDsourceValidateBeforeCall(String dsourceId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling deleteTagsDsource(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTagsDsourceCall(dsourceId, deleteTag, _callback);
        return localVarCall;

    }

    /**
     * Delete tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTagsDsource(String dsourceId, DeleteTag deleteTag) throws ApiException {
        deleteTagsDsourceWithHttpInfo(dsourceId, deleteTag);
    }

    /**
     * Delete tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTagsDsourceWithHttpInfo(String dsourceId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = deleteTagsDsourceValidateBeforeCall(dsourceId, deleteTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tags for a dSource. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagsDsourceAsync(String dsourceId, DeleteTag deleteTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagsDsourceValidateBeforeCall(dsourceId, deleteTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAseDsourceLinkingDefaults
     * @param linkDSourceDefaultRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAseDsourceLinkingDefaultsCall(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = linkDSourceDefaultRequest;

        // create path and map variables
        String localVarPath = "/dsources/ase/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAseDsourceLinkingDefaultsValidateBeforeCall(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'linkDSourceDefaultRequest' is set
        if (linkDSourceDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'linkDSourceDefaultRequest' when calling getAseDsourceLinkingDefaults(Async)");
        }
        

        okhttp3.Call localVarCall = getAseDsourceLinkingDefaultsCall(linkDSourceDefaultRequest, _callback);
        return localVarCall;

    }

    /**
     * Get defaults for an ASE dSource linking.
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @return ASEDSourceLinkSourceParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ASEDSourceLinkSourceParameters getAseDsourceLinkingDefaults(LinkDSourceDefaultRequest linkDSourceDefaultRequest) throws ApiException {
        ApiResponse<ASEDSourceLinkSourceParameters> localVarResp = getAseDsourceLinkingDefaultsWithHttpInfo(linkDSourceDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Get defaults for an ASE dSource linking.
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @return ApiResponse&lt;ASEDSourceLinkSourceParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ASEDSourceLinkSourceParameters> getAseDsourceLinkingDefaultsWithHttpInfo(LinkDSourceDefaultRequest linkDSourceDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = getAseDsourceLinkingDefaultsValidateBeforeCall(linkDSourceDefaultRequest, null);
        Type localVarReturnType = new TypeToken<ASEDSourceLinkSourceParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get defaults for an ASE dSource linking. (asynchronously)
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAseDsourceLinkingDefaultsAsync(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback<ASEDSourceLinkSourceParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAseDsourceLinkingDefaultsValidateBeforeCall(linkDSourceDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<ASEDSourceLinkSourceParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDsourceById
     * @param dsourceId The ID of the dSource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourceByIdCall(String dsourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDsourceByIdValidateBeforeCall(String dsourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling getDsourceById(Async)");
        }
        

        okhttp3.Call localVarCall = getDsourceByIdCall(dsourceId, _callback);
        return localVarCall;

    }

    /**
     * Get a dSource by ID.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @return DSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DSource getDsourceById(String dsourceId) throws ApiException {
        ApiResponse<DSource> localVarResp = getDsourceByIdWithHttpInfo(dsourceId);
        return localVarResp.getData();
    }

    /**
     * Get a dSource by ID.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @return ApiResponse&lt;DSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DSource> getDsourceByIdWithHttpInfo(String dsourceId) throws ApiException {
        okhttp3.Call localVarCall = getDsourceByIdValidateBeforeCall(dsourceId, null);
        Type localVarReturnType = new TypeToken<DSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a dSource by ID. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourceByIdAsync(String dsourceId, final ApiCallback<DSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDsourceByIdValidateBeforeCall(dsourceId, _callback);
        Type localVarReturnType = new TypeToken<DSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDsourceSnapshots
     * @param dsourceId The ID of the dSource. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourceSnapshotsCall(String dsourceId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}/snapshots"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDsourceSnapshotsValidateBeforeCall(String dsourceId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling getDsourceSnapshots(Async)");
        }
        

        okhttp3.Call localVarCall = getDsourceSnapshotsCall(dsourceId, limit, cursor, _callback);
        return localVarCall;

    }

    /**
     * List Snapshots for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @return ListSnapshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSnapshotsResponse getDsourceSnapshots(String dsourceId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListSnapshotsResponse> localVarResp = getDsourceSnapshotsWithHttpInfo(dsourceId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * List Snapshots for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @return ApiResponse&lt;ListSnapshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSnapshotsResponse> getDsourceSnapshotsWithHttpInfo(String dsourceId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getDsourceSnapshotsValidateBeforeCall(dsourceId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListSnapshotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Snapshots for a dSource. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourceSnapshotsAsync(String dsourceId, Integer limit, String cursor, final ApiCallback<ListSnapshotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDsourceSnapshotsValidateBeforeCall(dsourceId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListSnapshotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDsources
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourcesCall(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dsources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDsourcesValidateBeforeCall(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getDsourcesCall(limit, cursor, sort, permission, _callback);
        return localVarCall;

    }

    /**
     * List all dSources.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @return ListDSourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDSourcesResponse getDsources(Integer limit, String cursor, String sort, PermissionEnum permission) throws ApiException {
        ApiResponse<ListDSourcesResponse> localVarResp = getDsourcesWithHttpInfo(limit, cursor, sort, permission);
        return localVarResp.getData();
    }

    /**
     * List all dSources.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @return ApiResponse&lt;ListDSourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDSourcesResponse> getDsourcesWithHttpInfo(Integer limit, String cursor, String sort, PermissionEnum permission) throws ApiException {
        okhttp3.Call localVarCall = getDsourcesValidateBeforeCall(limit, cursor, sort, permission, null);
        Type localVarReturnType = new TypeToken<ListDSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all dSources. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDsourcesAsync(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback<ListDSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDsourcesValidateBeforeCall(limit, cursor, sort, permission, _callback);
        Type localVarReturnType = new TypeToken<ListDSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOracleDsourceLinkingDefaults
     * @param linkDSourceDefaultRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOracleDsourceLinkingDefaultsCall(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = linkDSourceDefaultRequest;

        // create path and map variables
        String localVarPath = "/dsources/oracle/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOracleDsourceLinkingDefaultsValidateBeforeCall(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'linkDSourceDefaultRequest' is set
        if (linkDSourceDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'linkDSourceDefaultRequest' when calling getOracleDsourceLinkingDefaults(Async)");
        }
        

        okhttp3.Call localVarCall = getOracleDsourceLinkingDefaultsCall(linkDSourceDefaultRequest, _callback);
        return localVarCall;

    }

    /**
     * Get defaults for dSource linking.
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @return OracleDSourceLinkSourceParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public OracleDSourceLinkSourceParameters getOracleDsourceLinkingDefaults(LinkDSourceDefaultRequest linkDSourceDefaultRequest) throws ApiException {
        ApiResponse<OracleDSourceLinkSourceParameters> localVarResp = getOracleDsourceLinkingDefaultsWithHttpInfo(linkDSourceDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Get defaults for dSource linking.
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @return ApiResponse&lt;OracleDSourceLinkSourceParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OracleDSourceLinkSourceParameters> getOracleDsourceLinkingDefaultsWithHttpInfo(LinkDSourceDefaultRequest linkDSourceDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = getOracleDsourceLinkingDefaultsValidateBeforeCall(linkDSourceDefaultRequest, null);
        Type localVarReturnType = new TypeToken<OracleDSourceLinkSourceParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get defaults for dSource linking. (asynchronously)
     * 
     * @param linkDSourceDefaultRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOracleDsourceLinkingDefaultsAsync(LinkDSourceDefaultRequest linkDSourceDefaultRequest, final ApiCallback<OracleDSourceLinkSourceParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOracleDsourceLinkingDefaultsValidateBeforeCall(linkDSourceDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<OracleDSourceLinkSourceParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagsDsource
     * @param dsourceId The ID of the dSource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsDsourceCall(String dsourceId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}/tags"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsDsourceValidateBeforeCall(String dsourceId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling getTagsDsource(Async)");
        }
        

        okhttp3.Call localVarCall = getTagsDsourceCall(dsourceId, _callback);
        return localVarCall;

    }

    /**
     * Get tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse getTagsDsource(String dsourceId) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = getTagsDsourceWithHttpInfo(dsourceId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> getTagsDsourceWithHttpInfo(String dsourceId) throws ApiException {
        okhttp3.Call localVarCall = getTagsDsourceValidateBeforeCall(dsourceId, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a dSource. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsDsourceAsync(String dsourceId, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsDsourceValidateBeforeCall(dsourceId, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkAseDatabase
     * @param asEDSourceLinkSourceParameters The parameters to link an ASE dSource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkAseDatabaseCall(ASEDSourceLinkSourceParameters asEDSourceLinkSourceParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = asEDSourceLinkSourceParameters;

        // create path and map variables
        String localVarPath = "/dsources/ase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkAseDatabaseValidateBeforeCall(ASEDSourceLinkSourceParameters asEDSourceLinkSourceParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'asEDSourceLinkSourceParameters' is set
        if (asEDSourceLinkSourceParameters == null) {
            throw new ApiException("Missing the required parameter 'asEDSourceLinkSourceParameters' when calling linkAseDatabase(Async)");
        }
        

        okhttp3.Call localVarCall = linkAseDatabaseCall(asEDSourceLinkSourceParameters, _callback);
        return localVarCall;

    }

    /**
     * Link an ASE database as dSource.
     * 
     * @param asEDSourceLinkSourceParameters The parameters to link an ASE dSource. (required)
     * @return LinkDSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LinkDSourceResponse linkAseDatabase(ASEDSourceLinkSourceParameters asEDSourceLinkSourceParameters) throws ApiException {
        ApiResponse<LinkDSourceResponse> localVarResp = linkAseDatabaseWithHttpInfo(asEDSourceLinkSourceParameters);
        return localVarResp.getData();
    }

    /**
     * Link an ASE database as dSource.
     * 
     * @param asEDSourceLinkSourceParameters The parameters to link an ASE dSource. (required)
     * @return ApiResponse&lt;LinkDSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkDSourceResponse> linkAseDatabaseWithHttpInfo(ASEDSourceLinkSourceParameters asEDSourceLinkSourceParameters) throws ApiException {
        okhttp3.Call localVarCall = linkAseDatabaseValidateBeforeCall(asEDSourceLinkSourceParameters, null);
        Type localVarReturnType = new TypeToken<LinkDSourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link an ASE database as dSource. (asynchronously)
     * 
     * @param asEDSourceLinkSourceParameters The parameters to link an ASE dSource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkAseDatabaseAsync(ASEDSourceLinkSourceParameters asEDSourceLinkSourceParameters, final ApiCallback<LinkDSourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkAseDatabaseValidateBeforeCall(asEDSourceLinkSourceParameters, _callback);
        Type localVarReturnType = new TypeToken<LinkDSourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linkOracleDatabase
     * @param oracleDSourceLinkSourceParameters The parameters to link an Oracle dSource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkOracleDatabaseCall(OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = oracleDSourceLinkSourceParameters;

        // create path and map variables
        String localVarPath = "/dsources/oracle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linkOracleDatabaseValidateBeforeCall(OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'oracleDSourceLinkSourceParameters' is set
        if (oracleDSourceLinkSourceParameters == null) {
            throw new ApiException("Missing the required parameter 'oracleDSourceLinkSourceParameters' when calling linkOracleDatabase(Async)");
        }
        

        okhttp3.Call localVarCall = linkOracleDatabaseCall(oracleDSourceLinkSourceParameters, _callback);
        return localVarCall;

    }

    /**
     * Link Oracle database as dSource.
     * 
     * @param oracleDSourceLinkSourceParameters The parameters to link an Oracle dSource. (required)
     * @return LinkDSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public LinkDSourceResponse linkOracleDatabase(OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters) throws ApiException {
        ApiResponse<LinkDSourceResponse> localVarResp = linkOracleDatabaseWithHttpInfo(oracleDSourceLinkSourceParameters);
        return localVarResp.getData();
    }

    /**
     * Link Oracle database as dSource.
     * 
     * @param oracleDSourceLinkSourceParameters The parameters to link an Oracle dSource. (required)
     * @return ApiResponse&lt;LinkDSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkDSourceResponse> linkOracleDatabaseWithHttpInfo(OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters) throws ApiException {
        okhttp3.Call localVarCall = linkOracleDatabaseValidateBeforeCall(oracleDSourceLinkSourceParameters, null);
        Type localVarReturnType = new TypeToken<LinkDSourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Link Oracle database as dSource. (asynchronously)
     * 
     * @param oracleDSourceLinkSourceParameters The parameters to link an Oracle dSource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linkOracleDatabaseAsync(OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters, final ApiCallback<LinkDSourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linkOracleDatabaseValidateBeforeCall(oracleDSourceLinkSourceParameters, _callback);
        Type localVarReturnType = new TypeToken<LinkDSourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchDsources
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDsourcesCall(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/dsources/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchDsourcesValidateBeforeCall(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchDsourcesCall(limit, cursor, sort, permission, searchBody, _callback);
        return localVarCall;

    }

    /**
     * Search for dSources.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchDSourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchDSourcesResponse searchDsources(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchDSourcesResponse> localVarResp = searchDsourcesWithHttpInfo(limit, cursor, sort, permission, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for dSources.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchDSourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchDSourcesResponse> searchDsourcesWithHttpInfo(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchDsourcesValidateBeforeCall(limit, cursor, sort, permission, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchDSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for dSources. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchDsourcesAsync(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback<SearchDSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchDsourcesValidateBeforeCall(limit, cursor, sort, permission, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchDSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotDsource
     * @param dsourceId The ID of the dSource. (required)
     * @param dsourceSnapshotParameters Optional parameters to snapshot a DSource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dSource snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotDsourceCall(String dsourceId, DSourceSnapshotParameters dsourceSnapshotParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = dsourceSnapshotParameters;

        // create path and map variables
        String localVarPath = "/dsources/{dsourceId}/snapshots"
            .replaceAll("\\{" + "dsourceId" + "\\}", localVarApiClient.escapeString(dsourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotDsourceValidateBeforeCall(String dsourceId, DSourceSnapshotParameters dsourceSnapshotParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dsourceId' is set
        if (dsourceId == null) {
            throw new ApiException("Missing the required parameter 'dsourceId' when calling snapshotDsource(Async)");
        }
        

        okhttp3.Call localVarCall = snapshotDsourceCall(dsourceId, dsourceSnapshotParameters, _callback);
        return localVarCall;

    }

    /**
     * Snapshot a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param dsourceSnapshotParameters Optional parameters to snapshot a DSource. (optional)
     * @return SnapshotDSourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dSource snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotDSourceResponse snapshotDsource(String dsourceId, DSourceSnapshotParameters dsourceSnapshotParameters) throws ApiException {
        ApiResponse<SnapshotDSourceResponse> localVarResp = snapshotDsourceWithHttpInfo(dsourceId, dsourceSnapshotParameters);
        return localVarResp.getData();
    }

    /**
     * Snapshot a dSource.
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param dsourceSnapshotParameters Optional parameters to snapshot a DSource. (optional)
     * @return ApiResponse&lt;SnapshotDSourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dSource snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotDSourceResponse> snapshotDsourceWithHttpInfo(String dsourceId, DSourceSnapshotParameters dsourceSnapshotParameters) throws ApiException {
        okhttp3.Call localVarCall = snapshotDsourceValidateBeforeCall(dsourceId, dsourceSnapshotParameters, null);
        Type localVarReturnType = new TypeToken<SnapshotDSourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Snapshot a dSource. (asynchronously)
     * 
     * @param dsourceId The ID of the dSource. (required)
     * @param dsourceSnapshotParameters Optional parameters to snapshot a DSource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> dSource snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotDsourceAsync(String dsourceId, DSourceSnapshotParameters dsourceSnapshotParameters, final ApiCallback<SnapshotDSourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotDsourceValidateBeforeCall(dsourceId, dsourceSnapshotParameters, _callback);
        Type localVarReturnType = new TypeToken<SnapshotDSourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
