/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Parameters to update a MaskingJob.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class UpdateMaskingJobParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CONNECTOR_USERNAME = "connector_username";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_USERNAME)
  private String connectorUsername;

  public static final String SERIALIZED_NAME_CONNECTOR_PASSWORD = "connector_password";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PASSWORD)
  private String connectorPassword;

  public static final String SERIALIZED_NAME_ON_THE_FLY_SOURCE_CONNECTOR_USERNAME = "on_the_fly_source_connector_username";
  @SerializedName(SERIALIZED_NAME_ON_THE_FLY_SOURCE_CONNECTOR_USERNAME)
  private String onTheFlySourceConnectorUsername;

  public static final String SERIALIZED_NAME_ON_THE_FLY_SOURCE_CONNECTOR_PASSWORD = "on_the_fly_source_connector_password";
  @SerializedName(SERIALIZED_NAME_ON_THE_FLY_SOURCE_CONNECTOR_PASSWORD)
  private String onTheFlySourceConnectorPassword;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DATASET_ID = "dataset_id";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  /**
   * Defines whether execution data will be stored after execution is complete (Hyperscale Job only).
   */
  @JsonAdapter(RetainExecutionDataEnum.Adapter.class)
  public enum RetainExecutionDataEnum {
    NO("NO"),
    
    ON_ERROR("ON_ERROR"),
    
    ALWAYS("ALWAYS");

    private String value;

    RetainExecutionDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetainExecutionDataEnum fromValue(String value) {
      for (RetainExecutionDataEnum b : RetainExecutionDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetainExecutionDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetainExecutionDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetainExecutionDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetainExecutionDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RetainExecutionDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETAIN_EXECUTION_DATA = "retain_execution_data";
  @SerializedName(SERIALIZED_NAME_RETAIN_EXECUTION_DATA)
  private RetainExecutionDataEnum retainExecutionData;

  public static final String SERIALIZED_NAME_MAX_MEMORY = "max_memory";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY)
  private Integer maxMemory;

  public static final String SERIALIZED_NAME_MIN_MEMORY = "min_memory";
  @SerializedName(SERIALIZED_NAME_MIN_MEMORY)
  private Integer minMemory;

  public static final String SERIALIZED_NAME_FEEDBACK_SIZE = "feedback_size";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_SIZE)
  private Integer feedbackSize;

  public static final String SERIALIZED_NAME_STREAM_ROW_LIMIT = "stream_row_limit";
  @SerializedName(SERIALIZED_NAME_STREAM_ROW_LIMIT)
  private Integer streamRowLimit;

  public static final String SERIALIZED_NAME_NUM_INPUT_STREAMS = "num_input_streams";
  @SerializedName(SERIALIZED_NAME_NUM_INPUT_STREAMS)
  private Integer numInputStreams;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_SOURCE_CONNECTIONS = "max_concurrent_source_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_SOURCE_CONNECTIONS)
  private Integer maxConcurrentSourceConnections;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_TARGET_CONNECTIONS = "max_concurrent_target_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_TARGET_CONNECTIONS)
  private Integer maxConcurrentTargetConnections;

  public static final String SERIALIZED_NAME_PARALLELISM_DEGREE = "parallelism_degree";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_DEGREE)
  private Integer parallelismDegree;

  public UpdateMaskingJobParameters() {
  }

  public UpdateMaskingJobParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the MaskingJob.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateMaskingJobParameters connectorUsername(String connectorUsername) {
    this.connectorUsername = connectorUsername;
    return this;
  }

   /**
   * The username of the Connector used by the MaskingJob. (Standard Job only).
   * @return connectorUsername
  **/
  @javax.annotation.Nullable
  public String getConnectorUsername() {
    return connectorUsername;
  }

  public void setConnectorUsername(String connectorUsername) {
    this.connectorUsername = connectorUsername;
  }


  public UpdateMaskingJobParameters connectorPassword(String connectorPassword) {
    this.connectorPassword = connectorPassword;
    return this;
  }

   /**
   * The password of the Connector used by the MaskingJob. (Standard Job only).
   * @return connectorPassword
  **/
  @javax.annotation.Nullable
  public String getConnectorPassword() {
    return connectorPassword;
  }

  public void setConnectorPassword(String connectorPassword) {
    this.connectorPassword = connectorPassword;
  }


  public UpdateMaskingJobParameters onTheFlySourceConnectorUsername(String onTheFlySourceConnectorUsername) {
    this.onTheFlySourceConnectorUsername = onTheFlySourceConnectorUsername;
    return this;
  }

   /**
   * The username of the source Connector used by the on-the-fly MaskingJob. (Standard Job only).
   * @return onTheFlySourceConnectorUsername
  **/
  @javax.annotation.Nullable
  public String getOnTheFlySourceConnectorUsername() {
    return onTheFlySourceConnectorUsername;
  }

  public void setOnTheFlySourceConnectorUsername(String onTheFlySourceConnectorUsername) {
    this.onTheFlySourceConnectorUsername = onTheFlySourceConnectorUsername;
  }


  public UpdateMaskingJobParameters onTheFlySourceConnectorPassword(String onTheFlySourceConnectorPassword) {
    this.onTheFlySourceConnectorPassword = onTheFlySourceConnectorPassword;
    return this;
  }

   /**
   * The password of the source Connector used by the on-the-fly MaskingJob. (Standard Job only).
   * @return onTheFlySourceConnectorPassword
  **/
  @javax.annotation.Nullable
  public String getOnTheFlySourceConnectorPassword() {
    return onTheFlySourceConnectorPassword;
  }

  public void setOnTheFlySourceConnectorPassword(String onTheFlySourceConnectorPassword) {
    this.onTheFlySourceConnectorPassword = onTheFlySourceConnectorPassword;
  }


  public UpdateMaskingJobParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the Job (Hyperscale Job only).
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateMaskingJobParameters datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

   /**
   * Dataset of the Hyperscale Job (Hyperscale Job only).
   * @return datasetId
  **/
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public UpdateMaskingJobParameters retainExecutionData(RetainExecutionDataEnum retainExecutionData) {
    this.retainExecutionData = retainExecutionData;
    return this;
  }

   /**
   * Defines whether execution data will be stored after execution is complete (Hyperscale Job only).
   * @return retainExecutionData
  **/
  @javax.annotation.Nullable
  public RetainExecutionDataEnum getRetainExecutionData() {
    return retainExecutionData;
  }

  public void setRetainExecutionData(RetainExecutionDataEnum retainExecutionData) {
    this.retainExecutionData = retainExecutionData;
  }


  public UpdateMaskingJobParameters maxMemory(Integer maxMemory) {
    this.maxMemory = maxMemory;
    return this;
  }

   /**
   * Maximum memory to be allocated for each Masking job (Hyperscale Job only).
   * @return maxMemory
  **/
  @javax.annotation.Nullable
  public Integer getMaxMemory() {
    return maxMemory;
  }

  public void setMaxMemory(Integer maxMemory) {
    this.maxMemory = maxMemory;
  }


  public UpdateMaskingJobParameters minMemory(Integer minMemory) {
    this.minMemory = minMemory;
    return this;
  }

   /**
   * Minimum memory to be allocated for each Masking job (Hyperscale Job only).
   * @return minMemory
  **/
  @javax.annotation.Nullable
  public Integer getMinMemory() {
    return minMemory;
  }

  public void setMinMemory(Integer minMemory) {
    this.minMemory = minMemory;
  }


  public UpdateMaskingJobParameters feedbackSize(Integer feedbackSize) {
    this.feedbackSize = feedbackSize;
    return this;
  }

   /**
   * Feedback Size for each Masking job (Hyperscale Job only).
   * @return feedbackSize
  **/
  @javax.annotation.Nullable
  public Integer getFeedbackSize() {
    return feedbackSize;
  }

  public void setFeedbackSize(Integer feedbackSize) {
    this.feedbackSize = feedbackSize;
  }


  public UpdateMaskingJobParameters streamRowLimit(Integer streamRowLimit) {
    this.streamRowLimit = streamRowLimit;
    return this;
  }

   /**
   * Stream Row Limit for each Masking job (Hyperscale Job only).
   * @return streamRowLimit
  **/
  @javax.annotation.Nullable
  public Integer getStreamRowLimit() {
    return streamRowLimit;
  }

  public void setStreamRowLimit(Integer streamRowLimit) {
    this.streamRowLimit = streamRowLimit;
  }


  public UpdateMaskingJobParameters numInputStreams(Integer numInputStreams) {
    this.numInputStreams = numInputStreams;
    return this;
  }

   /**
   * Number of input streams to be configured for Masking Job (Hyperscale Job only).
   * @return numInputStreams
  **/
  @javax.annotation.Nullable
  public Integer getNumInputStreams() {
    return numInputStreams;
  }

  public void setNumInputStreams(Integer numInputStreams) {
    this.numInputStreams = numInputStreams;
  }


  public UpdateMaskingJobParameters maxConcurrentSourceConnections(Integer maxConcurrentSourceConnections) {
    this.maxConcurrentSourceConnections = maxConcurrentSourceConnections;
    return this;
  }

   /**
   * Maximum number of parallel connection that the Hyperscale instance can have with the source datasource (Hyperscale Job only).
   * @return maxConcurrentSourceConnections
  **/
  @javax.annotation.Nullable
  public Integer getMaxConcurrentSourceConnections() {
    return maxConcurrentSourceConnections;
  }

  public void setMaxConcurrentSourceConnections(Integer maxConcurrentSourceConnections) {
    this.maxConcurrentSourceConnections = maxConcurrentSourceConnections;
  }


  public UpdateMaskingJobParameters maxConcurrentTargetConnections(Integer maxConcurrentTargetConnections) {
    this.maxConcurrentTargetConnections = maxConcurrentTargetConnections;
    return this;
  }

   /**
   * Maximum number of parallel connection that the Hyperscale instance can have with the target datasource (Hyperscale Job only).
   * @return maxConcurrentTargetConnections
  **/
  @javax.annotation.Nullable
  public Integer getMaxConcurrentTargetConnections() {
    return maxConcurrentTargetConnections;
  }

  public void setMaxConcurrentTargetConnections(Integer maxConcurrentTargetConnections) {
    this.maxConcurrentTargetConnections = maxConcurrentTargetConnections;
  }


  public UpdateMaskingJobParameters parallelismDegree(Integer parallelismDegree) {
    this.parallelismDegree = parallelismDegree;
    return this;
  }

   /**
   * The degree of parallelism (DOP) per Oracle job to recreate the index in the post-load process (Hyperscale Job only).
   * @return parallelismDegree
  **/
  @javax.annotation.Nullable
  public Integer getParallelismDegree() {
    return parallelismDegree;
  }

  public void setParallelismDegree(Integer parallelismDegree) {
    this.parallelismDegree = parallelismDegree;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMaskingJobParameters updateMaskingJobParameters = (UpdateMaskingJobParameters) o;
    return Objects.equals(this.name, updateMaskingJobParameters.name) &&
        Objects.equals(this.connectorUsername, updateMaskingJobParameters.connectorUsername) &&
        Objects.equals(this.connectorPassword, updateMaskingJobParameters.connectorPassword) &&
        Objects.equals(this.onTheFlySourceConnectorUsername, updateMaskingJobParameters.onTheFlySourceConnectorUsername) &&
        Objects.equals(this.onTheFlySourceConnectorPassword, updateMaskingJobParameters.onTheFlySourceConnectorPassword) &&
        Objects.equals(this.description, updateMaskingJobParameters.description) &&
        Objects.equals(this.datasetId, updateMaskingJobParameters.datasetId) &&
        Objects.equals(this.retainExecutionData, updateMaskingJobParameters.retainExecutionData) &&
        Objects.equals(this.maxMemory, updateMaskingJobParameters.maxMemory) &&
        Objects.equals(this.minMemory, updateMaskingJobParameters.minMemory) &&
        Objects.equals(this.feedbackSize, updateMaskingJobParameters.feedbackSize) &&
        Objects.equals(this.streamRowLimit, updateMaskingJobParameters.streamRowLimit) &&
        Objects.equals(this.numInputStreams, updateMaskingJobParameters.numInputStreams) &&
        Objects.equals(this.maxConcurrentSourceConnections, updateMaskingJobParameters.maxConcurrentSourceConnections) &&
        Objects.equals(this.maxConcurrentTargetConnections, updateMaskingJobParameters.maxConcurrentTargetConnections) &&
        Objects.equals(this.parallelismDegree, updateMaskingJobParameters.parallelismDegree);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, connectorUsername, connectorPassword, onTheFlySourceConnectorUsername, onTheFlySourceConnectorPassword, description, datasetId, retainExecutionData, maxMemory, minMemory, feedbackSize, streamRowLimit, numInputStreams, maxConcurrentSourceConnections, maxConcurrentTargetConnections, parallelismDegree);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMaskingJobParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    connectorUsername: ").append(toIndentedString(connectorUsername)).append("\n");
    sb.append("    connectorPassword: ").append(toIndentedString(connectorPassword)).append("\n");
    sb.append("    onTheFlySourceConnectorUsername: ").append(toIndentedString(onTheFlySourceConnectorUsername)).append("\n");
    sb.append("    onTheFlySourceConnectorPassword: ").append(toIndentedString(onTheFlySourceConnectorPassword)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    retainExecutionData: ").append(toIndentedString(retainExecutionData)).append("\n");
    sb.append("    maxMemory: ").append(toIndentedString(maxMemory)).append("\n");
    sb.append("    minMemory: ").append(toIndentedString(minMemory)).append("\n");
    sb.append("    feedbackSize: ").append(toIndentedString(feedbackSize)).append("\n");
    sb.append("    streamRowLimit: ").append(toIndentedString(streamRowLimit)).append("\n");
    sb.append("    numInputStreams: ").append(toIndentedString(numInputStreams)).append("\n");
    sb.append("    maxConcurrentSourceConnections: ").append(toIndentedString(maxConcurrentSourceConnections)).append("\n");
    sb.append("    maxConcurrentTargetConnections: ").append(toIndentedString(maxConcurrentTargetConnections)).append("\n");
    sb.append("    parallelismDegree: ").append(toIndentedString(parallelismDegree)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("connector_username");
    openapiFields.add("connector_password");
    openapiFields.add("on_the_fly_source_connector_username");
    openapiFields.add("on_the_fly_source_connector_password");
    openapiFields.add("description");
    openapiFields.add("dataset_id");
    openapiFields.add("retain_execution_data");
    openapiFields.add("max_memory");
    openapiFields.add("min_memory");
    openapiFields.add("feedback_size");
    openapiFields.add("stream_row_limit");
    openapiFields.add("num_input_streams");
    openapiFields.add("max_concurrent_source_connections");
    openapiFields.add("max_concurrent_target_connections");
    openapiFields.add("parallelism_degree");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UpdateMaskingJobParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMaskingJobParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMaskingJobParameters is not found in the empty JSON string", UpdateMaskingJobParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMaskingJobParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMaskingJobParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("connector_username") != null && !jsonObj.get("connector_username").isJsonNull()) && !jsonObj.get("connector_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector_username").toString()));
      }
      if ((jsonObj.get("connector_password") != null && !jsonObj.get("connector_password").isJsonNull()) && !jsonObj.get("connector_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector_password").toString()));
      }
      if ((jsonObj.get("on_the_fly_source_connector_username") != null && !jsonObj.get("on_the_fly_source_connector_username").isJsonNull()) && !jsonObj.get("on_the_fly_source_connector_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `on_the_fly_source_connector_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("on_the_fly_source_connector_username").toString()));
      }
      if ((jsonObj.get("on_the_fly_source_connector_password") != null && !jsonObj.get("on_the_fly_source_connector_password").isJsonNull()) && !jsonObj.get("on_the_fly_source_connector_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `on_the_fly_source_connector_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("on_the_fly_source_connector_password").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("dataset_id") != null && !jsonObj.get("dataset_id").isJsonNull()) && !jsonObj.get("dataset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset_id").toString()));
      }
      if ((jsonObj.get("retain_execution_data") != null && !jsonObj.get("retain_execution_data").isJsonNull()) && !jsonObj.get("retain_execution_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retain_execution_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retain_execution_data").toString()));
      }
      // validate the optional field `retain_execution_data`
      if (jsonObj.get("retain_execution_data") != null && !jsonObj.get("retain_execution_data").isJsonNull()) {
        RetainExecutionDataEnum.validateJsonElement(jsonObj.get("retain_execution_data"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMaskingJobParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMaskingJobParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMaskingJobParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMaskingJobParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMaskingJobParameters>() {
           @Override
           public void write(JsonWriter out, UpdateMaskingJobParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMaskingJobParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateMaskingJobParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateMaskingJobParameters
  * @throws IOException if the JSON string is invalid with respect to UpdateMaskingJobParameters
  */
  public static UpdateMaskingJobParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMaskingJobParameters.class);
  }

 /**
  * Convert an instance of UpdateMaskingJobParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

