/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Parameters to read or update SMTP Config
 */
@ApiModel(description = "Parameters to read or update SMTP Config")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T18:53:50.335381+05:30[Asia/Kolkata]")
public class SMTPConfigParams {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_AUTHENTICATION_ENABLED = "authentication_enabled";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ENABLED)
  private Boolean authenticationEnabled;

  public static final String SERIALIZED_NAME_TLS_ENABLED = "tls_enabled";
  @SerializedName(SERIALIZED_NAME_TLS_ENABLED)
  private Boolean tlsEnabled;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "from_address";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_SEND_TIMEOUT = "send_timeout";
  @SerializedName(SERIALIZED_NAME_SEND_TIMEOUT)
  private Integer sendTimeout;


  public SMTPConfigParams enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * True if outbound email is enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if outbound email is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SMTPConfigParams server(String server) {
    
    this.server = server;
    return this;
  }

   /**
   * IP address or hostname of SMTP relay server.
   * @return server
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "smtp.host.com", value = "IP address or hostname of SMTP relay server.")

  public String getServer() {
    return server;
  }


  public void setServer(String server) {
    this.server = server;
  }


  public SMTPConfigParams port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Port number to use. A value of -1 indicates the default (25 or 587 for TLS).
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25", value = "Port number to use. A value of -1 indicates the default (25 or 587 for TLS).")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public SMTPConfigParams authenticationEnabled(Boolean authenticationEnabled) {
    
    this.authenticationEnabled = authenticationEnabled;
    return this;
  }

   /**
   * True if username/password authentication should be used.
   * @return authenticationEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if username/password authentication should be used.")

  public Boolean getAuthenticationEnabled() {
    return authenticationEnabled;
  }


  public void setAuthenticationEnabled(Boolean authenticationEnabled) {
    this.authenticationEnabled = authenticationEnabled;
  }


  public SMTPConfigParams tlsEnabled(Boolean tlsEnabled) {
    
    this.tlsEnabled = tlsEnabled;
    return this;
  }

   /**
   * True if TLS (transport layer security) should be used.
   * @return tlsEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if TLS (transport layer security) should be used.")

  public Boolean getTlsEnabled() {
    return tlsEnabled;
  }


  public void setTlsEnabled(Boolean tlsEnabled) {
    this.tlsEnabled = tlsEnabled;
  }


  public SMTPConfigParams username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * If authentication is enabled, username to use when authenticating to the server.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "If authentication is enabled, username to use when authenticating to the server.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public SMTPConfigParams password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * If authentication is enabled, password to use when authenticating to the server.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "password", value = "If authentication is enabled, password to use when authenticating to the server.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public SMTPConfigParams fromAddress(String fromAddress) {
    
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * From address to use when sending mail. If unspecified, &#39;noreply@delphix.com&#39; is used.
   * @return fromAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sender@example.com", value = "From address to use when sending mail. If unspecified, 'noreply@delphix.com' is used.")

  public String getFromAddress() {
    return fromAddress;
  }


  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public SMTPConfigParams sendTimeout(Integer sendTimeout) {
    
    this.sendTimeout = sendTimeout;
    return this;
  }

   /**
   * Maximum timeout to wait, in seconds, when sending mail.
   * minimum: 0
   * maximum: 300
   * @return sendTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum timeout to wait, in seconds, when sending mail.")

  public Integer getSendTimeout() {
    return sendTimeout;
  }


  public void setSendTimeout(Integer sendTimeout) {
    this.sendTimeout = sendTimeout;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMTPConfigParams smTPConfigParams = (SMTPConfigParams) o;
    return Objects.equals(this.enabled, smTPConfigParams.enabled) &&
        Objects.equals(this.server, smTPConfigParams.server) &&
        Objects.equals(this.port, smTPConfigParams.port) &&
        Objects.equals(this.authenticationEnabled, smTPConfigParams.authenticationEnabled) &&
        Objects.equals(this.tlsEnabled, smTPConfigParams.tlsEnabled) &&
        Objects.equals(this.username, smTPConfigParams.username) &&
        Objects.equals(this.password, smTPConfigParams.password) &&
        Objects.equals(this.fromAddress, smTPConfigParams.fromAddress) &&
        Objects.equals(this.sendTimeout, smTPConfigParams.sendTimeout);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && a.get().getClass().isArray() ? Arrays.equals((T[])a.get(), (T[])b.get()) : Objects.equals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, server, port, authenticationEnabled, tlsEnabled, username, password, fromAddress, sendTimeout);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent()
      ? (a.get().getClass().isArray() ? Arrays.hashCode((T[])a.get()) : Objects.hashCode(a.get()))
      : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMTPConfigParams {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    authenticationEnabled: ").append(toIndentedString(authenticationEnabled)).append("\n");
    sb.append("    tlsEnabled: ").append(toIndentedString(tlsEnabled)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    sendTimeout: ").append(toIndentedString(sendTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

