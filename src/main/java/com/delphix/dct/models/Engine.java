/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;

/**
 * A Delphix Virtualization or Masking Engine.
 */
@ApiModel(description = "A Delphix Virtualization or Masking Engine.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class Engine {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  /**
   * The type of this engine.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VIRTUALIZATION("VIRTUALIZATION"),
    
    MASKING("MASKING"),
    
    BOTH("BOTH"),
    
    UNSET("UNSET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  /**
   * The registration status of this engine.
   */
  @JsonAdapter(RegistrationStatusEnum.Adapter.class)
  public enum RegistrationStatusEnum {
    CONNECTED("CONNECTED"),
    
    PENDING("PENDING");

    private String value;

    RegistrationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationStatusEnum fromValue(String value) {
      for (RegistrationStatusEnum b : RegistrationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegistrationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegistrationStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REGISTRATION_STATUS = "registration_status";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_STATUS)
  private RegistrationStatusEnum registrationStatus;

  /**
   * The connection status of this engine.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    ONLINE("ONLINE"),
    
    OFFLINE("OFFLINE");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  public static final String SERIALIZED_NAME_LAST_CONNECTION_TIME = "last_connection_time";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECTION_TIME)
  private OffsetDateTime lastConnectionTime;

  public static final String SERIALIZED_NAME_BOOT_STORAGE_CAPACITY = "boot_storage_capacity";
  @SerializedName(SERIALIZED_NAME_BOOT_STORAGE_CAPACITY)
  private Long bootStorageCapacity;

  public static final String SERIALIZED_NAME_CPU_CORE_COUNT = "cpu_core_count";
  @SerializedName(SERIALIZED_NAME_CPU_CORE_COUNT)
  private Integer cpuCoreCount;

  public static final String SERIALIZED_NAME_CPU_TYPE = "cpu_type";
  @SerializedName(SERIALIZED_NAME_CPU_TYPE)
  private String cpuType;

  public static final String SERIALIZED_NAME_MEMORY_SIZE = "memory_size";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE)
  private Long memorySize;

  public static final String SERIALIZED_NAME_DATA_STORAGE_CAPACITY = "data_storage_capacity";
  @SerializedName(SERIALIZED_NAME_DATA_STORAGE_CAPACITY)
  private Long dataStorageCapacity;

  public static final String SERIALIZED_NAME_DATA_STORAGE_USED = "data_storage_used";
  @SerializedName(SERIALIZED_NAME_DATA_STORAGE_USED)
  private Long dataStorageUsed;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = null;


  public Engine id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The Engine object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Engine object entity ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Engine uuid(String uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique identifier generated by this engine.
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier generated by this engine.")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public Engine type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of this engine.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of this engine.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Engine version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The engine version.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The engine version.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public Engine name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this engine.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of this engine.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Engine hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname of this engine.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hostname of this engine.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Engine registrationStatus(RegistrationStatusEnum registrationStatus) {
    
    this.registrationStatus = registrationStatus;
    return this;
  }

   /**
   * The registration status of this engine.
   * @return registrationStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The registration status of this engine.")

  public RegistrationStatusEnum getRegistrationStatus() {
    return registrationStatus;
  }


  public void setRegistrationStatus(RegistrationStatusEnum registrationStatus) {
    this.registrationStatus = registrationStatus;
  }


  public Engine connectionStatus(ConnectionStatusEnum connectionStatus) {
    
    this.connectionStatus = connectionStatus;
    return this;
  }

   /**
   * The connection status of this engine.
   * @return connectionStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The connection status of this engine.")

  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }


  public void setConnectionStatus(ConnectionStatusEnum connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public Engine lastConnectionTime(OffsetDateTime lastConnectionTime) {
    
    this.lastConnectionTime = lastConnectionTime;
    return this;
  }

   /**
   * The last time a connection was established with this engine.
   * @return lastConnectionTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last time a connection was established with this engine.")

  public OffsetDateTime getLastConnectionTime() {
    return lastConnectionTime;
  }


  public void setLastConnectionTime(OffsetDateTime lastConnectionTime) {
    this.lastConnectionTime = lastConnectionTime;
  }


  public Engine bootStorageCapacity(Long bootStorageCapacity) {
    
    this.bootStorageCapacity = bootStorageCapacity;
    return this;
  }

   /**
   * The total amount of storage allocated to the engine&#39;s boot partition, in bytes.
   * @return bootStorageCapacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of storage allocated to the engine's boot partition, in bytes.")

  public Long getBootStorageCapacity() {
    return bootStorageCapacity;
  }


  public void setBootStorageCapacity(Long bootStorageCapacity) {
    this.bootStorageCapacity = bootStorageCapacity;
  }


  public Engine cpuCoreCount(Integer cpuCoreCount) {
    
    this.cpuCoreCount = cpuCoreCount;
    return this;
  }

   /**
   * The total number of CPU cores on this engine.
   * @return cpuCoreCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of CPU cores on this engine.")

  public Integer getCpuCoreCount() {
    return cpuCoreCount;
  }


  public void setCpuCoreCount(Integer cpuCoreCount) {
    this.cpuCoreCount = cpuCoreCount;
  }


  public Engine cpuType(String cpuType) {
    
    this.cpuType = cpuType;
    return this;
  }

   /**
   * The model of the processors on this engine.
   * @return cpuType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The model of the processors on this engine.")

  public String getCpuType() {
    return cpuType;
  }


  public void setCpuType(String cpuType) {
    this.cpuType = cpuType;
  }


  public Engine memorySize(Long memorySize) {
    
    this.memorySize = memorySize;
    return this;
  }

   /**
   * The total amount of memory on this engine, in bytes.
   * @return memorySize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of memory on this engine, in bytes.")

  public Long getMemorySize() {
    return memorySize;
  }


  public void setMemorySize(Long memorySize) {
    this.memorySize = memorySize;
  }


  public Engine dataStorageCapacity(Long dataStorageCapacity) {
    
    this.dataStorageCapacity = dataStorageCapacity;
    return this;
  }

   /**
   * The total amount of storage allocated for engine objects and system metadata, in bytes.
   * @return dataStorageCapacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of storage allocated for engine objects and system metadata, in bytes.")

  public Long getDataStorageCapacity() {
    return dataStorageCapacity;
  }


  public void setDataStorageCapacity(Long dataStorageCapacity) {
    this.dataStorageCapacity = dataStorageCapacity;
  }


  public Engine dataStorageUsed(Long dataStorageUsed) {
    
    this.dataStorageUsed = dataStorageUsed;
    return this;
  }

   /**
   * The amount of storage used by engine objects and system metadata, in bytes.
   * @return dataStorageUsed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of storage used by engine objects and system metadata, in bytes.")

  public Long getDataStorageUsed() {
    return dataStorageUsed;
  }


  public void setDataStorageUsed(Long dataStorageUsed) {
    this.dataStorageUsed = dataStorageUsed;
  }


  public Engine tags(List<Tag> tags) {
    
    this.tags = tags;
    return this;
  }

  public Engine addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Engine engine = (Engine) o;
    return Objects.equals(this.id, engine.id) &&
        Objects.equals(this.uuid, engine.uuid) &&
        Objects.equals(this.type, engine.type) &&
        Objects.equals(this.version, engine.version) &&
        Objects.equals(this.name, engine.name) &&
        Objects.equals(this.hostname, engine.hostname) &&
        Objects.equals(this.registrationStatus, engine.registrationStatus) &&
        Objects.equals(this.connectionStatus, engine.connectionStatus) &&
        Objects.equals(this.lastConnectionTime, engine.lastConnectionTime) &&
        Objects.equals(this.bootStorageCapacity, engine.bootStorageCapacity) &&
        Objects.equals(this.cpuCoreCount, engine.cpuCoreCount) &&
        Objects.equals(this.cpuType, engine.cpuType) &&
        Objects.equals(this.memorySize, engine.memorySize) &&
        Objects.equals(this.dataStorageCapacity, engine.dataStorageCapacity) &&
        Objects.equals(this.dataStorageUsed, engine.dataStorageUsed) &&
        Objects.equals(this.tags, engine.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && a.get().getClass().isArray() ? Arrays.equals((T[])a.get(), (T[])b.get()) : Objects.equals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uuid, type, version, name, hostname, registrationStatus, connectionStatus, lastConnectionTime, bootStorageCapacity, cpuCoreCount, cpuType, memorySize, dataStorageCapacity, dataStorageUsed, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent()
      ? (a.get().getClass().isArray() ? Arrays.hashCode((T[])a.get()) : Objects.hashCode(a.get()))
      : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Engine {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    registrationStatus: ").append(toIndentedString(registrationStatus)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    lastConnectionTime: ").append(toIndentedString(lastConnectionTime)).append("\n");
    sb.append("    bootStorageCapacity: ").append(toIndentedString(bootStorageCapacity)).append("\n");
    sb.append("    cpuCoreCount: ").append(toIndentedString(cpuCoreCount)).append("\n");
    sb.append("    cpuType: ").append(toIndentedString(cpuType)).append("\n");
    sb.append("    memorySize: ").append(toIndentedString(memorySize)).append("\n");
    sb.append("    dataStorageCapacity: ").append(toIndentedString(dataStorageCapacity)).append("\n");
    sb.append("    dataStorageUsed: ").append(toIndentedString(dataStorageUsed)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

