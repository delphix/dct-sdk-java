/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.PhoneHomeBundleProductHistory;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Information to identify this Data Control Tower instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class PhoneHomeBundleProductInfo {
  public static final String SERIALIZED_NAME_SYSTEM_UUID = "system_uuid";
  @SerializedName(SERIALIZED_NAME_SYSTEM_UUID)
  private String systemUuid;

  public static final String SERIALIZED_NAME_PRODUCT_VERSION = "product_version";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VERSION)
  private String productVersion;

  public static final String SERIALIZED_NAME_API_VERSION = "api_version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_PRODUCT_UPGRADE_HISTORY = "product_upgrade_history";
  @SerializedName(SERIALIZED_NAME_PRODUCT_UPGRADE_HISTORY)
  private List<PhoneHomeBundleProductHistory> productUpgradeHistory = new ArrayList<>();

  public PhoneHomeBundleProductInfo() {
  }

  public PhoneHomeBundleProductInfo systemUuid(String systemUuid) {
    this.systemUuid = systemUuid;
    return this;
  }

   /**
   * A unique identifier for this Data Control Tower instance.
   * @return systemUuid
  **/
  @javax.annotation.Nonnull
  public String getSystemUuid() {
    return systemUuid;
  }

  public void setSystemUuid(String systemUuid) {
    this.systemUuid = systemUuid;
  }


  public PhoneHomeBundleProductInfo productVersion(String productVersion) {
    this.productVersion = productVersion;
    return this;
  }

   /**
   * The currently running version of this instance of Data Control Tower.
   * @return productVersion
  **/
  @javax.annotation.Nonnull
  public String getProductVersion() {
    return productVersion;
  }

  public void setProductVersion(String productVersion) {
    this.productVersion = productVersion;
  }


  public PhoneHomeBundleProductInfo apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * The API version in use for this instance of Data Control Tower.
   * @return apiVersion
  **/
  @javax.annotation.Nonnull
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public PhoneHomeBundleProductInfo productUpgradeHistory(List<PhoneHomeBundleProductHistory> productUpgradeHistory) {
    this.productUpgradeHistory = productUpgradeHistory;
    return this;
  }

  public PhoneHomeBundleProductInfo addProductUpgradeHistoryItem(PhoneHomeBundleProductHistory productUpgradeHistoryItem) {
    if (this.productUpgradeHistory == null) {
      this.productUpgradeHistory = new ArrayList<>();
    }
    this.productUpgradeHistory.add(productUpgradeHistoryItem);
    return this;
  }

   /**
   * The upgrade history of this instance of Data Control Tower.
   * @return productUpgradeHistory
  **/
  @javax.annotation.Nonnull
  public List<PhoneHomeBundleProductHistory> getProductUpgradeHistory() {
    return productUpgradeHistory;
  }

  public void setProductUpgradeHistory(List<PhoneHomeBundleProductHistory> productUpgradeHistory) {
    this.productUpgradeHistory = productUpgradeHistory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneHomeBundleProductInfo phoneHomeBundleProductInfo = (PhoneHomeBundleProductInfo) o;
    return Objects.equals(this.systemUuid, phoneHomeBundleProductInfo.systemUuid) &&
        Objects.equals(this.productVersion, phoneHomeBundleProductInfo.productVersion) &&
        Objects.equals(this.apiVersion, phoneHomeBundleProductInfo.apiVersion) &&
        Objects.equals(this.productUpgradeHistory, phoneHomeBundleProductInfo.productUpgradeHistory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(systemUuid, productVersion, apiVersion, productUpgradeHistory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneHomeBundleProductInfo {\n");
    sb.append("    systemUuid: ").append(toIndentedString(systemUuid)).append("\n");
    sb.append("    productVersion: ").append(toIndentedString(productVersion)).append("\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    productUpgradeHistory: ").append(toIndentedString(productUpgradeHistory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("system_uuid");
    openapiFields.add("product_version");
    openapiFields.add("api_version");
    openapiFields.add("product_upgrade_history");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("system_uuid");
    openapiRequiredFields.add("product_version");
    openapiRequiredFields.add("api_version");
    openapiRequiredFields.add("product_upgrade_history");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PhoneHomeBundleProductInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneHomeBundleProductInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneHomeBundleProductInfo is not found in the empty JSON string", PhoneHomeBundleProductInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneHomeBundleProductInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneHomeBundleProductInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneHomeBundleProductInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("system_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_uuid").toString()));
      }
      if (!jsonObj.get("product_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_version").toString()));
      }
      if (!jsonObj.get("api_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_version").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("product_upgrade_history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_upgrade_history` to be an array in the JSON string but got `%s`", jsonObj.get("product_upgrade_history").toString()));
      }

      JsonArray jsonArrayproductUpgradeHistory = jsonObj.getAsJsonArray("product_upgrade_history");
      // validate the required field `product_upgrade_history` (array)
      for (int i = 0; i < jsonArrayproductUpgradeHistory.size(); i++) {
        PhoneHomeBundleProductHistory.validateJsonElement(jsonArrayproductUpgradeHistory.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneHomeBundleProductInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneHomeBundleProductInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneHomeBundleProductInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneHomeBundleProductInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneHomeBundleProductInfo>() {
           @Override
           public void write(JsonWriter out, PhoneHomeBundleProductInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneHomeBundleProductInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PhoneHomeBundleProductInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PhoneHomeBundleProductInfo
  * @throws IOException if the JSON string is invalid with respect to PhoneHomeBundleProductInfo
  */
  public static PhoneHomeBundleProductInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneHomeBundleProductInfo.class);
  }

 /**
  * Convert an instance of PhoneHomeBundleProductInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

