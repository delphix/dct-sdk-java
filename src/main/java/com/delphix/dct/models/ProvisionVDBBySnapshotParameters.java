/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.AdditionalMountPoint;
import com.delphix.dct.models.ClusterNodeInstance;
import com.delphix.dct.models.ConfigSettingsStg;
import com.delphix.dct.models.Hook;
import com.delphix.dct.models.OracleRacCustomEnvFile;
import com.delphix.dct.models.OracleRacCustomEnvVar;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * ProvisionVDBBySnapshotParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ProvisionVDBBySnapshotParameters {
  public static final String SERIALIZED_NAME_PRE_REFRESH = "pre_refresh";
  @SerializedName(SERIALIZED_NAME_PRE_REFRESH)
  private List<Hook> preRefresh;

  public static final String SERIALIZED_NAME_POST_REFRESH = "post_refresh";
  @SerializedName(SERIALIZED_NAME_POST_REFRESH)
  private List<Hook> postRefresh;

  public static final String SERIALIZED_NAME_PRE_SELF_REFRESH = "pre_self_refresh";
  @SerializedName(SERIALIZED_NAME_PRE_SELF_REFRESH)
  private List<Hook> preSelfRefresh;

  public static final String SERIALIZED_NAME_POST_SELF_REFRESH = "post_self_refresh";
  @SerializedName(SERIALIZED_NAME_POST_SELF_REFRESH)
  private List<Hook> postSelfRefresh;

  public static final String SERIALIZED_NAME_PRE_ROLLBACK = "pre_rollback";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRE_ROLLBACK)
  private List<Hook> preRollback;

  public static final String SERIALIZED_NAME_POST_ROLLBACK = "post_rollback";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_POST_ROLLBACK)
  private List<Hook> postRollback;

  public static final String SERIALIZED_NAME_CONFIGURE_CLONE = "configure_clone";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_CLONE)
  private List<Hook> configureClone;

  public static final String SERIALIZED_NAME_PRE_SNAPSHOT = "pre_snapshot";
  @SerializedName(SERIALIZED_NAME_PRE_SNAPSHOT)
  private List<Hook> preSnapshot;

  public static final String SERIALIZED_NAME_POST_SNAPSHOT = "post_snapshot";
  @SerializedName(SERIALIZED_NAME_POST_SNAPSHOT)
  private List<Hook> postSnapshot;

  public static final String SERIALIZED_NAME_PRE_START = "pre_start";
  @SerializedName(SERIALIZED_NAME_PRE_START)
  private List<Hook> preStart;

  public static final String SERIALIZED_NAME_POST_START = "post_start";
  @SerializedName(SERIALIZED_NAME_POST_START)
  private List<Hook> postStart;

  public static final String SERIALIZED_NAME_PRE_STOP = "pre_stop";
  @SerializedName(SERIALIZED_NAME_PRE_STOP)
  private List<Hook> preStop;

  public static final String SERIALIZED_NAME_POST_STOP = "post_stop";
  @SerializedName(SERIALIZED_NAME_POST_STOP)
  private List<Hook> postStop;

  public static final String SERIALIZED_NAME_TARGET_GROUP_ID = "target_group_id";
  @SerializedName(SERIALIZED_NAME_TARGET_GROUP_ID)
  private String targetGroupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "database_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_CDB_ID = "cdb_id";
  @SerializedName(SERIALIZED_NAME_CDB_ID)
  private String cdbId;

  public static final String SERIALIZED_NAME_CLUSTER_NODE_IDS = "cluster_node_ids";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NODE_IDS)
  private List<String> clusterNodeIds;

  public static final String SERIALIZED_NAME_CLUSTER_NODE_INSTANCES = "cluster_node_instances";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NODE_INSTANCES)
  private List<ClusterNodeInstance> clusterNodeInstances;

  public static final String SERIALIZED_NAME_TRUNCATE_LOG_ON_CHECKPOINT = "truncate_log_on_checkpoint";
  @SerializedName(SERIALIZED_NAME_TRUNCATE_LOG_ON_CHECKPOINT)
  private Boolean truncateLogOnCheckpoint;

  public static final String SERIALIZED_NAME_OS_USERNAME = "os_username";
  @SerializedName(SERIALIZED_NAME_OS_USERNAME)
  private String osUsername;

  public static final String SERIALIZED_NAME_OS_PASSWORD = "os_password";
  @SerializedName(SERIALIZED_NAME_OS_PASSWORD)
  private String osPassword;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_ENVIRONMENT_USER_ID = "environment_user_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_USER_ID)
  private String environmentUserId;

  public static final String SERIALIZED_NAME_REPOSITORY_ID = "repository_id";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ID)
  private String repositoryId;

  public static final String SERIALIZED_NAME_AUTO_SELECT_REPOSITORY = "auto_select_repository";
  @SerializedName(SERIALIZED_NAME_AUTO_SELECT_REPOSITORY)
  private Boolean autoSelectRepository;

  public static final String SERIALIZED_NAME_VDB_RESTART = "vdb_restart";
  @SerializedName(SERIALIZED_NAME_VDB_RESTART)
  private Boolean vdbRestart;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_AUXILIARY_TEMPLATE_ID = "auxiliary_template_id";
  @SerializedName(SERIALIZED_NAME_AUXILIARY_TEMPLATE_ID)
  private String auxiliaryTemplateId;

  public static final String SERIALIZED_NAME_FILE_MAPPING_RULES = "file_mapping_rules";
  @SerializedName(SERIALIZED_NAME_FILE_MAPPING_RULES)
  private String fileMappingRules;

  public static final String SERIALIZED_NAME_ORACLE_INSTANCE_NAME = "oracle_instance_name";
  @SerializedName(SERIALIZED_NAME_ORACLE_INSTANCE_NAME)
  private String oracleInstanceName;

  public static final String SERIALIZED_NAME_UNIQUE_NAME = "unique_name";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NAME)
  private String uniqueName;

  public static final String SERIALIZED_NAME_VCDB_NAME = "vcdb_name";
  @SerializedName(SERIALIZED_NAME_VCDB_NAME)
  private String vcdbName;

  public static final String SERIALIZED_NAME_VCDB_DATABASE_NAME = "vcdb_database_name";
  @SerializedName(SERIALIZED_NAME_VCDB_DATABASE_NAME)
  private String vcdbDatabaseName;

  public static final String SERIALIZED_NAME_MOUNT_POINT = "mount_point";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT)
  private String mountPoint;

  public static final String SERIALIZED_NAME_OPEN_RESET_LOGS = "open_reset_logs";
  @SerializedName(SERIALIZED_NAME_OPEN_RESET_LOGS)
  private Boolean openResetLogs;

  public static final String SERIALIZED_NAME_SNAPSHOT_POLICY_ID = "snapshot_policy_id";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_POLICY_ID)
  private String snapshotPolicyId;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_ID = "retention_policy_id";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_ID)
  private String retentionPolicyId;

  /**
   * Recovery model of the source database (MSSql Only).
   */
  @JsonAdapter(RecoveryModelEnum.Adapter.class)
  public enum RecoveryModelEnum {
    FULL("FULL"),
    
    SIMPLE("SIMPLE"),
    
    BULK_LOGGED("BULK_LOGGED");

    private String value;

    RecoveryModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecoveryModelEnum fromValue(String value) {
      for (RecoveryModelEnum b : RecoveryModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecoveryModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecoveryModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecoveryModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecoveryModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecoveryModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOVERY_MODEL = "recovery_model";
  @SerializedName(SERIALIZED_NAME_RECOVERY_MODEL)
  private RecoveryModelEnum recoveryModel;

  public static final String SERIALIZED_NAME_PRE_SCRIPT = "pre_script";
  @SerializedName(SERIALIZED_NAME_PRE_SCRIPT)
  private String preScript;

  public static final String SERIALIZED_NAME_POST_SCRIPT = "post_script";
  @SerializedName(SERIALIZED_NAME_POST_SCRIPT)
  private String postScript;

  public static final String SERIALIZED_NAME_CDC_ON_PROVISION = "cdc_on_provision";
  @SerializedName(SERIALIZED_NAME_CDC_ON_PROVISION)
  private Boolean cdcOnProvision;

  public static final String SERIALIZED_NAME_ONLINE_LOG_SIZE = "online_log_size";
  @SerializedName(SERIALIZED_NAME_ONLINE_LOG_SIZE)
  private Integer onlineLogSize;

  public static final String SERIALIZED_NAME_ONLINE_LOG_GROUPS = "online_log_groups";
  @SerializedName(SERIALIZED_NAME_ONLINE_LOG_GROUPS)
  private Integer onlineLogGroups;

  public static final String SERIALIZED_NAME_ARCHIVE_LOG = "archive_log";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_LOG)
  private Boolean archiveLog;

  public static final String SERIALIZED_NAME_NEW_DBID = "new_dbid";
  @SerializedName(SERIALIZED_NAME_NEW_DBID)
  private Boolean newDbid;

  public static final String SERIALIZED_NAME_MASKED = "masked";
  @SerializedName(SERIALIZED_NAME_MASKED)
  private Boolean masked;

  public static final String SERIALIZED_NAME_LISTENER_IDS = "listener_ids";
  @SerializedName(SERIALIZED_NAME_LISTENER_IDS)
  private List<String> listenerIds;

  public static final String SERIALIZED_NAME_CUSTOM_ENV_VARS = "custom_env_vars";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ENV_VARS)
  private Map<String, String> customEnvVars = new HashMap<>();

  public static final String SERIALIZED_NAME_CUSTOM_ENV_FILES = "custom_env_files";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ENV_FILES)
  private List<String> customEnvFiles;

  public static final String SERIALIZED_NAME_ORACLE_RAC_CUSTOM_ENV_FILES = "oracle_rac_custom_env_files";
  @SerializedName(SERIALIZED_NAME_ORACLE_RAC_CUSTOM_ENV_FILES)
  private List<OracleRacCustomEnvFile> oracleRacCustomEnvFiles;

  public static final String SERIALIZED_NAME_ORACLE_RAC_CUSTOM_ENV_VARS = "oracle_rac_custom_env_vars";
  @SerializedName(SERIALIZED_NAME_ORACLE_RAC_CUSTOM_ENV_VARS)
  private List<OracleRacCustomEnvVar> oracleRacCustomEnvVars;

  public static final String SERIALIZED_NAME_PARENT_TDE_KEYSTORE_PATH = "parentTdeKeystorePath";
  @SerializedName(SERIALIZED_NAME_PARENT_TDE_KEYSTORE_PATH)
  private String parentTdeKeystorePath;

  public static final String SERIALIZED_NAME_PARENT_TDE_KEYSTORE_PASSWORD = "parent_tde_keystore_password";
  @SerializedName(SERIALIZED_NAME_PARENT_TDE_KEYSTORE_PASSWORD)
  private String parentTdeKeystorePassword;

  public static final String SERIALIZED_NAME_TDE_EXPORTED_KEY_FILE_SECRET = "tde_exported_key_file_secret";
  @SerializedName(SERIALIZED_NAME_TDE_EXPORTED_KEY_FILE_SECRET)
  private String tdeExportedKeyFileSecret;

  public static final String SERIALIZED_NAME_TDE_KEY_IDENTIFIER = "tde_key_identifier";
  @SerializedName(SERIALIZED_NAME_TDE_KEY_IDENTIFIER)
  private String tdeKeyIdentifier;

  public static final String SERIALIZED_NAME_TARGET_VCDB_TDE_KEYSTORE_PATH = "target_vcdb_tde_keystore_path";
  @SerializedName(SERIALIZED_NAME_TARGET_VCDB_TDE_KEYSTORE_PATH)
  private String targetVcdbTdeKeystorePath;

  public static final String SERIALIZED_NAME_CDB_TDE_KEYSTORE_PASSWORD = "cdb_tde_keystore_password";
  @SerializedName(SERIALIZED_NAME_CDB_TDE_KEYSTORE_PASSWORD)
  private String cdbTdeKeystorePassword;

  public static final String SERIALIZED_NAME_VCDB_TDE_KEY_IDENTIFIER = "vcdb_tde_key_identifier";
  @SerializedName(SERIALIZED_NAME_VCDB_TDE_KEY_IDENTIFIER)
  private String vcdbTdeKeyIdentifier;

  public static final String SERIALIZED_NAME_APPDATA_SOURCE_PARAMS = "appdata_source_params";
  @SerializedName(SERIALIZED_NAME_APPDATA_SOURCE_PARAMS)
  private Map<String, Object> appdataSourceParams = new HashMap<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_MOUNT_POINTS = "additional_mount_points";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MOUNT_POINTS)
  private List<AdditionalMountPoint> additionalMountPoints;

  public static final String SERIALIZED_NAME_APPDATA_CONFIG_PARAMS = "appdata_config_params";
  @SerializedName(SERIALIZED_NAME_APPDATA_CONFIG_PARAMS)
  private Map<String, Object> appdataConfigParams;

  public static final String SERIALIZED_NAME_CONFIG_PARAMS = "config_params";
  @SerializedName(SERIALIZED_NAME_CONFIG_PARAMS)
  private Map<String, Object> configParams;

  public static final String SERIALIZED_NAME_PRIVILEGED_OS_USER = "privileged_os_user";
  @SerializedName(SERIALIZED_NAME_PRIVILEGED_OS_USER)
  private String privilegedOsUser;

  public static final String SERIALIZED_NAME_POSTGRES_PORT = "postgres_port";
  @SerializedName(SERIALIZED_NAME_POSTGRES_PORT)
  private Integer postgresPort;

  public static final String SERIALIZED_NAME_CONFIG_SETTINGS_STG = "config_settings_stg";
  @SerializedName(SERIALIZED_NAME_CONFIG_SETTINGS_STG)
  private List<ConfigSettingsStg> configSettingsStg;

  public static final String SERIALIZED_NAME_VCDB_RESTART = "vcdb_restart";
  @SerializedName(SERIALIZED_NAME_VCDB_RESTART)
  private Boolean vcdbRestart;

  public static final String SERIALIZED_NAME_MSSQL_FAILOVER_DRIVE_LETTER = "mssql_failover_drive_letter";
  @SerializedName(SERIALIZED_NAME_MSSQL_FAILOVER_DRIVE_LETTER)
  private String mssqlFailoverDriveLetter;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshot_id";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private String snapshotId;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_SOURCE_DATA_ID = "source_data_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_ID)
  private String sourceDataId;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public ProvisionVDBBySnapshotParameters() {
  }

  public ProvisionVDBBySnapshotParameters preRefresh(List<Hook> preRefresh) {
    this.preRefresh = preRefresh;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreRefreshItem(Hook preRefreshItem) {
    if (this.preRefresh == null) {
      this.preRefresh = new ArrayList<>();
    }
    this.preRefresh.add(preRefreshItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before refreshing the VDB.
   * @return preRefresh
  **/
  @javax.annotation.Nullable
  public List<Hook> getPreRefresh() {
    return preRefresh;
  }

  public void setPreRefresh(List<Hook> preRefresh) {
    this.preRefresh = preRefresh;
  }


  public ProvisionVDBBySnapshotParameters postRefresh(List<Hook> postRefresh) {
    this.postRefresh = postRefresh;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostRefreshItem(Hook postRefreshItem) {
    if (this.postRefresh == null) {
      this.postRefresh = new ArrayList<>();
    }
    this.postRefresh.add(postRefreshItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after refreshing the VDB.
   * @return postRefresh
  **/
  @javax.annotation.Nullable
  public List<Hook> getPostRefresh() {
    return postRefresh;
  }

  public void setPostRefresh(List<Hook> postRefresh) {
    this.postRefresh = postRefresh;
  }


  public ProvisionVDBBySnapshotParameters preSelfRefresh(List<Hook> preSelfRefresh) {
    this.preSelfRefresh = preSelfRefresh;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreSelfRefreshItem(Hook preSelfRefreshItem) {
    if (this.preSelfRefresh == null) {
      this.preSelfRefresh = new ArrayList<>();
    }
    this.preSelfRefresh.add(preSelfRefreshItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before refreshing the VDB with data from itself.
   * @return preSelfRefresh
  **/
  @javax.annotation.Nullable
  public List<Hook> getPreSelfRefresh() {
    return preSelfRefresh;
  }

  public void setPreSelfRefresh(List<Hook> preSelfRefresh) {
    this.preSelfRefresh = preSelfRefresh;
  }


  public ProvisionVDBBySnapshotParameters postSelfRefresh(List<Hook> postSelfRefresh) {
    this.postSelfRefresh = postSelfRefresh;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostSelfRefreshItem(Hook postSelfRefreshItem) {
    if (this.postSelfRefresh == null) {
      this.postSelfRefresh = new ArrayList<>();
    }
    this.postSelfRefresh.add(postSelfRefreshItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after refreshing the VDB with data from itself.
   * @return postSelfRefresh
  **/
  @javax.annotation.Nullable
  public List<Hook> getPostSelfRefresh() {
    return postSelfRefresh;
  }

  public void setPostSelfRefresh(List<Hook> postSelfRefresh) {
    this.postSelfRefresh = postSelfRefresh;
  }


  @Deprecated
  public ProvisionVDBBySnapshotParameters preRollback(List<Hook> preRollback) {
    this.preRollback = preRollback;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreRollbackItem(Hook preRollbackItem) {
    if (this.preRollback == null) {
      this.preRollback = new ArrayList<>();
    }
    this.preRollback.add(preRollbackItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before rewinding the VDB.
   * @return preRollback
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<Hook> getPreRollback() {
    return preRollback;
  }

  @Deprecated
  public void setPreRollback(List<Hook> preRollback) {
    this.preRollback = preRollback;
  }


  @Deprecated
  public ProvisionVDBBySnapshotParameters postRollback(List<Hook> postRollback) {
    this.postRollback = postRollback;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostRollbackItem(Hook postRollbackItem) {
    if (this.postRollback == null) {
      this.postRollback = new ArrayList<>();
    }
    this.postRollback.add(postRollbackItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after rewinding the VDB.
   * @return postRollback
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<Hook> getPostRollback() {
    return postRollback;
  }

  @Deprecated
  public void setPostRollback(List<Hook> postRollback) {
    this.postRollback = postRollback;
  }


  public ProvisionVDBBySnapshotParameters configureClone(List<Hook> configureClone) {
    this.configureClone = configureClone;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addConfigureCloneItem(Hook configureCloneItem) {
    if (this.configureClone == null) {
      this.configureClone = new ArrayList<>();
    }
    this.configureClone.add(configureCloneItem);
    return this;
  }

   /**
   * The commands to execute on the target environment when the VDB is created or refreshed.
   * @return configureClone
  **/
  @javax.annotation.Nullable
  public List<Hook> getConfigureClone() {
    return configureClone;
  }

  public void setConfigureClone(List<Hook> configureClone) {
    this.configureClone = configureClone;
  }


  public ProvisionVDBBySnapshotParameters preSnapshot(List<Hook> preSnapshot) {
    this.preSnapshot = preSnapshot;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreSnapshotItem(Hook preSnapshotItem) {
    if (this.preSnapshot == null) {
      this.preSnapshot = new ArrayList<>();
    }
    this.preSnapshot.add(preSnapshotItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before snapshotting a virtual source. These commands can quiesce any data prior to snapshotting.
   * @return preSnapshot
  **/
  @javax.annotation.Nullable
  public List<Hook> getPreSnapshot() {
    return preSnapshot;
  }

  public void setPreSnapshot(List<Hook> preSnapshot) {
    this.preSnapshot = preSnapshot;
  }


  public ProvisionVDBBySnapshotParameters postSnapshot(List<Hook> postSnapshot) {
    this.postSnapshot = postSnapshot;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostSnapshotItem(Hook postSnapshotItem) {
    if (this.postSnapshot == null) {
      this.postSnapshot = new ArrayList<>();
    }
    this.postSnapshot.add(postSnapshotItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after snapshotting a virtual source.
   * @return postSnapshot
  **/
  @javax.annotation.Nullable
  public List<Hook> getPostSnapshot() {
    return postSnapshot;
  }

  public void setPostSnapshot(List<Hook> postSnapshot) {
    this.postSnapshot = postSnapshot;
  }


  public ProvisionVDBBySnapshotParameters preStart(List<Hook> preStart) {
    this.preStart = preStart;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreStartItem(Hook preStartItem) {
    if (this.preStart == null) {
      this.preStart = new ArrayList<>();
    }
    this.preStart.add(preStartItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before starting a virtual source.
   * @return preStart
  **/
  @javax.annotation.Nullable
  public List<Hook> getPreStart() {
    return preStart;
  }

  public void setPreStart(List<Hook> preStart) {
    this.preStart = preStart;
  }


  public ProvisionVDBBySnapshotParameters postStart(List<Hook> postStart) {
    this.postStart = postStart;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostStartItem(Hook postStartItem) {
    if (this.postStart == null) {
      this.postStart = new ArrayList<>();
    }
    this.postStart.add(postStartItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after starting a virtual source.
   * @return postStart
  **/
  @javax.annotation.Nullable
  public List<Hook> getPostStart() {
    return postStart;
  }

  public void setPostStart(List<Hook> postStart) {
    this.postStart = postStart;
  }


  public ProvisionVDBBySnapshotParameters preStop(List<Hook> preStop) {
    this.preStop = preStop;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPreStopItem(Hook preStopItem) {
    if (this.preStop == null) {
      this.preStop = new ArrayList<>();
    }
    this.preStop.add(preStopItem);
    return this;
  }

   /**
   * The commands to execute on the target environment before stopping a virtual source.
   * @return preStop
  **/
  @javax.annotation.Nullable
  public List<Hook> getPreStop() {
    return preStop;
  }

  public void setPreStop(List<Hook> preStop) {
    this.preStop = preStop;
  }


  public ProvisionVDBBySnapshotParameters postStop(List<Hook> postStop) {
    this.postStop = postStop;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addPostStopItem(Hook postStopItem) {
    if (this.postStop == null) {
      this.postStop = new ArrayList<>();
    }
    this.postStop.add(postStopItem);
    return this;
  }

   /**
   * The commands to execute on the target environment after stopping a virtual source.
   * @return postStop
  **/
  @javax.annotation.Nullable
  public List<Hook> getPostStop() {
    return postStop;
  }

  public void setPostStop(List<Hook> postStop) {
    this.postStop = postStop;
  }


  public ProvisionVDBBySnapshotParameters targetGroupId(String targetGroupId) {
    this.targetGroupId = targetGroupId;
    return this;
  }

   /**
   * The ID of the group into which the VDB will be provisioned. If unset, a group is selected randomly on the Engine.
   * @return targetGroupId
  **/
  @javax.annotation.Nullable
  public String getTargetGroupId() {
    return targetGroupId;
  }

  public void setTargetGroupId(String targetGroupId) {
    this.targetGroupId = targetGroupId;
  }


  public ProvisionVDBBySnapshotParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The unique name of the provisioned VDB within a group. If unset, a name is randomly generated.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProvisionVDBBySnapshotParameters databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * The name of the database on the target environment. Defaults to the value of the name property.
   * @return databaseName
  **/
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public ProvisionVDBBySnapshotParameters cdbId(String cdbId) {
    this.cdbId = cdbId;
    return this;
  }

   /**
   * The ID of the container database (CDB) to provision an Oracle Multitenant database into. This corresponds to a CDB or VCDB API object. When this is not set, a new vCDB will be provisioned.
   * @return cdbId
  **/
  @javax.annotation.Nullable
  public String getCdbId() {
    return cdbId;
  }

  public void setCdbId(String cdbId) {
    this.cdbId = cdbId;
  }


  public ProvisionVDBBySnapshotParameters clusterNodeIds(List<String> clusterNodeIds) {
    this.clusterNodeIds = clusterNodeIds;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addClusterNodeIdsItem(String clusterNodeIdsItem) {
    if (this.clusterNodeIds == null) {
      this.clusterNodeIds = new ArrayList<>();
    }
    this.clusterNodeIds.add(clusterNodeIdsItem);
    return this;
  }

   /**
   * The cluster node ids, name or addresses for this provision operation (Oracle RAC Only).
   * @return clusterNodeIds
  **/
  @javax.annotation.Nullable
  public List<String> getClusterNodeIds() {
    return clusterNodeIds;
  }

  public void setClusterNodeIds(List<String> clusterNodeIds) {
    this.clusterNodeIds = clusterNodeIds;
  }


  public ProvisionVDBBySnapshotParameters clusterNodeInstances(List<ClusterNodeInstance> clusterNodeInstances) {
    this.clusterNodeInstances = clusterNodeInstances;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addClusterNodeInstancesItem(ClusterNodeInstance clusterNodeInstancesItem) {
    if (this.clusterNodeInstances == null) {
      this.clusterNodeInstances = new ArrayList<>();
    }
    this.clusterNodeInstances.add(clusterNodeInstancesItem);
    return this;
  }

   /**
   * The cluster node instances details for this provision operation(Oracle RAC Only).This property is mutually exclusive with cluster_node_ids.
   * @return clusterNodeInstances
  **/
  @javax.annotation.Nullable
  public List<ClusterNodeInstance> getClusterNodeInstances() {
    return clusterNodeInstances;
  }

  public void setClusterNodeInstances(List<ClusterNodeInstance> clusterNodeInstances) {
    this.clusterNodeInstances = clusterNodeInstances;
  }


  public ProvisionVDBBySnapshotParameters truncateLogOnCheckpoint(Boolean truncateLogOnCheckpoint) {
    this.truncateLogOnCheckpoint = truncateLogOnCheckpoint;
    return this;
  }

   /**
   * Whether to truncate log on checkpoint (ASE only).
   * @return truncateLogOnCheckpoint
  **/
  @javax.annotation.Nullable
  public Boolean getTruncateLogOnCheckpoint() {
    return truncateLogOnCheckpoint;
  }

  public void setTruncateLogOnCheckpoint(Boolean truncateLogOnCheckpoint) {
    this.truncateLogOnCheckpoint = truncateLogOnCheckpoint;
  }


  public ProvisionVDBBySnapshotParameters osUsername(String osUsername) {
    this.osUsername = osUsername;
    return this;
  }

   /**
   * The name of the privileged user to run the provision operation (Oracle Only).
   * @return osUsername
  **/
  @javax.annotation.Nullable
  public String getOsUsername() {
    return osUsername;
  }

  public void setOsUsername(String osUsername) {
    this.osUsername = osUsername;
  }


  public ProvisionVDBBySnapshotParameters osPassword(String osPassword) {
    this.osPassword = osPassword;
    return this;
  }

   /**
   * The password of the privileged user to run the provision operation (Oracle Only).
   * @return osPassword
  **/
  @javax.annotation.Nullable
  public String getOsPassword() {
    return osPassword;
  }

  public void setOsPassword(String osPassword) {
    this.osPassword = osPassword;
  }


  public ProvisionVDBBySnapshotParameters environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * The ID of the target environment where to provision the VDB. If repository_id unambigously identifies a repository, this is unnecessary and ignored. Otherwise, a compatible repository is randomly selected on the environment.
   * @return environmentId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public ProvisionVDBBySnapshotParameters environmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
    return this;
  }

   /**
   * The environment user ID to use to connect to the target environment.
   * @return environmentUserId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentUserId() {
    return environmentUserId;
  }

  public void setEnvironmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
  }


  public ProvisionVDBBySnapshotParameters repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * The ID of the target repository where to provision the VDB. A repository typically corresponds to a database installation (Oracle home, database instance, ...). Setting this attribute implicitly determines the environment where to provision the VDB.
   * @return repositoryId
  **/
  @javax.annotation.Nullable
  public String getRepositoryId() {
    return repositoryId;
  }

  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }


  public ProvisionVDBBySnapshotParameters autoSelectRepository(Boolean autoSelectRepository) {
    this.autoSelectRepository = autoSelectRepository;
    return this;
  }

   /**
   * Option to automatically select a compatible environment and repository. Mutually exclusive with repository_id.
   * @return autoSelectRepository
  **/
  @javax.annotation.Nullable
  public Boolean getAutoSelectRepository() {
    return autoSelectRepository;
  }

  public void setAutoSelectRepository(Boolean autoSelectRepository) {
    this.autoSelectRepository = autoSelectRepository;
  }


  public ProvisionVDBBySnapshotParameters vdbRestart(Boolean vdbRestart) {
    this.vdbRestart = vdbRestart;
    return this;
  }

   /**
   * Indicates whether the Engine should automatically restart this virtual source when target host reboot is detected.
   * @return vdbRestart
  **/
  @javax.annotation.Nullable
  public Boolean getVdbRestart() {
    return vdbRestart;
  }

  public void setVdbRestart(Boolean vdbRestart) {
    this.vdbRestart = vdbRestart;
  }


  public ProvisionVDBBySnapshotParameters templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * The ID of the target VDB Template (Oracle Only).
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public ProvisionVDBBySnapshotParameters auxiliaryTemplateId(String auxiliaryTemplateId) {
    this.auxiliaryTemplateId = auxiliaryTemplateId;
    return this;
  }

   /**
   * The ID of the configuration template to apply to the auxiliary container database. This is only relevant when provisioning a Multitenant pluggable database into an existing CDB, i.e when the cdb_id property is set.(Oracle Only)
   * @return auxiliaryTemplateId
  **/
  @javax.annotation.Nullable
  public String getAuxiliaryTemplateId() {
    return auxiliaryTemplateId;
  }

  public void setAuxiliaryTemplateId(String auxiliaryTemplateId) {
    this.auxiliaryTemplateId = auxiliaryTemplateId;
  }


  public ProvisionVDBBySnapshotParameters fileMappingRules(String fileMappingRules) {
    this.fileMappingRules = fileMappingRules;
    return this;
  }

   /**
   * Target VDB file mapping rules (Oracle Only). Rules must be line separated (\\n or \\r) and each line must have the format \&quot;pattern:replacement\&quot;. Lines are applied in order.
   * @return fileMappingRules
  **/
  @javax.annotation.Nullable
  public String getFileMappingRules() {
    return fileMappingRules;
  }

  public void setFileMappingRules(String fileMappingRules) {
    this.fileMappingRules = fileMappingRules;
  }


  public ProvisionVDBBySnapshotParameters oracleInstanceName(String oracleInstanceName) {
    this.oracleInstanceName = oracleInstanceName;
    return this;
  }

   /**
   * Target VDB SID name (Oracle Only).
   * @return oracleInstanceName
  **/
  @javax.annotation.Nullable
  public String getOracleInstanceName() {
    return oracleInstanceName;
  }

  public void setOracleInstanceName(String oracleInstanceName) {
    this.oracleInstanceName = oracleInstanceName;
  }


  public ProvisionVDBBySnapshotParameters uniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
    return this;
  }

   /**
   * Target VDB db_unique_name (Oracle Only).
   * @return uniqueName
  **/
  @javax.annotation.Nullable
  public String getUniqueName() {
    return uniqueName;
  }

  public void setUniqueName(String uniqueName) {
    this.uniqueName = uniqueName;
  }


  public ProvisionVDBBySnapshotParameters vcdbName(String vcdbName) {
    this.vcdbName = vcdbName;
    return this;
  }

   /**
   * When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the name of the provisioned vCDB (Oracle Multitenant Only).
   * @return vcdbName
  **/
  @javax.annotation.Nullable
  public String getVcdbName() {
    return vcdbName;
  }

  public void setVcdbName(String vcdbName) {
    this.vcdbName = vcdbName;
  }


  public ProvisionVDBBySnapshotParameters vcdbDatabaseName(String vcdbDatabaseName) {
    this.vcdbDatabaseName = vcdbDatabaseName;
    return this;
  }

   /**
   * When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the database name of the provisioned vCDB. Defaults to the value of the vcdb_name property. (Oracle Multitenant Only).
   * @return vcdbDatabaseName
  **/
  @javax.annotation.Nullable
  public String getVcdbDatabaseName() {
    return vcdbDatabaseName;
  }

  public void setVcdbDatabaseName(String vcdbDatabaseName) {
    this.vcdbDatabaseName = vcdbDatabaseName;
  }


  public ProvisionVDBBySnapshotParameters mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * Mount point for the VDB (Oracle, ASE, AppData).
   * @return mountPoint
  **/
  @javax.annotation.Nullable
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }


  public ProvisionVDBBySnapshotParameters openResetLogs(Boolean openResetLogs) {
    this.openResetLogs = openResetLogs;
    return this;
  }

   /**
   * Whether to open the database after provision (Oracle Only).
   * @return openResetLogs
  **/
  @javax.annotation.Nullable
  public Boolean getOpenResetLogs() {
    return openResetLogs;
  }

  public void setOpenResetLogs(Boolean openResetLogs) {
    this.openResetLogs = openResetLogs;
  }


  public ProvisionVDBBySnapshotParameters snapshotPolicyId(String snapshotPolicyId) {
    this.snapshotPolicyId = snapshotPolicyId;
    return this;
  }

   /**
   * The ID of the snapshot policy for the VDB.
   * @return snapshotPolicyId
  **/
  @javax.annotation.Nullable
  public String getSnapshotPolicyId() {
    return snapshotPolicyId;
  }

  public void setSnapshotPolicyId(String snapshotPolicyId) {
    this.snapshotPolicyId = snapshotPolicyId;
  }


  public ProvisionVDBBySnapshotParameters retentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
    return this;
  }

   /**
   * The ID of the retention policy for the VDB.
   * @return retentionPolicyId
  **/
  @javax.annotation.Nullable
  public String getRetentionPolicyId() {
    return retentionPolicyId;
  }

  public void setRetentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
  }


  public ProvisionVDBBySnapshotParameters recoveryModel(RecoveryModelEnum recoveryModel) {
    this.recoveryModel = recoveryModel;
    return this;
  }

   /**
   * Recovery model of the source database (MSSql Only).
   * @return recoveryModel
  **/
  @javax.annotation.Nullable
  public RecoveryModelEnum getRecoveryModel() {
    return recoveryModel;
  }

  public void setRecoveryModel(RecoveryModelEnum recoveryModel) {
    this.recoveryModel = recoveryModel;
  }


  public ProvisionVDBBySnapshotParameters preScript(String preScript) {
    this.preScript = preScript;
    return this;
  }

   /**
   * PowerShell script or executable to run prior to provisioning (MSSql Only).
   * @return preScript
  **/
  @javax.annotation.Nullable
  public String getPreScript() {
    return preScript;
  }

  public void setPreScript(String preScript) {
    this.preScript = preScript;
  }


  public ProvisionVDBBySnapshotParameters postScript(String postScript) {
    this.postScript = postScript;
    return this;
  }

   /**
   * PowerShell script or executable to run after provisioning (MSSql Only).
   * @return postScript
  **/
  @javax.annotation.Nullable
  public String getPostScript() {
    return postScript;
  }

  public void setPostScript(String postScript) {
    this.postScript = postScript;
  }


  public ProvisionVDBBySnapshotParameters cdcOnProvision(Boolean cdcOnProvision) {
    this.cdcOnProvision = cdcOnProvision;
    return this;
  }

   /**
   * Option to enable change data capture (CDC) on both the provisioned VDB and subsequent snapshot-related operations (e.g. refresh, rewind) (MSSql Only).
   * @return cdcOnProvision
  **/
  @javax.annotation.Nullable
  public Boolean getCdcOnProvision() {
    return cdcOnProvision;
  }

  public void setCdcOnProvision(Boolean cdcOnProvision) {
    this.cdcOnProvision = cdcOnProvision;
  }


  public ProvisionVDBBySnapshotParameters onlineLogSize(Integer onlineLogSize) {
    this.onlineLogSize = onlineLogSize;
    return this;
  }

   /**
   * Online log size in MB (Oracle Only).
   * minimum: 4
   * @return onlineLogSize
  **/
  @javax.annotation.Nullable
  public Integer getOnlineLogSize() {
    return onlineLogSize;
  }

  public void setOnlineLogSize(Integer onlineLogSize) {
    this.onlineLogSize = onlineLogSize;
  }


  public ProvisionVDBBySnapshotParameters onlineLogGroups(Integer onlineLogGroups) {
    this.onlineLogGroups = onlineLogGroups;
    return this;
  }

   /**
   * Number of online log groups (Oracle Only).
   * minimum: 2
   * @return onlineLogGroups
  **/
  @javax.annotation.Nullable
  public Integer getOnlineLogGroups() {
    return onlineLogGroups;
  }

  public void setOnlineLogGroups(Integer onlineLogGroups) {
    this.onlineLogGroups = onlineLogGroups;
  }


  public ProvisionVDBBySnapshotParameters archiveLog(Boolean archiveLog) {
    this.archiveLog = archiveLog;
    return this;
  }

   /**
   * Option to create a VDB in archivelog mode (Oracle Only).
   * @return archiveLog
  **/
  @javax.annotation.Nullable
  public Boolean getArchiveLog() {
    return archiveLog;
  }

  public void setArchiveLog(Boolean archiveLog) {
    this.archiveLog = archiveLog;
  }


  public ProvisionVDBBySnapshotParameters newDbid(Boolean newDbid) {
    this.newDbid = newDbid;
    return this;
  }

   /**
   * Option to generate a new DB ID for the created VDB (Oracle Only).
   * @return newDbid
  **/
  @javax.annotation.Nullable
  public Boolean getNewDbid() {
    return newDbid;
  }

  public void setNewDbid(Boolean newDbid) {
    this.newDbid = newDbid;
  }


  public ProvisionVDBBySnapshotParameters masked(Boolean masked) {
    this.masked = masked;
    return this;
  }

   /**
   * Indicates whether to mark this VDB as a masked VDB.
   * @return masked
  **/
  @javax.annotation.Nullable
  public Boolean getMasked() {
    return masked;
  }

  public void setMasked(Boolean masked) {
    this.masked = masked;
  }


  public ProvisionVDBBySnapshotParameters listenerIds(List<String> listenerIds) {
    this.listenerIds = listenerIds;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addListenerIdsItem(String listenerIdsItem) {
    if (this.listenerIds == null) {
      this.listenerIds = new ArrayList<>();
    }
    this.listenerIds.add(listenerIdsItem);
    return this;
  }

   /**
   * The listener IDs for this provision operation (Oracle Only).
   * @return listenerIds
  **/
  @javax.annotation.Nullable
  public List<String> getListenerIds() {
    return listenerIds;
  }

  public void setListenerIds(List<String> listenerIds) {
    this.listenerIds = listenerIds;
  }


  public ProvisionVDBBySnapshotParameters customEnvVars(Map<String, String> customEnvVars) {
    this.customEnvVars = customEnvVars;
    return this;
  }

  public ProvisionVDBBySnapshotParameters putCustomEnvVarsItem(String key, String customEnvVarsItem) {
    if (this.customEnvVars == null) {
      this.customEnvVars = new HashMap<>();
    }
    this.customEnvVars.put(key, customEnvVarsItem);
    return this;
  }

   /**
   * Environment variable to be set when the engine creates a VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
   * @return customEnvVars
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCustomEnvVars() {
    return customEnvVars;
  }

  public void setCustomEnvVars(Map<String, String> customEnvVars) {
    this.customEnvVars = customEnvVars;
  }


  public ProvisionVDBBySnapshotParameters customEnvFiles(List<String> customEnvFiles) {
    this.customEnvFiles = customEnvFiles;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addCustomEnvFilesItem(String customEnvFilesItem) {
    if (this.customEnvFiles == null) {
      this.customEnvFiles = new ArrayList<>();
    }
    this.customEnvFiles.add(customEnvFilesItem);
    return this;
  }

   /**
   * Environment files to be sourced when the Engine creates a VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
   * @return customEnvFiles
  **/
  @javax.annotation.Nullable
  public List<String> getCustomEnvFiles() {
    return customEnvFiles;
  }

  public void setCustomEnvFiles(List<String> customEnvFiles) {
    this.customEnvFiles = customEnvFiles;
  }


  public ProvisionVDBBySnapshotParameters oracleRacCustomEnvFiles(List<OracleRacCustomEnvFile> oracleRacCustomEnvFiles) {
    this.oracleRacCustomEnvFiles = oracleRacCustomEnvFiles;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addOracleRacCustomEnvFilesItem(OracleRacCustomEnvFile oracleRacCustomEnvFilesItem) {
    if (this.oracleRacCustomEnvFiles == null) {
      this.oracleRacCustomEnvFiles = new ArrayList<>();
    }
    this.oracleRacCustomEnvFiles.add(oracleRacCustomEnvFilesItem);
    return this;
  }

   /**
   * Environment files to be sourced when the Engine creates an Oracle RAC VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
   * @return oracleRacCustomEnvFiles
  **/
  @javax.annotation.Nullable
  public List<OracleRacCustomEnvFile> getOracleRacCustomEnvFiles() {
    return oracleRacCustomEnvFiles;
  }

  public void setOracleRacCustomEnvFiles(List<OracleRacCustomEnvFile> oracleRacCustomEnvFiles) {
    this.oracleRacCustomEnvFiles = oracleRacCustomEnvFiles;
  }


  public ProvisionVDBBySnapshotParameters oracleRacCustomEnvVars(List<OracleRacCustomEnvVar> oracleRacCustomEnvVars) {
    this.oracleRacCustomEnvVars = oracleRacCustomEnvVars;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addOracleRacCustomEnvVarsItem(OracleRacCustomEnvVar oracleRacCustomEnvVarsItem) {
    if (this.oracleRacCustomEnvVars == null) {
      this.oracleRacCustomEnvVars = new ArrayList<>();
    }
    this.oracleRacCustomEnvVars.add(oracleRacCustomEnvVarsItem);
    return this;
  }

   /**
   * Environment variable to be set when the engine creates an Oracle RAC VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
   * @return oracleRacCustomEnvVars
  **/
  @javax.annotation.Nullable
  public List<OracleRacCustomEnvVar> getOracleRacCustomEnvVars() {
    return oracleRacCustomEnvVars;
  }

  public void setOracleRacCustomEnvVars(List<OracleRacCustomEnvVar> oracleRacCustomEnvVars) {
    this.oracleRacCustomEnvVars = oracleRacCustomEnvVars;
  }


  public ProvisionVDBBySnapshotParameters parentTdeKeystorePath(String parentTdeKeystorePath) {
    this.parentTdeKeystorePath = parentTdeKeystorePath;
    return this;
  }

   /**
   * Path to a copy of the parent&#39;s Oracle transparent data encryption keystore on the target host. Required to provision from snapshots containing encrypted database files. (Oracle Multitenant Only)
   * @return parentTdeKeystorePath
  **/
  @javax.annotation.Nullable
  public String getParentTdeKeystorePath() {
    return parentTdeKeystorePath;
  }

  public void setParentTdeKeystorePath(String parentTdeKeystorePath) {
    this.parentTdeKeystorePath = parentTdeKeystorePath;
  }


  public ProvisionVDBBySnapshotParameters parentTdeKeystorePassword(String parentTdeKeystorePassword) {
    this.parentTdeKeystorePassword = parentTdeKeystorePassword;
    return this;
  }

   /**
   * The password of the keystore specified in parentTdeKeystorePath. (Oracle Multitenant Only)
   * @return parentTdeKeystorePassword
  **/
  @javax.annotation.Nullable
  public String getParentTdeKeystorePassword() {
    return parentTdeKeystorePassword;
  }

  public void setParentTdeKeystorePassword(String parentTdeKeystorePassword) {
    this.parentTdeKeystorePassword = parentTdeKeystorePassword;
  }


  public ProvisionVDBBySnapshotParameters tdeExportedKeyFileSecret(String tdeExportedKeyFileSecret) {
    this.tdeExportedKeyFileSecret = tdeExportedKeyFileSecret;
    return this;
  }

   /**
   * Secret to be used while exporting and importing vPDB encryption keys if Transparent Data Encryption is enabled on the vPDB. (Oracle Multitenant Only)
   * @return tdeExportedKeyFileSecret
  **/
  @javax.annotation.Nullable
  public String getTdeExportedKeyFileSecret() {
    return tdeExportedKeyFileSecret;
  }

  public void setTdeExportedKeyFileSecret(String tdeExportedKeyFileSecret) {
    this.tdeExportedKeyFileSecret = tdeExportedKeyFileSecret;
  }


  public ProvisionVDBBySnapshotParameters tdeKeyIdentifier(String tdeKeyIdentifier) {
    this.tdeKeyIdentifier = tdeKeyIdentifier;
    return this;
  }

   /**
   * ID of the key created by Delphix. (Oracle Multitenant Only)
   * @return tdeKeyIdentifier
  **/
  @javax.annotation.Nullable
  public String getTdeKeyIdentifier() {
    return tdeKeyIdentifier;
  }

  public void setTdeKeyIdentifier(String tdeKeyIdentifier) {
    this.tdeKeyIdentifier = tdeKeyIdentifier;
  }


  public ProvisionVDBBySnapshotParameters targetVcdbTdeKeystorePath(String targetVcdbTdeKeystorePath) {
    this.targetVcdbTdeKeystorePath = targetVcdbTdeKeystorePath;
    return this;
  }

   /**
   * Path to the keystore of the target vCDB. (Oracle Multitenant Only)
   * @return targetVcdbTdeKeystorePath
  **/
  @javax.annotation.Nullable
  public String getTargetVcdbTdeKeystorePath() {
    return targetVcdbTdeKeystorePath;
  }

  public void setTargetVcdbTdeKeystorePath(String targetVcdbTdeKeystorePath) {
    this.targetVcdbTdeKeystorePath = targetVcdbTdeKeystorePath;
  }


  public ProvisionVDBBySnapshotParameters cdbTdeKeystorePassword(String cdbTdeKeystorePassword) {
    this.cdbTdeKeystorePassword = cdbTdeKeystorePassword;
    return this;
  }

   /**
   * The password for the Transparent Data Encryption keystore associated with the CDB. (Oracle Multitenant Only)
   * @return cdbTdeKeystorePassword
  **/
  @javax.annotation.Nullable
  public String getCdbTdeKeystorePassword() {
    return cdbTdeKeystorePassword;
  }

  public void setCdbTdeKeystorePassword(String cdbTdeKeystorePassword) {
    this.cdbTdeKeystorePassword = cdbTdeKeystorePassword;
  }


  public ProvisionVDBBySnapshotParameters vcdbTdeKeyIdentifier(String vcdbTdeKeyIdentifier) {
    this.vcdbTdeKeyIdentifier = vcdbTdeKeyIdentifier;
    return this;
  }

   /**
   * ID of the key created by Delphix. (Oracle Multitenant Only)
   * @return vcdbTdeKeyIdentifier
  **/
  @javax.annotation.Nullable
  public String getVcdbTdeKeyIdentifier() {
    return vcdbTdeKeyIdentifier;
  }

  public void setVcdbTdeKeyIdentifier(String vcdbTdeKeyIdentifier) {
    this.vcdbTdeKeyIdentifier = vcdbTdeKeyIdentifier;
  }


  public ProvisionVDBBySnapshotParameters appdataSourceParams(Map<String, Object> appdataSourceParams) {
    this.appdataSourceParams = appdataSourceParams;
    return this;
  }

  public ProvisionVDBBySnapshotParameters putAppdataSourceParamsItem(String key, Object appdataSourceParamsItem) {
    if (this.appdataSourceParams == null) {
      this.appdataSourceParams = new HashMap<>();
    }
    this.appdataSourceParams.put(key, appdataSourceParamsItem);
    return this;
  }

   /**
   * The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.
   * @return appdataSourceParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getAppdataSourceParams() {
    return appdataSourceParams;
  }

  public void setAppdataSourceParams(Map<String, Object> appdataSourceParams) {
    this.appdataSourceParams = appdataSourceParams;
  }


  public ProvisionVDBBySnapshotParameters additionalMountPoints(List<AdditionalMountPoint> additionalMountPoints) {
    this.additionalMountPoints = additionalMountPoints;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addAdditionalMountPointsItem(AdditionalMountPoint additionalMountPointsItem) {
    if (this.additionalMountPoints == null) {
      this.additionalMountPoints = new ArrayList<>();
    }
    this.additionalMountPoints.add(additionalMountPointsItem);
    return this;
  }

   /**
   * Specifies additional locations on which to mount a subdirectory of an AppData container.
   * @return additionalMountPoints
  **/
  @javax.annotation.Nullable
  public List<AdditionalMountPoint> getAdditionalMountPoints() {
    return additionalMountPoints;
  }

  public void setAdditionalMountPoints(List<AdditionalMountPoint> additionalMountPoints) {
    this.additionalMountPoints = additionalMountPoints;
  }


  public ProvisionVDBBySnapshotParameters appdataConfigParams(Map<String, Object> appdataConfigParams) {
    this.appdataConfigParams = appdataConfigParams;
    return this;
  }

  public ProvisionVDBBySnapshotParameters putAppdataConfigParamsItem(String key, Object appdataConfigParamsItem) {
    if (this.appdataConfigParams == null) {
      this.appdataConfigParams = new HashMap<>();
    }
    this.appdataConfigParams.put(key, appdataConfigParamsItem);
    return this;
  }

   /**
   * The list of parameters specified by the source config schema in the toolkit
   * @return appdataConfigParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getAppdataConfigParams() {
    return appdataConfigParams;
  }

  public void setAppdataConfigParams(Map<String, Object> appdataConfigParams) {
    this.appdataConfigParams = appdataConfigParams;
  }


  public ProvisionVDBBySnapshotParameters configParams(Map<String, Object> configParams) {
    this.configParams = configParams;
    return this;
  }

  public ProvisionVDBBySnapshotParameters putConfigParamsItem(String key, Object configParamsItem) {
    if (this.configParams == null) {
      this.configParams = new HashMap<>();
    }
    this.configParams.put(key, configParamsItem);
    return this;
  }

   /**
   * Database configuration parameter overrides.
   * @return configParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getConfigParams() {
    return configParams;
  }

  public void setConfigParams(Map<String, Object> configParams) {
    this.configParams = configParams;
  }


  public ProvisionVDBBySnapshotParameters privilegedOsUser(String privilegedOsUser) {
    this.privilegedOsUser = privilegedOsUser;
    return this;
  }

   /**
   * This privileged unix username will be used to create the VDB. Leave this field blank if you do not want to use privilege elevation. The unix privileged username should begin with a letter or an underscore, followed by letters, digits, underscores, or dashes. They can end with a dollar sign (postgres only).
   * @return privilegedOsUser
  **/
  @javax.annotation.Nullable
  public String getPrivilegedOsUser() {
    return privilegedOsUser;
  }

  public void setPrivilegedOsUser(String privilegedOsUser) {
    this.privilegedOsUser = privilegedOsUser;
  }


  public ProvisionVDBBySnapshotParameters postgresPort(Integer postgresPort) {
    this.postgresPort = postgresPort;
    return this;
  }

   /**
   * Port number for Postgres target database (postgres only).
   * minimum: 1
   * maximum: 65536
   * @return postgresPort
  **/
  @javax.annotation.Nullable
  public Integer getPostgresPort() {
    return postgresPort;
  }

  public void setPostgresPort(Integer postgresPort) {
    this.postgresPort = postgresPort;
  }


  public ProvisionVDBBySnapshotParameters configSettingsStg(List<ConfigSettingsStg> configSettingsStg) {
    this.configSettingsStg = configSettingsStg;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addConfigSettingsStgItem(ConfigSettingsStg configSettingsStgItem) {
    if (this.configSettingsStg == null) {
      this.configSettingsStg = new ArrayList<>();
    }
    this.configSettingsStg.add(configSettingsStgItem);
    return this;
  }

   /**
   * Custom Database-Level config settings (postgres only).
   * @return configSettingsStg
  **/
  @javax.annotation.Nullable
  public List<ConfigSettingsStg> getConfigSettingsStg() {
    return configSettingsStg;
  }

  public void setConfigSettingsStg(List<ConfigSettingsStg> configSettingsStg) {
    this.configSettingsStg = configSettingsStg;
  }


  public ProvisionVDBBySnapshotParameters vcdbRestart(Boolean vcdbRestart) {
    this.vcdbRestart = vcdbRestart;
    return this;
  }

   /**
   * Indicates whether the Engine should automatically restart this vCDB when target host reboot is detected. If vdb_restart property value is not explicitly set and vcdb_restart is set as false - the vdb_restart property is defaulted to false.
   * @return vcdbRestart
  **/
  @javax.annotation.Nullable
  public Boolean getVcdbRestart() {
    return vcdbRestart;
  }

  public void setVcdbRestart(Boolean vcdbRestart) {
    this.vcdbRestart = vcdbRestart;
  }


  public ProvisionVDBBySnapshotParameters mssqlFailoverDriveLetter(String mssqlFailoverDriveLetter) {
    this.mssqlFailoverDriveLetter = mssqlFailoverDriveLetter;
    return this;
  }

   /**
   * Base drive letter location for mount points. (MSSql Only).
   * @return mssqlFailoverDriveLetter
  **/
  @javax.annotation.Nullable
  public String getMssqlFailoverDriveLetter() {
    return mssqlFailoverDriveLetter;
  }

  public void setMssqlFailoverDriveLetter(String mssqlFailoverDriveLetter) {
    this.mssqlFailoverDriveLetter = mssqlFailoverDriveLetter;
  }


  public ProvisionVDBBySnapshotParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public ProvisionVDBBySnapshotParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for VDB.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public ProvisionVDBBySnapshotParameters snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

   /**
   * The ID of the snapshot from which to execute the operation. If the snapshot_id is not, selects the latest snapshot.
   * @return snapshotId
  **/
  @javax.annotation.Nullable
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }


  public ProvisionVDBBySnapshotParameters engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the Engine onto which to provision. If the source ID unambiguously identifies a source object, this parameter is unnecessary and ignored.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public ProvisionVDBBySnapshotParameters sourceDataId(String sourceDataId) {
    this.sourceDataId = sourceDataId;
    return this;
  }

   /**
   * The ID of the source object (dSource or VDB) to provision from. All other objects referenced by the parameters must live on the same engine as the source. If this property is not set, the data_source of the snapshot_id will be used.
   * @return sourceDataId
  **/
  @javax.annotation.Nullable
  public String getSourceDataId() {
    return sourceDataId;
  }

  public void setSourceDataId(String sourceDataId) {
    this.sourceDataId = sourceDataId;
  }


  public ProvisionVDBBySnapshotParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account provisioning this VDB must be configured as owner of the VDB.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters = (ProvisionVDBBySnapshotParameters) o;
    return Objects.equals(this.preRefresh, provisionVDBBySnapshotParameters.preRefresh) &&
        Objects.equals(this.postRefresh, provisionVDBBySnapshotParameters.postRefresh) &&
        Objects.equals(this.preSelfRefresh, provisionVDBBySnapshotParameters.preSelfRefresh) &&
        Objects.equals(this.postSelfRefresh, provisionVDBBySnapshotParameters.postSelfRefresh) &&
        Objects.equals(this.preRollback, provisionVDBBySnapshotParameters.preRollback) &&
        Objects.equals(this.postRollback, provisionVDBBySnapshotParameters.postRollback) &&
        Objects.equals(this.configureClone, provisionVDBBySnapshotParameters.configureClone) &&
        Objects.equals(this.preSnapshot, provisionVDBBySnapshotParameters.preSnapshot) &&
        Objects.equals(this.postSnapshot, provisionVDBBySnapshotParameters.postSnapshot) &&
        Objects.equals(this.preStart, provisionVDBBySnapshotParameters.preStart) &&
        Objects.equals(this.postStart, provisionVDBBySnapshotParameters.postStart) &&
        Objects.equals(this.preStop, provisionVDBBySnapshotParameters.preStop) &&
        Objects.equals(this.postStop, provisionVDBBySnapshotParameters.postStop) &&
        Objects.equals(this.targetGroupId, provisionVDBBySnapshotParameters.targetGroupId) &&
        Objects.equals(this.name, provisionVDBBySnapshotParameters.name) &&
        Objects.equals(this.databaseName, provisionVDBBySnapshotParameters.databaseName) &&
        Objects.equals(this.cdbId, provisionVDBBySnapshotParameters.cdbId) &&
        Objects.equals(this.clusterNodeIds, provisionVDBBySnapshotParameters.clusterNodeIds) &&
        Objects.equals(this.clusterNodeInstances, provisionVDBBySnapshotParameters.clusterNodeInstances) &&
        Objects.equals(this.truncateLogOnCheckpoint, provisionVDBBySnapshotParameters.truncateLogOnCheckpoint) &&
        Objects.equals(this.osUsername, provisionVDBBySnapshotParameters.osUsername) &&
        Objects.equals(this.osPassword, provisionVDBBySnapshotParameters.osPassword) &&
        Objects.equals(this.environmentId, provisionVDBBySnapshotParameters.environmentId) &&
        Objects.equals(this.environmentUserId, provisionVDBBySnapshotParameters.environmentUserId) &&
        Objects.equals(this.repositoryId, provisionVDBBySnapshotParameters.repositoryId) &&
        Objects.equals(this.autoSelectRepository, provisionVDBBySnapshotParameters.autoSelectRepository) &&
        Objects.equals(this.vdbRestart, provisionVDBBySnapshotParameters.vdbRestart) &&
        Objects.equals(this.templateId, provisionVDBBySnapshotParameters.templateId) &&
        Objects.equals(this.auxiliaryTemplateId, provisionVDBBySnapshotParameters.auxiliaryTemplateId) &&
        Objects.equals(this.fileMappingRules, provisionVDBBySnapshotParameters.fileMappingRules) &&
        Objects.equals(this.oracleInstanceName, provisionVDBBySnapshotParameters.oracleInstanceName) &&
        Objects.equals(this.uniqueName, provisionVDBBySnapshotParameters.uniqueName) &&
        Objects.equals(this.vcdbName, provisionVDBBySnapshotParameters.vcdbName) &&
        Objects.equals(this.vcdbDatabaseName, provisionVDBBySnapshotParameters.vcdbDatabaseName) &&
        Objects.equals(this.mountPoint, provisionVDBBySnapshotParameters.mountPoint) &&
        Objects.equals(this.openResetLogs, provisionVDBBySnapshotParameters.openResetLogs) &&
        Objects.equals(this.snapshotPolicyId, provisionVDBBySnapshotParameters.snapshotPolicyId) &&
        Objects.equals(this.retentionPolicyId, provisionVDBBySnapshotParameters.retentionPolicyId) &&
        Objects.equals(this.recoveryModel, provisionVDBBySnapshotParameters.recoveryModel) &&
        Objects.equals(this.preScript, provisionVDBBySnapshotParameters.preScript) &&
        Objects.equals(this.postScript, provisionVDBBySnapshotParameters.postScript) &&
        Objects.equals(this.cdcOnProvision, provisionVDBBySnapshotParameters.cdcOnProvision) &&
        Objects.equals(this.onlineLogSize, provisionVDBBySnapshotParameters.onlineLogSize) &&
        Objects.equals(this.onlineLogGroups, provisionVDBBySnapshotParameters.onlineLogGroups) &&
        Objects.equals(this.archiveLog, provisionVDBBySnapshotParameters.archiveLog) &&
        Objects.equals(this.newDbid, provisionVDBBySnapshotParameters.newDbid) &&
        Objects.equals(this.masked, provisionVDBBySnapshotParameters.masked) &&
        Objects.equals(this.listenerIds, provisionVDBBySnapshotParameters.listenerIds) &&
        Objects.equals(this.customEnvVars, provisionVDBBySnapshotParameters.customEnvVars) &&
        Objects.equals(this.customEnvFiles, provisionVDBBySnapshotParameters.customEnvFiles) &&
        Objects.equals(this.oracleRacCustomEnvFiles, provisionVDBBySnapshotParameters.oracleRacCustomEnvFiles) &&
        Objects.equals(this.oracleRacCustomEnvVars, provisionVDBBySnapshotParameters.oracleRacCustomEnvVars) &&
        Objects.equals(this.parentTdeKeystorePath, provisionVDBBySnapshotParameters.parentTdeKeystorePath) &&
        Objects.equals(this.parentTdeKeystorePassword, provisionVDBBySnapshotParameters.parentTdeKeystorePassword) &&
        Objects.equals(this.tdeExportedKeyFileSecret, provisionVDBBySnapshotParameters.tdeExportedKeyFileSecret) &&
        Objects.equals(this.tdeKeyIdentifier, provisionVDBBySnapshotParameters.tdeKeyIdentifier) &&
        Objects.equals(this.targetVcdbTdeKeystorePath, provisionVDBBySnapshotParameters.targetVcdbTdeKeystorePath) &&
        Objects.equals(this.cdbTdeKeystorePassword, provisionVDBBySnapshotParameters.cdbTdeKeystorePassword) &&
        Objects.equals(this.vcdbTdeKeyIdentifier, provisionVDBBySnapshotParameters.vcdbTdeKeyIdentifier) &&
        Objects.equals(this.appdataSourceParams, provisionVDBBySnapshotParameters.appdataSourceParams) &&
        Objects.equals(this.additionalMountPoints, provisionVDBBySnapshotParameters.additionalMountPoints) &&
        Objects.equals(this.appdataConfigParams, provisionVDBBySnapshotParameters.appdataConfigParams) &&
        Objects.equals(this.configParams, provisionVDBBySnapshotParameters.configParams) &&
        Objects.equals(this.privilegedOsUser, provisionVDBBySnapshotParameters.privilegedOsUser) &&
        Objects.equals(this.postgresPort, provisionVDBBySnapshotParameters.postgresPort) &&
        Objects.equals(this.configSettingsStg, provisionVDBBySnapshotParameters.configSettingsStg) &&
        Objects.equals(this.vcdbRestart, provisionVDBBySnapshotParameters.vcdbRestart) &&
        Objects.equals(this.mssqlFailoverDriveLetter, provisionVDBBySnapshotParameters.mssqlFailoverDriveLetter) &&
        Objects.equals(this.tags, provisionVDBBySnapshotParameters.tags) &&
        Objects.equals(this.snapshotId, provisionVDBBySnapshotParameters.snapshotId) &&
        Objects.equals(this.engineId, provisionVDBBySnapshotParameters.engineId) &&
        Objects.equals(this.sourceDataId, provisionVDBBySnapshotParameters.sourceDataId) &&
        Objects.equals(this.makeCurrentAccountOwner, provisionVDBBySnapshotParameters.makeCurrentAccountOwner);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(preRefresh, postRefresh, preSelfRefresh, postSelfRefresh, preRollback, postRollback, configureClone, preSnapshot, postSnapshot, preStart, postStart, preStop, postStop, targetGroupId, name, databaseName, cdbId, clusterNodeIds, clusterNodeInstances, truncateLogOnCheckpoint, osUsername, osPassword, environmentId, environmentUserId, repositoryId, autoSelectRepository, vdbRestart, templateId, auxiliaryTemplateId, fileMappingRules, oracleInstanceName, uniqueName, vcdbName, vcdbDatabaseName, mountPoint, openResetLogs, snapshotPolicyId, retentionPolicyId, recoveryModel, preScript, postScript, cdcOnProvision, onlineLogSize, onlineLogGroups, archiveLog, newDbid, masked, listenerIds, customEnvVars, customEnvFiles, oracleRacCustomEnvFiles, oracleRacCustomEnvVars, parentTdeKeystorePath, parentTdeKeystorePassword, tdeExportedKeyFileSecret, tdeKeyIdentifier, targetVcdbTdeKeystorePath, cdbTdeKeystorePassword, vcdbTdeKeyIdentifier, appdataSourceParams, additionalMountPoints, appdataConfigParams, configParams, privilegedOsUser, postgresPort, configSettingsStg, vcdbRestart, mssqlFailoverDriveLetter, tags, snapshotId, engineId, sourceDataId, makeCurrentAccountOwner);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionVDBBySnapshotParameters {\n");
    sb.append("    preRefresh: ").append(toIndentedString(preRefresh)).append("\n");
    sb.append("    postRefresh: ").append(toIndentedString(postRefresh)).append("\n");
    sb.append("    preSelfRefresh: ").append(toIndentedString(preSelfRefresh)).append("\n");
    sb.append("    postSelfRefresh: ").append(toIndentedString(postSelfRefresh)).append("\n");
    sb.append("    preRollback: ").append(toIndentedString(preRollback)).append("\n");
    sb.append("    postRollback: ").append(toIndentedString(postRollback)).append("\n");
    sb.append("    configureClone: ").append(toIndentedString(configureClone)).append("\n");
    sb.append("    preSnapshot: ").append(toIndentedString(preSnapshot)).append("\n");
    sb.append("    postSnapshot: ").append(toIndentedString(postSnapshot)).append("\n");
    sb.append("    preStart: ").append(toIndentedString(preStart)).append("\n");
    sb.append("    postStart: ").append(toIndentedString(postStart)).append("\n");
    sb.append("    preStop: ").append(toIndentedString(preStop)).append("\n");
    sb.append("    postStop: ").append(toIndentedString(postStop)).append("\n");
    sb.append("    targetGroupId: ").append(toIndentedString(targetGroupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    cdbId: ").append(toIndentedString(cdbId)).append("\n");
    sb.append("    clusterNodeIds: ").append(toIndentedString(clusterNodeIds)).append("\n");
    sb.append("    clusterNodeInstances: ").append(toIndentedString(clusterNodeInstances)).append("\n");
    sb.append("    truncateLogOnCheckpoint: ").append(toIndentedString(truncateLogOnCheckpoint)).append("\n");
    sb.append("    osUsername: ").append(toIndentedString(osUsername)).append("\n");
    sb.append("    osPassword: ").append(toIndentedString(osPassword)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    environmentUserId: ").append(toIndentedString(environmentUserId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    autoSelectRepository: ").append(toIndentedString(autoSelectRepository)).append("\n");
    sb.append("    vdbRestart: ").append(toIndentedString(vdbRestart)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    auxiliaryTemplateId: ").append(toIndentedString(auxiliaryTemplateId)).append("\n");
    sb.append("    fileMappingRules: ").append(toIndentedString(fileMappingRules)).append("\n");
    sb.append("    oracleInstanceName: ").append(toIndentedString(oracleInstanceName)).append("\n");
    sb.append("    uniqueName: ").append(toIndentedString(uniqueName)).append("\n");
    sb.append("    vcdbName: ").append(toIndentedString(vcdbName)).append("\n");
    sb.append("    vcdbDatabaseName: ").append(toIndentedString(vcdbDatabaseName)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    openResetLogs: ").append(toIndentedString(openResetLogs)).append("\n");
    sb.append("    snapshotPolicyId: ").append(toIndentedString(snapshotPolicyId)).append("\n");
    sb.append("    retentionPolicyId: ").append(toIndentedString(retentionPolicyId)).append("\n");
    sb.append("    recoveryModel: ").append(toIndentedString(recoveryModel)).append("\n");
    sb.append("    preScript: ").append(toIndentedString(preScript)).append("\n");
    sb.append("    postScript: ").append(toIndentedString(postScript)).append("\n");
    sb.append("    cdcOnProvision: ").append(toIndentedString(cdcOnProvision)).append("\n");
    sb.append("    onlineLogSize: ").append(toIndentedString(onlineLogSize)).append("\n");
    sb.append("    onlineLogGroups: ").append(toIndentedString(onlineLogGroups)).append("\n");
    sb.append("    archiveLog: ").append(toIndentedString(archiveLog)).append("\n");
    sb.append("    newDbid: ").append(toIndentedString(newDbid)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("    listenerIds: ").append(toIndentedString(listenerIds)).append("\n");
    sb.append("    customEnvVars: ").append(toIndentedString(customEnvVars)).append("\n");
    sb.append("    customEnvFiles: ").append(toIndentedString(customEnvFiles)).append("\n");
    sb.append("    oracleRacCustomEnvFiles: ").append(toIndentedString(oracleRacCustomEnvFiles)).append("\n");
    sb.append("    oracleRacCustomEnvVars: ").append(toIndentedString(oracleRacCustomEnvVars)).append("\n");
    sb.append("    parentTdeKeystorePath: ").append(toIndentedString(parentTdeKeystorePath)).append("\n");
    sb.append("    parentTdeKeystorePassword: ").append(toIndentedString(parentTdeKeystorePassword)).append("\n");
    sb.append("    tdeExportedKeyFileSecret: ").append(toIndentedString(tdeExportedKeyFileSecret)).append("\n");
    sb.append("    tdeKeyIdentifier: ").append(toIndentedString(tdeKeyIdentifier)).append("\n");
    sb.append("    targetVcdbTdeKeystorePath: ").append(toIndentedString(targetVcdbTdeKeystorePath)).append("\n");
    sb.append("    cdbTdeKeystorePassword: ").append(toIndentedString(cdbTdeKeystorePassword)).append("\n");
    sb.append("    vcdbTdeKeyIdentifier: ").append(toIndentedString(vcdbTdeKeyIdentifier)).append("\n");
    sb.append("    appdataSourceParams: ").append(toIndentedString(appdataSourceParams)).append("\n");
    sb.append("    additionalMountPoints: ").append(toIndentedString(additionalMountPoints)).append("\n");
    sb.append("    appdataConfigParams: ").append(toIndentedString(appdataConfigParams)).append("\n");
    sb.append("    configParams: ").append(toIndentedString(configParams)).append("\n");
    sb.append("    privilegedOsUser: ").append(toIndentedString(privilegedOsUser)).append("\n");
    sb.append("    postgresPort: ").append(toIndentedString(postgresPort)).append("\n");
    sb.append("    configSettingsStg: ").append(toIndentedString(configSettingsStg)).append("\n");
    sb.append("    vcdbRestart: ").append(toIndentedString(vcdbRestart)).append("\n");
    sb.append("    mssqlFailoverDriveLetter: ").append(toIndentedString(mssqlFailoverDriveLetter)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    sourceDataId: ").append(toIndentedString(sourceDataId)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pre_refresh");
    openapiFields.add("post_refresh");
    openapiFields.add("pre_self_refresh");
    openapiFields.add("post_self_refresh");
    openapiFields.add("pre_rollback");
    openapiFields.add("post_rollback");
    openapiFields.add("configure_clone");
    openapiFields.add("pre_snapshot");
    openapiFields.add("post_snapshot");
    openapiFields.add("pre_start");
    openapiFields.add("post_start");
    openapiFields.add("pre_stop");
    openapiFields.add("post_stop");
    openapiFields.add("target_group_id");
    openapiFields.add("name");
    openapiFields.add("database_name");
    openapiFields.add("cdb_id");
    openapiFields.add("cluster_node_ids");
    openapiFields.add("cluster_node_instances");
    openapiFields.add("truncate_log_on_checkpoint");
    openapiFields.add("os_username");
    openapiFields.add("os_password");
    openapiFields.add("environment_id");
    openapiFields.add("environment_user_id");
    openapiFields.add("repository_id");
    openapiFields.add("auto_select_repository");
    openapiFields.add("vdb_restart");
    openapiFields.add("template_id");
    openapiFields.add("auxiliary_template_id");
    openapiFields.add("file_mapping_rules");
    openapiFields.add("oracle_instance_name");
    openapiFields.add("unique_name");
    openapiFields.add("vcdb_name");
    openapiFields.add("vcdb_database_name");
    openapiFields.add("mount_point");
    openapiFields.add("open_reset_logs");
    openapiFields.add("snapshot_policy_id");
    openapiFields.add("retention_policy_id");
    openapiFields.add("recovery_model");
    openapiFields.add("pre_script");
    openapiFields.add("post_script");
    openapiFields.add("cdc_on_provision");
    openapiFields.add("online_log_size");
    openapiFields.add("online_log_groups");
    openapiFields.add("archive_log");
    openapiFields.add("new_dbid");
    openapiFields.add("masked");
    openapiFields.add("listener_ids");
    openapiFields.add("custom_env_vars");
    openapiFields.add("custom_env_files");
    openapiFields.add("oracle_rac_custom_env_files");
    openapiFields.add("oracle_rac_custom_env_vars");
    openapiFields.add("parentTdeKeystorePath");
    openapiFields.add("parent_tde_keystore_password");
    openapiFields.add("tde_exported_key_file_secret");
    openapiFields.add("tde_key_identifier");
    openapiFields.add("target_vcdb_tde_keystore_path");
    openapiFields.add("cdb_tde_keystore_password");
    openapiFields.add("vcdb_tde_key_identifier");
    openapiFields.add("appdata_source_params");
    openapiFields.add("additional_mount_points");
    openapiFields.add("appdata_config_params");
    openapiFields.add("config_params");
    openapiFields.add("privileged_os_user");
    openapiFields.add("postgres_port");
    openapiFields.add("config_settings_stg");
    openapiFields.add("vcdb_restart");
    openapiFields.add("mssql_failover_drive_letter");
    openapiFields.add("tags");
    openapiFields.add("snapshot_id");
    openapiFields.add("engine_id");
    openapiFields.add("source_data_id");
    openapiFields.add("make_current_account_owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProvisionVDBBySnapshotParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionVDBBySnapshotParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionVDBBySnapshotParameters is not found in the empty JSON string", ProvisionVDBBySnapshotParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionVDBBySnapshotParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionVDBBySnapshotParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("pre_refresh") != null && !jsonObj.get("pre_refresh").isJsonNull()) {
        JsonArray jsonArraypreRefresh = jsonObj.getAsJsonArray("pre_refresh");
        if (jsonArraypreRefresh != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_refresh").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_refresh` to be an array in the JSON string but got `%s`", jsonObj.get("pre_refresh").toString()));
          }

          // validate the optional field `pre_refresh` (array)
          for (int i = 0; i < jsonArraypreRefresh.size(); i++) {
            Hook.validateJsonElement(jsonArraypreRefresh.get(i));
          };
        }
      }
      if (jsonObj.get("post_refresh") != null && !jsonObj.get("post_refresh").isJsonNull()) {
        JsonArray jsonArraypostRefresh = jsonObj.getAsJsonArray("post_refresh");
        if (jsonArraypostRefresh != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_refresh").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_refresh` to be an array in the JSON string but got `%s`", jsonObj.get("post_refresh").toString()));
          }

          // validate the optional field `post_refresh` (array)
          for (int i = 0; i < jsonArraypostRefresh.size(); i++) {
            Hook.validateJsonElement(jsonArraypostRefresh.get(i));
          };
        }
      }
      if (jsonObj.get("pre_self_refresh") != null && !jsonObj.get("pre_self_refresh").isJsonNull()) {
        JsonArray jsonArraypreSelfRefresh = jsonObj.getAsJsonArray("pre_self_refresh");
        if (jsonArraypreSelfRefresh != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_self_refresh").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_self_refresh` to be an array in the JSON string but got `%s`", jsonObj.get("pre_self_refresh").toString()));
          }

          // validate the optional field `pre_self_refresh` (array)
          for (int i = 0; i < jsonArraypreSelfRefresh.size(); i++) {
            Hook.validateJsonElement(jsonArraypreSelfRefresh.get(i));
          };
        }
      }
      if (jsonObj.get("post_self_refresh") != null && !jsonObj.get("post_self_refresh").isJsonNull()) {
        JsonArray jsonArraypostSelfRefresh = jsonObj.getAsJsonArray("post_self_refresh");
        if (jsonArraypostSelfRefresh != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_self_refresh").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_self_refresh` to be an array in the JSON string but got `%s`", jsonObj.get("post_self_refresh").toString()));
          }

          // validate the optional field `post_self_refresh` (array)
          for (int i = 0; i < jsonArraypostSelfRefresh.size(); i++) {
            Hook.validateJsonElement(jsonArraypostSelfRefresh.get(i));
          };
        }
      }
      if (jsonObj.get("pre_rollback") != null && !jsonObj.get("pre_rollback").isJsonNull()) {
        JsonArray jsonArraypreRollback = jsonObj.getAsJsonArray("pre_rollback");
        if (jsonArraypreRollback != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_rollback").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_rollback` to be an array in the JSON string but got `%s`", jsonObj.get("pre_rollback").toString()));
          }

          // validate the optional field `pre_rollback` (array)
          for (int i = 0; i < jsonArraypreRollback.size(); i++) {
            Hook.validateJsonElement(jsonArraypreRollback.get(i));
          };
        }
      }
      if (jsonObj.get("post_rollback") != null && !jsonObj.get("post_rollback").isJsonNull()) {
        JsonArray jsonArraypostRollback = jsonObj.getAsJsonArray("post_rollback");
        if (jsonArraypostRollback != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_rollback").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_rollback` to be an array in the JSON string but got `%s`", jsonObj.get("post_rollback").toString()));
          }

          // validate the optional field `post_rollback` (array)
          for (int i = 0; i < jsonArraypostRollback.size(); i++) {
            Hook.validateJsonElement(jsonArraypostRollback.get(i));
          };
        }
      }
      if (jsonObj.get("configure_clone") != null && !jsonObj.get("configure_clone").isJsonNull()) {
        JsonArray jsonArrayconfigureClone = jsonObj.getAsJsonArray("configure_clone");
        if (jsonArrayconfigureClone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configure_clone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configure_clone` to be an array in the JSON string but got `%s`", jsonObj.get("configure_clone").toString()));
          }

          // validate the optional field `configure_clone` (array)
          for (int i = 0; i < jsonArrayconfigureClone.size(); i++) {
            Hook.validateJsonElement(jsonArrayconfigureClone.get(i));
          };
        }
      }
      if (jsonObj.get("pre_snapshot") != null && !jsonObj.get("pre_snapshot").isJsonNull()) {
        JsonArray jsonArraypreSnapshot = jsonObj.getAsJsonArray("pre_snapshot");
        if (jsonArraypreSnapshot != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_snapshot").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_snapshot` to be an array in the JSON string but got `%s`", jsonObj.get("pre_snapshot").toString()));
          }

          // validate the optional field `pre_snapshot` (array)
          for (int i = 0; i < jsonArraypreSnapshot.size(); i++) {
            Hook.validateJsonElement(jsonArraypreSnapshot.get(i));
          };
        }
      }
      if (jsonObj.get("post_snapshot") != null && !jsonObj.get("post_snapshot").isJsonNull()) {
        JsonArray jsonArraypostSnapshot = jsonObj.getAsJsonArray("post_snapshot");
        if (jsonArraypostSnapshot != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_snapshot").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_snapshot` to be an array in the JSON string but got `%s`", jsonObj.get("post_snapshot").toString()));
          }

          // validate the optional field `post_snapshot` (array)
          for (int i = 0; i < jsonArraypostSnapshot.size(); i++) {
            Hook.validateJsonElement(jsonArraypostSnapshot.get(i));
          };
        }
      }
      if (jsonObj.get("pre_start") != null && !jsonObj.get("pre_start").isJsonNull()) {
        JsonArray jsonArraypreStart = jsonObj.getAsJsonArray("pre_start");
        if (jsonArraypreStart != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_start").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_start` to be an array in the JSON string but got `%s`", jsonObj.get("pre_start").toString()));
          }

          // validate the optional field `pre_start` (array)
          for (int i = 0; i < jsonArraypreStart.size(); i++) {
            Hook.validateJsonElement(jsonArraypreStart.get(i));
          };
        }
      }
      if (jsonObj.get("post_start") != null && !jsonObj.get("post_start").isJsonNull()) {
        JsonArray jsonArraypostStart = jsonObj.getAsJsonArray("post_start");
        if (jsonArraypostStart != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_start").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_start` to be an array in the JSON string but got `%s`", jsonObj.get("post_start").toString()));
          }

          // validate the optional field `post_start` (array)
          for (int i = 0; i < jsonArraypostStart.size(); i++) {
            Hook.validateJsonElement(jsonArraypostStart.get(i));
          };
        }
      }
      if (jsonObj.get("pre_stop") != null && !jsonObj.get("pre_stop").isJsonNull()) {
        JsonArray jsonArraypreStop = jsonObj.getAsJsonArray("pre_stop");
        if (jsonArraypreStop != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pre_stop").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pre_stop` to be an array in the JSON string but got `%s`", jsonObj.get("pre_stop").toString()));
          }

          // validate the optional field `pre_stop` (array)
          for (int i = 0; i < jsonArraypreStop.size(); i++) {
            Hook.validateJsonElement(jsonArraypreStop.get(i));
          };
        }
      }
      if (jsonObj.get("post_stop") != null && !jsonObj.get("post_stop").isJsonNull()) {
        JsonArray jsonArraypostStop = jsonObj.getAsJsonArray("post_stop");
        if (jsonArraypostStop != null) {
          // ensure the json data is an array
          if (!jsonObj.get("post_stop").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `post_stop` to be an array in the JSON string but got `%s`", jsonObj.get("post_stop").toString()));
          }

          // validate the optional field `post_stop` (array)
          for (int i = 0; i < jsonArraypostStop.size(); i++) {
            Hook.validateJsonElement(jsonArraypostStop.get(i));
          };
        }
      }
      if ((jsonObj.get("target_group_id") != null && !jsonObj.get("target_group_id").isJsonNull()) && !jsonObj.get("target_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_group_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("database_name") != null && !jsonObj.get("database_name").isJsonNull()) && !jsonObj.get("database_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_name").toString()));
      }
      if ((jsonObj.get("cdb_id") != null && !jsonObj.get("cdb_id").isJsonNull()) && !jsonObj.get("cdb_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdb_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdb_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cluster_node_ids") != null && !jsonObj.get("cluster_node_ids").isJsonNull() && !jsonObj.get("cluster_node_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_node_ids` to be an array in the JSON string but got `%s`", jsonObj.get("cluster_node_ids").toString()));
      }
      if (jsonObj.get("cluster_node_instances") != null && !jsonObj.get("cluster_node_instances").isJsonNull()) {
        JsonArray jsonArrayclusterNodeInstances = jsonObj.getAsJsonArray("cluster_node_instances");
        if (jsonArrayclusterNodeInstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cluster_node_instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cluster_node_instances` to be an array in the JSON string but got `%s`", jsonObj.get("cluster_node_instances").toString()));
          }

          // validate the optional field `cluster_node_instances` (array)
          for (int i = 0; i < jsonArrayclusterNodeInstances.size(); i++) {
            ClusterNodeInstance.validateJsonElement(jsonArrayclusterNodeInstances.get(i));
          };
        }
      }
      if ((jsonObj.get("os_username") != null && !jsonObj.get("os_username").isJsonNull()) && !jsonObj.get("os_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_username").toString()));
      }
      if ((jsonObj.get("os_password") != null && !jsonObj.get("os_password").isJsonNull()) && !jsonObj.get("os_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_password").toString()));
      }
      if ((jsonObj.get("environment_id") != null && !jsonObj.get("environment_id").isJsonNull()) && !jsonObj.get("environment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_id").toString()));
      }
      if ((jsonObj.get("environment_user_id") != null && !jsonObj.get("environment_user_id").isJsonNull()) && !jsonObj.get("environment_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_user_id").toString()));
      }
      if ((jsonObj.get("repository_id") != null && !jsonObj.get("repository_id").isJsonNull()) && !jsonObj.get("repository_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_id").toString()));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if ((jsonObj.get("auxiliary_template_id") != null && !jsonObj.get("auxiliary_template_id").isJsonNull()) && !jsonObj.get("auxiliary_template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auxiliary_template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auxiliary_template_id").toString()));
      }
      if ((jsonObj.get("file_mapping_rules") != null && !jsonObj.get("file_mapping_rules").isJsonNull()) && !jsonObj.get("file_mapping_rules").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_mapping_rules` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_mapping_rules").toString()));
      }
      if ((jsonObj.get("oracle_instance_name") != null && !jsonObj.get("oracle_instance_name").isJsonNull()) && !jsonObj.get("oracle_instance_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_instance_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_instance_name").toString()));
      }
      if ((jsonObj.get("unique_name") != null && !jsonObj.get("unique_name").isJsonNull()) && !jsonObj.get("unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_name").toString()));
      }
      if ((jsonObj.get("vcdb_name") != null && !jsonObj.get("vcdb_name").isJsonNull()) && !jsonObj.get("vcdb_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcdb_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcdb_name").toString()));
      }
      if ((jsonObj.get("vcdb_database_name") != null && !jsonObj.get("vcdb_database_name").isJsonNull()) && !jsonObj.get("vcdb_database_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcdb_database_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcdb_database_name").toString()));
      }
      if ((jsonObj.get("mount_point") != null && !jsonObj.get("mount_point").isJsonNull()) && !jsonObj.get("mount_point").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_point` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_point").toString()));
      }
      if ((jsonObj.get("snapshot_policy_id") != null && !jsonObj.get("snapshot_policy_id").isJsonNull()) && !jsonObj.get("snapshot_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshot_policy_id").toString()));
      }
      if ((jsonObj.get("retention_policy_id") != null && !jsonObj.get("retention_policy_id").isJsonNull()) && !jsonObj.get("retention_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy_id").toString()));
      }
      if ((jsonObj.get("recovery_model") != null && !jsonObj.get("recovery_model").isJsonNull()) && !jsonObj.get("recovery_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recovery_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recovery_model").toString()));
      }
      // validate the optional field `recovery_model`
      if (jsonObj.get("recovery_model") != null && !jsonObj.get("recovery_model").isJsonNull()) {
        RecoveryModelEnum.validateJsonElement(jsonObj.get("recovery_model"));
      }
      if ((jsonObj.get("pre_script") != null && !jsonObj.get("pre_script").isJsonNull()) && !jsonObj.get("pre_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_script").toString()));
      }
      if ((jsonObj.get("post_script") != null && !jsonObj.get("post_script").isJsonNull()) && !jsonObj.get("post_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_script").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("listener_ids") != null && !jsonObj.get("listener_ids").isJsonNull() && !jsonObj.get("listener_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `listener_ids` to be an array in the JSON string but got `%s`", jsonObj.get("listener_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("custom_env_files") != null && !jsonObj.get("custom_env_files").isJsonNull() && !jsonObj.get("custom_env_files").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_env_files` to be an array in the JSON string but got `%s`", jsonObj.get("custom_env_files").toString()));
      }
      if (jsonObj.get("oracle_rac_custom_env_files") != null && !jsonObj.get("oracle_rac_custom_env_files").isJsonNull()) {
        JsonArray jsonArrayoracleRacCustomEnvFiles = jsonObj.getAsJsonArray("oracle_rac_custom_env_files");
        if (jsonArrayoracleRacCustomEnvFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oracle_rac_custom_env_files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oracle_rac_custom_env_files` to be an array in the JSON string but got `%s`", jsonObj.get("oracle_rac_custom_env_files").toString()));
          }

          // validate the optional field `oracle_rac_custom_env_files` (array)
          for (int i = 0; i < jsonArrayoracleRacCustomEnvFiles.size(); i++) {
            OracleRacCustomEnvFile.validateJsonElement(jsonArrayoracleRacCustomEnvFiles.get(i));
          };
        }
      }
      if (jsonObj.get("oracle_rac_custom_env_vars") != null && !jsonObj.get("oracle_rac_custom_env_vars").isJsonNull()) {
        JsonArray jsonArrayoracleRacCustomEnvVars = jsonObj.getAsJsonArray("oracle_rac_custom_env_vars");
        if (jsonArrayoracleRacCustomEnvVars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oracle_rac_custom_env_vars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oracle_rac_custom_env_vars` to be an array in the JSON string but got `%s`", jsonObj.get("oracle_rac_custom_env_vars").toString()));
          }

          // validate the optional field `oracle_rac_custom_env_vars` (array)
          for (int i = 0; i < jsonArrayoracleRacCustomEnvVars.size(); i++) {
            OracleRacCustomEnvVar.validateJsonElement(jsonArrayoracleRacCustomEnvVars.get(i));
          };
        }
      }
      if ((jsonObj.get("parentTdeKeystorePath") != null && !jsonObj.get("parentTdeKeystorePath").isJsonNull()) && !jsonObj.get("parentTdeKeystorePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentTdeKeystorePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentTdeKeystorePath").toString()));
      }
      if ((jsonObj.get("parent_tde_keystore_password") != null && !jsonObj.get("parent_tde_keystore_password").isJsonNull()) && !jsonObj.get("parent_tde_keystore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_tde_keystore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_tde_keystore_password").toString()));
      }
      if ((jsonObj.get("tde_exported_key_file_secret") != null && !jsonObj.get("tde_exported_key_file_secret").isJsonNull()) && !jsonObj.get("tde_exported_key_file_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tde_exported_key_file_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tde_exported_key_file_secret").toString()));
      }
      if ((jsonObj.get("tde_key_identifier") != null && !jsonObj.get("tde_key_identifier").isJsonNull()) && !jsonObj.get("tde_key_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tde_key_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tde_key_identifier").toString()));
      }
      if ((jsonObj.get("target_vcdb_tde_keystore_path") != null && !jsonObj.get("target_vcdb_tde_keystore_path").isJsonNull()) && !jsonObj.get("target_vcdb_tde_keystore_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_vcdb_tde_keystore_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_vcdb_tde_keystore_path").toString()));
      }
      if ((jsonObj.get("cdb_tde_keystore_password") != null && !jsonObj.get("cdb_tde_keystore_password").isJsonNull()) && !jsonObj.get("cdb_tde_keystore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdb_tde_keystore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdb_tde_keystore_password").toString()));
      }
      if ((jsonObj.get("vcdb_tde_key_identifier") != null && !jsonObj.get("vcdb_tde_key_identifier").isJsonNull()) && !jsonObj.get("vcdb_tde_key_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vcdb_tde_key_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vcdb_tde_key_identifier").toString()));
      }
      if (jsonObj.get("additional_mount_points") != null && !jsonObj.get("additional_mount_points").isJsonNull()) {
        JsonArray jsonArrayadditionalMountPoints = jsonObj.getAsJsonArray("additional_mount_points");
        if (jsonArrayadditionalMountPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_mount_points").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_mount_points` to be an array in the JSON string but got `%s`", jsonObj.get("additional_mount_points").toString()));
          }

          // validate the optional field `additional_mount_points` (array)
          for (int i = 0; i < jsonArrayadditionalMountPoints.size(); i++) {
            AdditionalMountPoint.validateJsonElement(jsonArrayadditionalMountPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("privileged_os_user") != null && !jsonObj.get("privileged_os_user").isJsonNull()) && !jsonObj.get("privileged_os_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privileged_os_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privileged_os_user").toString()));
      }
      if (jsonObj.get("config_settings_stg") != null && !jsonObj.get("config_settings_stg").isJsonNull()) {
        JsonArray jsonArrayconfigSettingsStg = jsonObj.getAsJsonArray("config_settings_stg");
        if (jsonArrayconfigSettingsStg != null) {
          // ensure the json data is an array
          if (!jsonObj.get("config_settings_stg").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `config_settings_stg` to be an array in the JSON string but got `%s`", jsonObj.get("config_settings_stg").toString()));
          }

          // validate the optional field `config_settings_stg` (array)
          for (int i = 0; i < jsonArrayconfigSettingsStg.size(); i++) {
            ConfigSettingsStg.validateJsonElement(jsonArrayconfigSettingsStg.get(i));
          };
        }
      }
      if ((jsonObj.get("mssql_failover_drive_letter") != null && !jsonObj.get("mssql_failover_drive_letter").isJsonNull()) && !jsonObj.get("mssql_failover_drive_letter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_failover_drive_letter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_failover_drive_letter").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("snapshot_id") != null && !jsonObj.get("snapshot_id").isJsonNull()) && !jsonObj.get("snapshot_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshot_id").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("source_data_id") != null && !jsonObj.get("source_data_id").isJsonNull()) && !jsonObj.get("source_data_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_data_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_data_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionVDBBySnapshotParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionVDBBySnapshotParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionVDBBySnapshotParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionVDBBySnapshotParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionVDBBySnapshotParameters>() {
           @Override
           public void write(JsonWriter out, ProvisionVDBBySnapshotParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionVDBBySnapshotParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProvisionVDBBySnapshotParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProvisionVDBBySnapshotParameters
  * @throws IOException if the JSON string is invalid with respect to ProvisionVDBBySnapshotParameters
  */
  public static ProvisionVDBBySnapshotParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionVDBBySnapshotParameters.class);
  }

 /**
  * Convert an instance of ProvisionVDBBySnapshotParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

