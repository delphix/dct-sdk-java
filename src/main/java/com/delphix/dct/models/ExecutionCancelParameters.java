/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Parameters to cancel an execution.
 */
@ApiModel(description = "Parameters to cancel an execution.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class ExecutionCancelParameters {
  /**
   * The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued.
   */
  @JsonAdapter(ExpectedStatusEnum.Adapter.class)
  public enum ExpectedStatusEnum {
    QUEUED("QUEUED"),
    
    RUNNING("RUNNING");

    private String value;

    ExpectedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectedStatusEnum fromValue(String value) {
      for (ExpectedStatusEnum b : ExpectedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectedStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXPECTED_STATUS = "expected_status";
  @SerializedName(SERIALIZED_NAME_EXPECTED_STATUS)
  private ExpectedStatusEnum expectedStatus;


  public ExecutionCancelParameters expectedStatus(ExpectedStatusEnum expectedStatus) {
    
    this.expectedStatus = expectedStatus;
    return this;
  }

   /**
   * The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued.
   * @return expectedStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "QUEUED", value = "The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued.")

  public ExpectedStatusEnum getExpectedStatus() {
    return expectedStatus;
  }


  public void setExpectedStatus(ExpectedStatusEnum expectedStatus) {
    this.expectedStatus = expectedStatus;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionCancelParameters executionCancelParameters = (ExecutionCancelParameters) o;
    return Objects.equals(this.expectedStatus, executionCancelParameters.expectedStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionCancelParameters {\n");
    sb.append("    expectedStatus: ").append(toIndentedString(expectedStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

