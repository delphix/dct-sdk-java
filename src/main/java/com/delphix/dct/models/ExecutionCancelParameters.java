/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Parameters to cancel an execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ExecutionCancelParameters {
  /**
   * The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued (Standard Job only).
   */
  @JsonAdapter(ExpectedStatusEnum.Adapter.class)
  public enum ExpectedStatusEnum {
    QUEUED("QUEUED"),
    
    RUNNING("RUNNING");

    private String value;

    ExpectedStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpectedStatusEnum fromValue(String value) {
      for (ExpectedStatusEnum b : ExpectedStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpectedStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpectedStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpectedStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpectedStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpectedStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPECTED_STATUS = "expected_status";
  @SerializedName(SERIALIZED_NAME_EXPECTED_STATUS)
  private ExpectedStatusEnum expectedStatus;

  public ExecutionCancelParameters() {
  }

  public ExecutionCancelParameters expectedStatus(ExpectedStatusEnum expectedStatus) {
    this.expectedStatus = expectedStatus;
    return this;
  }

   /**
   * The expected status of the execution to cancel to prevent cancelling a queued job that has transitioned to a running state since the request was issued (Standard Job only).
   * @return expectedStatus
  **/
  @javax.annotation.Nullable
  public ExpectedStatusEnum getExpectedStatus() {
    return expectedStatus;
  }

  public void setExpectedStatus(ExpectedStatusEnum expectedStatus) {
    this.expectedStatus = expectedStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionCancelParameters executionCancelParameters = (ExecutionCancelParameters) o;
    return Objects.equals(this.expectedStatus, executionCancelParameters.expectedStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionCancelParameters {\n");
    sb.append("    expectedStatus: ").append(toIndentedString(expectedStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expected_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExecutionCancelParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionCancelParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionCancelParameters is not found in the empty JSON string", ExecutionCancelParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionCancelParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionCancelParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expected_status") != null && !jsonObj.get("expected_status").isJsonNull()) && !jsonObj.get("expected_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expected_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expected_status").toString()));
      }
      // validate the optional field `expected_status`
      if (jsonObj.get("expected_status") != null && !jsonObj.get("expected_status").isJsonNull()) {
        ExpectedStatusEnum.validateJsonElement(jsonObj.get("expected_status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionCancelParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionCancelParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionCancelParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionCancelParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionCancelParameters>() {
           @Override
           public void write(JsonWriter out, ExecutionCancelParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionCancelParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecutionCancelParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecutionCancelParameters
  * @throws IOException if the JSON string is invalid with respect to ExecutionCancelParameters
  */
  public static ExecutionCancelParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionCancelParameters.class);
  }

 /**
  * Convert an instance of ExecutionCancelParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

