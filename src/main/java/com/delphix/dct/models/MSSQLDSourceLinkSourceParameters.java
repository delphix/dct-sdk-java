/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.SourceOperation;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * MSSQLDSourceLinkSourceParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class MSSQLDSourceLinkSourceParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOG_SYNC_ENABLED = "log_sync_enabled";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_ENABLED)
  private Boolean logSyncEnabled = false;

  public static final String SERIALIZED_NAME_SYNC_POLICY_ID = "sync_policy_id";
  @SerializedName(SERIALIZED_NAME_SYNC_POLICY_ID)
  private String syncPolicyId;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_ID = "retention_policy_id";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_ID)
  private String retentionPolicyId;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_OPS_PRE_SYNC = "ops_pre_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_SYNC)
  private List<SourceOperation> opsPreSync;

  public static final String SERIALIZED_NAME_OPS_POST_SYNC = "ops_post_sync";
  @SerializedName(SERIALIZED_NAME_OPS_POST_SYNC)
  private List<SourceOperation> opsPostSync;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryption_key";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  /**
   * Determines how the Delphix Engine will take a backup: * &#x60;latest_backup&#x60; - Use the most recent backup. * &#x60;new_backup&#x60; - Delphix will take a new backup of your source database. * &#x60;specific_backup&#x60; - Use a specific backup. Using this option requires setting &#x60;ase_backup_files&#x60;. * &#x60;no_backup&#x60; - Use as input to sync MSSQL databases without a backup. Default is &#x60;new_backup&#x60;. 
   */
  @JsonAdapter(SyncStrategyEnum.Adapter.class)
  public enum SyncStrategyEnum {
    LATEST_BACKUP("latest_backup"),
    
    NEW_BACKUP("new_backup"),
    
    SPECIFIC_BACKUP("specific_backup"),
    
    NO_BACKUP("no_backup");

    private String value;

    SyncStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncStrategyEnum fromValue(String value) {
      for (SyncStrategyEnum b : SyncStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_STRATEGY = "sync_strategy";
  @SerializedName(SERIALIZED_NAME_SYNC_STRATEGY)
  private SyncStrategyEnum syncStrategy = SyncStrategyEnum.NEW_BACKUP;

  public static final String SERIALIZED_NAME_MSSQL_BACKUP_UUID = "mssql_backup_uuid";
  @SerializedName(SERIALIZED_NAME_MSSQL_BACKUP_UUID)
  private String mssqlBackupUuid;

  public static final String SERIALIZED_NAME_COMPRESSION_ENABLED = "compression_enabled";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_ENABLED)
  private Boolean compressionEnabled = false;

  /**
   * When using the &#x60;new_backup&#x60; sync_strategy for an MSSql Availability Group, determines the backup policy: * &#x60;primary&#x60; - Backups only go to the primary node. * &#x60;secondary_only&#x60; - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * &#x60;prefer_secondary&#x60; - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
   */
  @JsonAdapter(AvailabilityGroupBackupPolicyEnum.Adapter.class)
  public enum AvailabilityGroupBackupPolicyEnum {
    PRIMARY("primary"),
    
    SECONDARY_ONLY("secondary_only"),
    
    PREFER_SECONDARY("prefer_secondary");

    private String value;

    AvailabilityGroupBackupPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityGroupBackupPolicyEnum fromValue(String value) {
      for (AvailabilityGroupBackupPolicyEnum b : AvailabilityGroupBackupPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityGroupBackupPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityGroupBackupPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityGroupBackupPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityGroupBackupPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailabilityGroupBackupPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_GROUP_BACKUP_POLICY = "availability_group_backup_policy";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_GROUP_BACKUP_POLICY)
  private AvailabilityGroupBackupPolicyEnum availabilityGroupBackupPolicy = AvailabilityGroupBackupPolicyEnum.PRIMARY;

  public static final String SERIALIZED_NAME_SOURCE_HOST_USER = "source_host_user";
  @SerializedName(SERIALIZED_NAME_SOURCE_HOST_USER)
  private String sourceHostUser;

  public static final String SERIALIZED_NAME_PPT_REPOSITORY = "ppt_repository";
  @SerializedName(SERIALIZED_NAME_PPT_REPOSITORY)
  private String pptRepository;

  public static final String SERIALIZED_NAME_PPT_HOST_USER = "ppt_host_user";
  @SerializedName(SERIALIZED_NAME_PPT_HOST_USER)
  private String pptHostUser;

  public static final String SERIALIZED_NAME_STAGING_PRE_SCRIPT = "staging_pre_script";
  @SerializedName(SERIALIZED_NAME_STAGING_PRE_SCRIPT)
  private String stagingPreScript;

  public static final String SERIALIZED_NAME_STAGING_POST_SCRIPT = "staging_post_script";
  @SerializedName(SERIALIZED_NAME_STAGING_POST_SCRIPT)
  private String stagingPostScript;

  /**
   * MSSQL specific parameters for source based sync strategy.: * &#x60;external&#x60; - MSSQL specific parameters for externally managed source based sync strategy. * &#x60;delphix&#x60; - MSSQL specific parameters for delphix managed source based sync strategy. * &#x60;staging_push&#x60; - MSSQL specific parameters for staging push based sync strategy. 
   */
  @JsonAdapter(SyncStrategyManagedTypeEnum.Adapter.class)
  public enum SyncStrategyManagedTypeEnum {
    EXTERNAL("external"),
    
    DELPHIX("delphix"),
    
    STAGING_PUSH("staging_push");

    private String value;

    SyncStrategyManagedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncStrategyManagedTypeEnum fromValue(String value) {
      for (SyncStrategyManagedTypeEnum b : SyncStrategyManagedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncStrategyManagedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncStrategyManagedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncStrategyManagedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncStrategyManagedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncStrategyManagedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_STRATEGY_MANAGED_TYPE = "sync_strategy_managed_type";
  @SerializedName(SERIALIZED_NAME_SYNC_STRATEGY_MANAGED_TYPE)
  private SyncStrategyManagedTypeEnum syncStrategyManagedType = SyncStrategyManagedTypeEnum.EXTERNAL;

  public static final String SERIALIZED_NAME_MSSQL_USER_ENVIRONMENT_REFERENCE = "mssql_user_environment_reference";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_ENVIRONMENT_REFERENCE)
  private String mssqlUserEnvironmentReference;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_USERNAME = "mssql_user_domain_username";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_USERNAME)
  private String mssqlUserDomainUsername;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_PASSWORD = "mssql_user_domain_password";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_PASSWORD)
  private String mssqlUserDomainPassword;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_VAULT_USERNAME = "mssql_user_domain_vault_username";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_VAULT_USERNAME)
  private String mssqlUserDomainVaultUsername;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_VAULT = "mssql_user_domain_vault";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_VAULT)
  private String mssqlUserDomainVault;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_ENGINE = "mssql_user_domain_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_ENGINE)
  private String mssqlUserDomainHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_SECRET_PATH = "mssql_user_domain_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_SECRET_PATH)
  private String mssqlUserDomainHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_USERNAME_KEY = "mssql_user_domain_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_USERNAME_KEY)
  private String mssqlUserDomainHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_SECRET_KEY = "mssql_user_domain_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_HASHICORP_VAULT_SECRET_KEY)
  private String mssqlUserDomainHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_NAME = "mssql_user_domain_azure_vault_name";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_NAME)
  private String mssqlUserDomainAzureVaultName;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_USERNAME_KEY = "mssql_user_domain_azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_USERNAME_KEY)
  private String mssqlUserDomainAzureVaultUsernameKey;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_SECRET_KEY = "mssql_user_domain_azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_AZURE_VAULT_SECRET_KEY)
  private String mssqlUserDomainAzureVaultSecretKey;

  public static final String SERIALIZED_NAME_MSSQL_USER_DOMAIN_CYBERARK_VAULT_QUERY_STRING = "mssql_user_domain_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_MSSQL_USER_DOMAIN_CYBERARK_VAULT_QUERY_STRING)
  private String mssqlUserDomainCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_MSSQL_DATABASE_USERNAME = "mssql_database_username";
  @SerializedName(SERIALIZED_NAME_MSSQL_DATABASE_USERNAME)
  private String mssqlDatabaseUsername;

  public static final String SERIALIZED_NAME_MSSQL_DATABASE_PASSWORD = "mssql_database_password";
  @SerializedName(SERIALIZED_NAME_MSSQL_DATABASE_PASSWORD)
  private String mssqlDatabasePassword;

  public static final String SERIALIZED_NAME_DELPHIX_MANAGED_BACKUP_COMPRESSION_ENABLED = "delphix_managed_backup_compression_enabled";
  @SerializedName(SERIALIZED_NAME_DELPHIX_MANAGED_BACKUP_COMPRESSION_ENABLED)
  private Boolean delphixManagedBackupCompressionEnabled = false;

  /**
   * Specify which node of an availability group to run the copy-only full backup on: * &#x60;primary&#x60; - Backups only go to the primary node. * &#x60;secondary_only&#x60; - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * &#x60;prefer_secondary&#x60; - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
   */
  @JsonAdapter(DelphixManagedBackupPolicyEnum.Adapter.class)
  public enum DelphixManagedBackupPolicyEnum {
    PRIMARY("primary"),
    
    SECONDARY_ONLY("secondary_only"),
    
    PREFER_SECONDARY("prefer_secondary");

    private String value;

    DelphixManagedBackupPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DelphixManagedBackupPolicyEnum fromValue(String value) {
      for (DelphixManagedBackupPolicyEnum b : DelphixManagedBackupPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DelphixManagedBackupPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DelphixManagedBackupPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DelphixManagedBackupPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DelphixManagedBackupPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DelphixManagedBackupPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELPHIX_MANAGED_BACKUP_POLICY = "delphix_managed_backup_policy";
  @SerializedName(SERIALIZED_NAME_DELPHIX_MANAGED_BACKUP_POLICY)
  private DelphixManagedBackupPolicyEnum delphixManagedBackupPolicy = DelphixManagedBackupPolicyEnum.PRIMARY;

  /**
   * Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database
   */
  @JsonAdapter(ExternalManagedValidateSyncModeEnum.Adapter.class)
  public enum ExternalManagedValidateSyncModeEnum {
    TRANSACTION_LOG("TRANSACTION_LOG"),
    
    FULL_OR_DIFFERENTIAL("FULL_OR_DIFFERENTIAL"),
    
    FULL("FULL"),
    
    NONE("NONE");

    private String value;

    ExternalManagedValidateSyncModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalManagedValidateSyncModeEnum fromValue(String value) {
      for (ExternalManagedValidateSyncModeEnum b : ExternalManagedValidateSyncModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalManagedValidateSyncModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalManagedValidateSyncModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalManagedValidateSyncModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalManagedValidateSyncModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalManagedValidateSyncModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_MANAGED_VALIDATE_SYNC_MODE = "external_managed_validate_sync_mode";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MANAGED_VALIDATE_SYNC_MODE)
  private ExternalManagedValidateSyncModeEnum externalManagedValidateSyncMode = ExternalManagedValidateSyncModeEnum.TRANSACTION_LOG;

  public static final String SERIALIZED_NAME_EXTERNAL_MANAGED_SHARED_BACKUP_LOCATIONS = "external_managed_shared_backup_locations";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MANAGED_SHARED_BACKUP_LOCATIONS)
  private List<String> externalManagedSharedBackupLocations;

  public static final String SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_MASTER_NAME = "external_netbackup_config_master_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_MASTER_NAME)
  private String externalNetbackupConfigMasterName;

  public static final String SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_SOURCE_CLIENT_NAME = "external_netbackup_config_source_client_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_SOURCE_CLIENT_NAME)
  private String externalNetbackupConfigSourceClientName;

  public static final String SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_PARAMS = "external_netbackup_config_params";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_PARAMS)
  private Map<String, Object> externalNetbackupConfigParams = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_TEMPLATES = "external_netbackup_config_templates";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_NETBACKUP_CONFIG_TEMPLATES)
  private String externalNetbackupConfigTemplates;

  public static final String SERIALIZED_NAME_EXTERNAL_COMMSERVE_HOST_NAME = "external_commserve_host_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_COMMSERVE_HOST_NAME)
  private String externalCommserveHostName;

  public static final String SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_SOURCE_CLIENT_NAME = "external_commvault_config_source_client_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_SOURCE_CLIENT_NAME)
  private String externalCommvaultConfigSourceClientName;

  public static final String SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_STAGING_CLIENT_NAME = "external_commvault_config_staging_client_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_STAGING_CLIENT_NAME)
  private String externalCommvaultConfigStagingClientName;

  public static final String SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_PARAMS = "external_commvault_config_params";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_PARAMS)
  private Map<String, Object> externalCommvaultConfigParams = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_TEMPLATES = "external_commvault_config_templates";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_COMMVAULT_CONFIG_TEMPLATES)
  private String externalCommvaultConfigTemplates;

  public MSSQLDSourceLinkSourceParameters() {
  }

  public MSSQLDSourceLinkSourceParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the dSource to be created.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MSSQLDSourceLinkSourceParameters sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Id of the source to link.
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public MSSQLDSourceLinkSourceParameters groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Id of the dataset group where this dSource should belong to.
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public MSSQLDSourceLinkSourceParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The notes/description for the dSource.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MSSQLDSourceLinkSourceParameters logSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
    return this;
  }

   /**
   * True if LogSync should run for this database.
   * @return logSyncEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getLogSyncEnabled() {
    return logSyncEnabled;
  }

  public void setLogSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
  }


  public MSSQLDSourceLinkSourceParameters syncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
    return this;
  }

   /**
   * The ID of the SnapSync policy for the dSource.
   * @return syncPolicyId
  **/
  @javax.annotation.Nullable
  public String getSyncPolicyId() {
    return syncPolicyId;
  }

  public void setSyncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
  }


  public MSSQLDSourceLinkSourceParameters retentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
    return this;
  }

   /**
   * The ID of the Retention policy for the dSource.
   * @return retentionPolicyId
  **/
  @javax.annotation.Nullable
  public String getRetentionPolicyId() {
    return retentionPolicyId;
  }

  public void setRetentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
  }


  public MSSQLDSourceLinkSourceParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this reporting schedule must be configured as owner of the reporting schedule.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }


  public MSSQLDSourceLinkSourceParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for dSource.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public MSSQLDSourceLinkSourceParameters opsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters addOpsPreSyncItem(SourceOperation opsPreSyncItem) {
    if (this.opsPreSync == null) {
      this.opsPreSync = new ArrayList<>();
    }
    this.opsPreSync.add(opsPreSyncItem);
    return this;
  }

   /**
   * Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
   * @return opsPreSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPreSync() {
    return opsPreSync;
  }

  public void setOpsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
  }


  public MSSQLDSourceLinkSourceParameters opsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters addOpsPostSyncItem(SourceOperation opsPostSyncItem) {
    if (this.opsPostSync == null) {
      this.opsPostSync = new ArrayList<>();
    }
    this.opsPostSync.add(opsPostSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource.
   * @return opsPostSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPostSync() {
    return opsPostSync;
  }

  public void setOpsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
  }


  public MSSQLDSourceLinkSourceParameters encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

   /**
   * The encryption key to use when restoring encrypted backups.
   * @return encryptionKey
  **/
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public MSSQLDSourceLinkSourceParameters syncStrategy(SyncStrategyEnum syncStrategy) {
    this.syncStrategy = syncStrategy;
    return this;
  }

   /**
   * Determines how the Delphix Engine will take a backup: * &#x60;latest_backup&#x60; - Use the most recent backup. * &#x60;new_backup&#x60; - Delphix will take a new backup of your source database. * &#x60;specific_backup&#x60; - Use a specific backup. Using this option requires setting &#x60;ase_backup_files&#x60;. * &#x60;no_backup&#x60; - Use as input to sync MSSQL databases without a backup. Default is &#x60;new_backup&#x60;. 
   * @return syncStrategy
  **/
  @javax.annotation.Nullable
  public SyncStrategyEnum getSyncStrategy() {
    return syncStrategy;
  }

  public void setSyncStrategy(SyncStrategyEnum syncStrategy) {
    this.syncStrategy = syncStrategy;
  }


  public MSSQLDSourceLinkSourceParameters mssqlBackupUuid(String mssqlBackupUuid) {
    this.mssqlBackupUuid = mssqlBackupUuid;
    return this;
  }

   /**
   * When using the &#x60;specific_backup&#x60; sync_strategy, determines the Backup Set UUID.
   * @return mssqlBackupUuid
  **/
  @javax.annotation.Nullable
  public String getMssqlBackupUuid() {
    return mssqlBackupUuid;
  }

  public void setMssqlBackupUuid(String mssqlBackupUuid) {
    this.mssqlBackupUuid = mssqlBackupUuid;
  }


  public MSSQLDSourceLinkSourceParameters compressionEnabled(Boolean compressionEnabled) {
    this.compressionEnabled = compressionEnabled;
    return this;
  }

   /**
   * When using the &#x60;new_backup&#x60; sync_strategy, determines if compression must be enabled. Defaults to the configuration of the ingestion strategy configured on the Delphix Engine for this dSource.
   * @return compressionEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getCompressionEnabled() {
    return compressionEnabled;
  }

  public void setCompressionEnabled(Boolean compressionEnabled) {
    this.compressionEnabled = compressionEnabled;
  }


  public MSSQLDSourceLinkSourceParameters availabilityGroupBackupPolicy(AvailabilityGroupBackupPolicyEnum availabilityGroupBackupPolicy) {
    this.availabilityGroupBackupPolicy = availabilityGroupBackupPolicy;
    return this;
  }

   /**
   * When using the &#x60;new_backup&#x60; sync_strategy for an MSSql Availability Group, determines the backup policy: * &#x60;primary&#x60; - Backups only go to the primary node. * &#x60;secondary_only&#x60; - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * &#x60;prefer_secondary&#x60; - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
   * @return availabilityGroupBackupPolicy
  **/
  @javax.annotation.Nullable
  public AvailabilityGroupBackupPolicyEnum getAvailabilityGroupBackupPolicy() {
    return availabilityGroupBackupPolicy;
  }

  public void setAvailabilityGroupBackupPolicy(AvailabilityGroupBackupPolicyEnum availabilityGroupBackupPolicy) {
    this.availabilityGroupBackupPolicy = availabilityGroupBackupPolicy;
  }


  public MSSQLDSourceLinkSourceParameters sourceHostUser(String sourceHostUser) {
    this.sourceHostUser = sourceHostUser;
    return this;
  }

   /**
   * ID or user reference of the host OS user to use for linking.
   * @return sourceHostUser
  **/
  @javax.annotation.Nullable
  public String getSourceHostUser() {
    return sourceHostUser;
  }

  public void setSourceHostUser(String sourceHostUser) {
    this.sourceHostUser = sourceHostUser;
  }


  public MSSQLDSourceLinkSourceParameters pptRepository(String pptRepository) {
    this.pptRepository = pptRepository;
    return this;
  }

   /**
   * Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning.
   * @return pptRepository
  **/
  @javax.annotation.Nullable
  public String getPptRepository() {
    return pptRepository;
  }

  public void setPptRepository(String pptRepository) {
    this.pptRepository = pptRepository;
  }


  public MSSQLDSourceLinkSourceParameters pptHostUser(String pptHostUser) {
    this.pptHostUser = pptHostUser;
    return this;
  }

   /**
   * Reference of the host OS user on the PPT host to use for linking.
   * @return pptHostUser
  **/
  @javax.annotation.Nullable
  public String getPptHostUser() {
    return pptHostUser;
  }

  public void setPptHostUser(String pptHostUser) {
    this.pptHostUser = pptHostUser;
  }


  public MSSQLDSourceLinkSourceParameters stagingPreScript(String stagingPreScript) {
    this.stagingPreScript = stagingPreScript;
    return this;
  }

   /**
   * A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning.
   * @return stagingPreScript
  **/
  @javax.annotation.Nullable
  public String getStagingPreScript() {
    return stagingPreScript;
  }

  public void setStagingPreScript(String stagingPreScript) {
    this.stagingPreScript = stagingPreScript;
  }


  public MSSQLDSourceLinkSourceParameters stagingPostScript(String stagingPostScript) {
    this.stagingPostScript = stagingPostScript;
    return this;
  }

   /**
   * A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning.
   * @return stagingPostScript
  **/
  @javax.annotation.Nullable
  public String getStagingPostScript() {
    return stagingPostScript;
  }

  public void setStagingPostScript(String stagingPostScript) {
    this.stagingPostScript = stagingPostScript;
  }


  public MSSQLDSourceLinkSourceParameters syncStrategyManagedType(SyncStrategyManagedTypeEnum syncStrategyManagedType) {
    this.syncStrategyManagedType = syncStrategyManagedType;
    return this;
  }

   /**
   * MSSQL specific parameters for source based sync strategy.: * &#x60;external&#x60; - MSSQL specific parameters for externally managed source based sync strategy. * &#x60;delphix&#x60; - MSSQL specific parameters for delphix managed source based sync strategy. * &#x60;staging_push&#x60; - MSSQL specific parameters for staging push based sync strategy. 
   * @return syncStrategyManagedType
  **/
  @javax.annotation.Nullable
  public SyncStrategyManagedTypeEnum getSyncStrategyManagedType() {
    return syncStrategyManagedType;
  }

  public void setSyncStrategyManagedType(SyncStrategyManagedTypeEnum syncStrategyManagedType) {
    this.syncStrategyManagedType = syncStrategyManagedType;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserEnvironmentReference(String mssqlUserEnvironmentReference) {
    this.mssqlUserEnvironmentReference = mssqlUserEnvironmentReference;
    return this;
  }

   /**
   * Reference to the source environment user to use for linking.
   * @return mssqlUserEnvironmentReference
  **/
  @javax.annotation.Nullable
  public String getMssqlUserEnvironmentReference() {
    return mssqlUserEnvironmentReference;
  }

  public void setMssqlUserEnvironmentReference(String mssqlUserEnvironmentReference) {
    this.mssqlUserEnvironmentReference = mssqlUserEnvironmentReference;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainUsername(String mssqlUserDomainUsername) {
    this.mssqlUserDomainUsername = mssqlUserDomainUsername;
    return this;
  }

   /**
   * The username for the source DB user.
   * @return mssqlUserDomainUsername
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainUsername() {
    return mssqlUserDomainUsername;
  }

  public void setMssqlUserDomainUsername(String mssqlUserDomainUsername) {
    this.mssqlUserDomainUsername = mssqlUserDomainUsername;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainPassword(String mssqlUserDomainPassword) {
    this.mssqlUserDomainPassword = mssqlUserDomainPassword;
    return this;
  }

   /**
   * Password for the database user.
   * @return mssqlUserDomainPassword
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainPassword() {
    return mssqlUserDomainPassword;
  }

  public void setMssqlUserDomainPassword(String mssqlUserDomainPassword) {
    this.mssqlUserDomainPassword = mssqlUserDomainPassword;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainVaultUsername(String mssqlUserDomainVaultUsername) {
    this.mssqlUserDomainVaultUsername = mssqlUserDomainVaultUsername;
    return this;
  }

   /**
   * Delphix display name for the vault user.
   * @return mssqlUserDomainVaultUsername
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainVaultUsername() {
    return mssqlUserDomainVaultUsername;
  }

  public void setMssqlUserDomainVaultUsername(String mssqlUserDomainVaultUsername) {
    this.mssqlUserDomainVaultUsername = mssqlUserDomainVaultUsername;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainVault(String mssqlUserDomainVault) {
    this.mssqlUserDomainVault = mssqlUserDomainVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the database credentials.
   * @return mssqlUserDomainVault
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainVault() {
    return mssqlUserDomainVault;
  }

  public void setMssqlUserDomainVault(String mssqlUserDomainVault) {
    this.mssqlUserDomainVault = mssqlUserDomainVault;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainHashicorpVaultEngine(String mssqlUserDomainHashicorpVaultEngine) {
    this.mssqlUserDomainHashicorpVaultEngine = mssqlUserDomainHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return mssqlUserDomainHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainHashicorpVaultEngine() {
    return mssqlUserDomainHashicorpVaultEngine;
  }

  public void setMssqlUserDomainHashicorpVaultEngine(String mssqlUserDomainHashicorpVaultEngine) {
    this.mssqlUserDomainHashicorpVaultEngine = mssqlUserDomainHashicorpVaultEngine;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainHashicorpVaultSecretPath(String mssqlUserDomainHashicorpVaultSecretPath) {
    this.mssqlUserDomainHashicorpVaultSecretPath = mssqlUserDomainHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return mssqlUserDomainHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainHashicorpVaultSecretPath() {
    return mssqlUserDomainHashicorpVaultSecretPath;
  }

  public void setMssqlUserDomainHashicorpVaultSecretPath(String mssqlUserDomainHashicorpVaultSecretPath) {
    this.mssqlUserDomainHashicorpVaultSecretPath = mssqlUserDomainHashicorpVaultSecretPath;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainHashicorpVaultUsernameKey(String mssqlUserDomainHashicorpVaultUsernameKey) {
    this.mssqlUserDomainHashicorpVaultUsernameKey = mssqlUserDomainHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Hashicorp vault key for the username in the key-value store.
   * @return mssqlUserDomainHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainHashicorpVaultUsernameKey() {
    return mssqlUserDomainHashicorpVaultUsernameKey;
  }

  public void setMssqlUserDomainHashicorpVaultUsernameKey(String mssqlUserDomainHashicorpVaultUsernameKey) {
    this.mssqlUserDomainHashicorpVaultUsernameKey = mssqlUserDomainHashicorpVaultUsernameKey;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainHashicorpVaultSecretKey(String mssqlUserDomainHashicorpVaultSecretKey) {
    this.mssqlUserDomainHashicorpVaultSecretKey = mssqlUserDomainHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Hashicorp vault key for the password in the key-value store.
   * @return mssqlUserDomainHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainHashicorpVaultSecretKey() {
    return mssqlUserDomainHashicorpVaultSecretKey;
  }

  public void setMssqlUserDomainHashicorpVaultSecretKey(String mssqlUserDomainHashicorpVaultSecretKey) {
    this.mssqlUserDomainHashicorpVaultSecretKey = mssqlUserDomainHashicorpVaultSecretKey;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainAzureVaultName(String mssqlUserDomainAzureVaultName) {
    this.mssqlUserDomainAzureVaultName = mssqlUserDomainAzureVaultName;
    return this;
  }

   /**
   * Azure key vault name.
   * @return mssqlUserDomainAzureVaultName
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainAzureVaultName() {
    return mssqlUserDomainAzureVaultName;
  }

  public void setMssqlUserDomainAzureVaultName(String mssqlUserDomainAzureVaultName) {
    this.mssqlUserDomainAzureVaultName = mssqlUserDomainAzureVaultName;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainAzureVaultUsernameKey(String mssqlUserDomainAzureVaultUsernameKey) {
    this.mssqlUserDomainAzureVaultUsernameKey = mssqlUserDomainAzureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store.
   * @return mssqlUserDomainAzureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainAzureVaultUsernameKey() {
    return mssqlUserDomainAzureVaultUsernameKey;
  }

  public void setMssqlUserDomainAzureVaultUsernameKey(String mssqlUserDomainAzureVaultUsernameKey) {
    this.mssqlUserDomainAzureVaultUsernameKey = mssqlUserDomainAzureVaultUsernameKey;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainAzureVaultSecretKey(String mssqlUserDomainAzureVaultSecretKey) {
    this.mssqlUserDomainAzureVaultSecretKey = mssqlUserDomainAzureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store.
   * @return mssqlUserDomainAzureVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainAzureVaultSecretKey() {
    return mssqlUserDomainAzureVaultSecretKey;
  }

  public void setMssqlUserDomainAzureVaultSecretKey(String mssqlUserDomainAzureVaultSecretKey) {
    this.mssqlUserDomainAzureVaultSecretKey = mssqlUserDomainAzureVaultSecretKey;
  }


  public MSSQLDSourceLinkSourceParameters mssqlUserDomainCyberarkVaultQueryString(String mssqlUserDomainCyberarkVaultQueryString) {
    this.mssqlUserDomainCyberarkVaultQueryString = mssqlUserDomainCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return mssqlUserDomainCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getMssqlUserDomainCyberarkVaultQueryString() {
    return mssqlUserDomainCyberarkVaultQueryString;
  }

  public void setMssqlUserDomainCyberarkVaultQueryString(String mssqlUserDomainCyberarkVaultQueryString) {
    this.mssqlUserDomainCyberarkVaultQueryString = mssqlUserDomainCyberarkVaultQueryString;
  }


  public MSSQLDSourceLinkSourceParameters mssqlDatabaseUsername(String mssqlDatabaseUsername) {
    this.mssqlDatabaseUsername = mssqlDatabaseUsername;
    return this;
  }

   /**
   * The username for the source DB user.
   * @return mssqlDatabaseUsername
  **/
  @javax.annotation.Nullable
  public String getMssqlDatabaseUsername() {
    return mssqlDatabaseUsername;
  }

  public void setMssqlDatabaseUsername(String mssqlDatabaseUsername) {
    this.mssqlDatabaseUsername = mssqlDatabaseUsername;
  }


  public MSSQLDSourceLinkSourceParameters mssqlDatabasePassword(String mssqlDatabasePassword) {
    this.mssqlDatabasePassword = mssqlDatabasePassword;
    return this;
  }

   /**
   * Password for the database user.
   * @return mssqlDatabasePassword
  **/
  @javax.annotation.Nullable
  public String getMssqlDatabasePassword() {
    return mssqlDatabasePassword;
  }

  public void setMssqlDatabasePassword(String mssqlDatabasePassword) {
    this.mssqlDatabasePassword = mssqlDatabasePassword;
  }


  public MSSQLDSourceLinkSourceParameters delphixManagedBackupCompressionEnabled(Boolean delphixManagedBackupCompressionEnabled) {
    this.delphixManagedBackupCompressionEnabled = delphixManagedBackupCompressionEnabled;
    return this;
  }

   /**
   * Specify whether the backups taken should be compressed or uncompressed when Delphix managed option is selected.
   * @return delphixManagedBackupCompressionEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getDelphixManagedBackupCompressionEnabled() {
    return delphixManagedBackupCompressionEnabled;
  }

  public void setDelphixManagedBackupCompressionEnabled(Boolean delphixManagedBackupCompressionEnabled) {
    this.delphixManagedBackupCompressionEnabled = delphixManagedBackupCompressionEnabled;
  }


  public MSSQLDSourceLinkSourceParameters delphixManagedBackupPolicy(DelphixManagedBackupPolicyEnum delphixManagedBackupPolicy) {
    this.delphixManagedBackupPolicy = delphixManagedBackupPolicy;
    return this;
  }

   /**
   * Specify which node of an availability group to run the copy-only full backup on: * &#x60;primary&#x60; - Backups only go to the primary node. * &#x60;secondary_only&#x60; - Backups only go to secondary nodes. If secondary nodes are down, backups will fail. * &#x60;prefer_secondary&#x60; - Backups go to secondary nodes, but if secondary nodes are down, backups will go to the primary node. 
   * @return delphixManagedBackupPolicy
  **/
  @javax.annotation.Nullable
  public DelphixManagedBackupPolicyEnum getDelphixManagedBackupPolicy() {
    return delphixManagedBackupPolicy;
  }

  public void setDelphixManagedBackupPolicy(DelphixManagedBackupPolicyEnum delphixManagedBackupPolicy) {
    this.delphixManagedBackupPolicy = delphixManagedBackupPolicy;
  }


  public MSSQLDSourceLinkSourceParameters externalManagedValidateSyncMode(ExternalManagedValidateSyncModeEnum externalManagedValidateSyncMode) {
    this.externalManagedValidateSyncMode = externalManagedValidateSyncMode;
    return this;
  }

   /**
   * Specifies the backup types ValidatedSync will use to synchronize the dSource with the source database
   * @return externalManagedValidateSyncMode
  **/
  @javax.annotation.Nullable
  public ExternalManagedValidateSyncModeEnum getExternalManagedValidateSyncMode() {
    return externalManagedValidateSyncMode;
  }

  public void setExternalManagedValidateSyncMode(ExternalManagedValidateSyncModeEnum externalManagedValidateSyncMode) {
    this.externalManagedValidateSyncMode = externalManagedValidateSyncMode;
  }


  public MSSQLDSourceLinkSourceParameters externalManagedSharedBackupLocations(List<String> externalManagedSharedBackupLocations) {
    this.externalManagedSharedBackupLocations = externalManagedSharedBackupLocations;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters addExternalManagedSharedBackupLocationsItem(String externalManagedSharedBackupLocationsItem) {
    if (this.externalManagedSharedBackupLocations == null) {
      this.externalManagedSharedBackupLocations = new ArrayList<>();
    }
    this.externalManagedSharedBackupLocations.add(externalManagedSharedBackupLocationsItem);
    return this;
  }

   /**
   * Shared source database backup locations.
   * @return externalManagedSharedBackupLocations
  **/
  @javax.annotation.Nullable
  public List<String> getExternalManagedSharedBackupLocations() {
    return externalManagedSharedBackupLocations;
  }

  public void setExternalManagedSharedBackupLocations(List<String> externalManagedSharedBackupLocations) {
    this.externalManagedSharedBackupLocations = externalManagedSharedBackupLocations;
  }


  public MSSQLDSourceLinkSourceParameters externalNetbackupConfigMasterName(String externalNetbackupConfigMasterName) {
    this.externalNetbackupConfigMasterName = externalNetbackupConfigMasterName;
    return this;
  }

   /**
   * The master server name of this NetBackup configuration.
   * @return externalNetbackupConfigMasterName
  **/
  @javax.annotation.Nullable
  public String getExternalNetbackupConfigMasterName() {
    return externalNetbackupConfigMasterName;
  }

  public void setExternalNetbackupConfigMasterName(String externalNetbackupConfigMasterName) {
    this.externalNetbackupConfigMasterName = externalNetbackupConfigMasterName;
  }


  public MSSQLDSourceLinkSourceParameters externalNetbackupConfigSourceClientName(String externalNetbackupConfigSourceClientName) {
    this.externalNetbackupConfigSourceClientName = externalNetbackupConfigSourceClientName;
    return this;
  }

   /**
   * The source&#39;s client server name of this NetBackup configuration.
   * @return externalNetbackupConfigSourceClientName
  **/
  @javax.annotation.Nullable
  public String getExternalNetbackupConfigSourceClientName() {
    return externalNetbackupConfigSourceClientName;
  }

  public void setExternalNetbackupConfigSourceClientName(String externalNetbackupConfigSourceClientName) {
    this.externalNetbackupConfigSourceClientName = externalNetbackupConfigSourceClientName;
  }


  public MSSQLDSourceLinkSourceParameters externalNetbackupConfigParams(Map<String, Object> externalNetbackupConfigParams) {
    this.externalNetbackupConfigParams = externalNetbackupConfigParams;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters putExternalNetbackupConfigParamsItem(String key, Object externalNetbackupConfigParamsItem) {
    if (this.externalNetbackupConfigParams == null) {
      this.externalNetbackupConfigParams = new HashMap<>();
    }
    this.externalNetbackupConfigParams.put(key, externalNetbackupConfigParamsItem);
    return this;
  }

   /**
   * NetBackup configuration parameter overrides.
   * @return externalNetbackupConfigParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getExternalNetbackupConfigParams() {
    return externalNetbackupConfigParams;
  }

  public void setExternalNetbackupConfigParams(Map<String, Object> externalNetbackupConfigParams) {
    this.externalNetbackupConfigParams = externalNetbackupConfigParams;
  }


  public MSSQLDSourceLinkSourceParameters externalNetbackupConfigTemplates(String externalNetbackupConfigTemplates) {
    this.externalNetbackupConfigTemplates = externalNetbackupConfigTemplates;
    return this;
  }

   /**
   * Optional config template selection for NetBackup configurations. If set, external_netbackup_config_params will be ignored.
   * @return externalNetbackupConfigTemplates
  **/
  @javax.annotation.Nullable
  public String getExternalNetbackupConfigTemplates() {
    return externalNetbackupConfigTemplates;
  }

  public void setExternalNetbackupConfigTemplates(String externalNetbackupConfigTemplates) {
    this.externalNetbackupConfigTemplates = externalNetbackupConfigTemplates;
  }


  public MSSQLDSourceLinkSourceParameters externalCommserveHostName(String externalCommserveHostName) {
    this.externalCommserveHostName = externalCommserveHostName;
    return this;
  }

   /**
   * The commserve host name of this Commvault configuration.
   * @return externalCommserveHostName
  **/
  @javax.annotation.Nullable
  public String getExternalCommserveHostName() {
    return externalCommserveHostName;
  }

  public void setExternalCommserveHostName(String externalCommserveHostName) {
    this.externalCommserveHostName = externalCommserveHostName;
  }


  public MSSQLDSourceLinkSourceParameters externalCommvaultConfigSourceClientName(String externalCommvaultConfigSourceClientName) {
    this.externalCommvaultConfigSourceClientName = externalCommvaultConfigSourceClientName;
    return this;
  }

   /**
   * The source client name of this Commvault configuration.
   * @return externalCommvaultConfigSourceClientName
  **/
  @javax.annotation.Nullable
  public String getExternalCommvaultConfigSourceClientName() {
    return externalCommvaultConfigSourceClientName;
  }

  public void setExternalCommvaultConfigSourceClientName(String externalCommvaultConfigSourceClientName) {
    this.externalCommvaultConfigSourceClientName = externalCommvaultConfigSourceClientName;
  }


  public MSSQLDSourceLinkSourceParameters externalCommvaultConfigStagingClientName(String externalCommvaultConfigStagingClientName) {
    this.externalCommvaultConfigStagingClientName = externalCommvaultConfigStagingClientName;
    return this;
  }

   /**
   * The staging client name of this Commvault configuration.
   * @return externalCommvaultConfigStagingClientName
  **/
  @javax.annotation.Nullable
  public String getExternalCommvaultConfigStagingClientName() {
    return externalCommvaultConfigStagingClientName;
  }

  public void setExternalCommvaultConfigStagingClientName(String externalCommvaultConfigStagingClientName) {
    this.externalCommvaultConfigStagingClientName = externalCommvaultConfigStagingClientName;
  }


  public MSSQLDSourceLinkSourceParameters externalCommvaultConfigParams(Map<String, Object> externalCommvaultConfigParams) {
    this.externalCommvaultConfigParams = externalCommvaultConfigParams;
    return this;
  }

  public MSSQLDSourceLinkSourceParameters putExternalCommvaultConfigParamsItem(String key, Object externalCommvaultConfigParamsItem) {
    if (this.externalCommvaultConfigParams == null) {
      this.externalCommvaultConfigParams = new HashMap<>();
    }
    this.externalCommvaultConfigParams.put(key, externalCommvaultConfigParamsItem);
    return this;
  }

   /**
   * Commvault configuration parameter overrides.
   * @return externalCommvaultConfigParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getExternalCommvaultConfigParams() {
    return externalCommvaultConfigParams;
  }

  public void setExternalCommvaultConfigParams(Map<String, Object> externalCommvaultConfigParams) {
    this.externalCommvaultConfigParams = externalCommvaultConfigParams;
  }


  public MSSQLDSourceLinkSourceParameters externalCommvaultConfigTemplates(String externalCommvaultConfigTemplates) {
    this.externalCommvaultConfigTemplates = externalCommvaultConfigTemplates;
    return this;
  }

   /**
   * Optional config template selection for Commvault configurations. If set, configParams will be ignored.
   * @return externalCommvaultConfigTemplates
  **/
  @javax.annotation.Nullable
  public String getExternalCommvaultConfigTemplates() {
    return externalCommvaultConfigTemplates;
  }

  public void setExternalCommvaultConfigTemplates(String externalCommvaultConfigTemplates) {
    this.externalCommvaultConfigTemplates = externalCommvaultConfigTemplates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MSSQLDSourceLinkSourceParameters msSQLDSourceLinkSourceParameters = (MSSQLDSourceLinkSourceParameters) o;
    return Objects.equals(this.name, msSQLDSourceLinkSourceParameters.name) &&
        Objects.equals(this.sourceId, msSQLDSourceLinkSourceParameters.sourceId) &&
        Objects.equals(this.groupId, msSQLDSourceLinkSourceParameters.groupId) &&
        Objects.equals(this.description, msSQLDSourceLinkSourceParameters.description) &&
        Objects.equals(this.logSyncEnabled, msSQLDSourceLinkSourceParameters.logSyncEnabled) &&
        Objects.equals(this.syncPolicyId, msSQLDSourceLinkSourceParameters.syncPolicyId) &&
        Objects.equals(this.retentionPolicyId, msSQLDSourceLinkSourceParameters.retentionPolicyId) &&
        Objects.equals(this.makeCurrentAccountOwner, msSQLDSourceLinkSourceParameters.makeCurrentAccountOwner) &&
        Objects.equals(this.tags, msSQLDSourceLinkSourceParameters.tags) &&
        Objects.equals(this.opsPreSync, msSQLDSourceLinkSourceParameters.opsPreSync) &&
        Objects.equals(this.opsPostSync, msSQLDSourceLinkSourceParameters.opsPostSync) &&
        Objects.equals(this.encryptionKey, msSQLDSourceLinkSourceParameters.encryptionKey) &&
        Objects.equals(this.syncStrategy, msSQLDSourceLinkSourceParameters.syncStrategy) &&
        Objects.equals(this.mssqlBackupUuid, msSQLDSourceLinkSourceParameters.mssqlBackupUuid) &&
        Objects.equals(this.compressionEnabled, msSQLDSourceLinkSourceParameters.compressionEnabled) &&
        Objects.equals(this.availabilityGroupBackupPolicy, msSQLDSourceLinkSourceParameters.availabilityGroupBackupPolicy) &&
        Objects.equals(this.sourceHostUser, msSQLDSourceLinkSourceParameters.sourceHostUser) &&
        Objects.equals(this.pptRepository, msSQLDSourceLinkSourceParameters.pptRepository) &&
        Objects.equals(this.pptHostUser, msSQLDSourceLinkSourceParameters.pptHostUser) &&
        Objects.equals(this.stagingPreScript, msSQLDSourceLinkSourceParameters.stagingPreScript) &&
        Objects.equals(this.stagingPostScript, msSQLDSourceLinkSourceParameters.stagingPostScript) &&
        Objects.equals(this.syncStrategyManagedType, msSQLDSourceLinkSourceParameters.syncStrategyManagedType) &&
        Objects.equals(this.mssqlUserEnvironmentReference, msSQLDSourceLinkSourceParameters.mssqlUserEnvironmentReference) &&
        Objects.equals(this.mssqlUserDomainUsername, msSQLDSourceLinkSourceParameters.mssqlUserDomainUsername) &&
        Objects.equals(this.mssqlUserDomainPassword, msSQLDSourceLinkSourceParameters.mssqlUserDomainPassword) &&
        Objects.equals(this.mssqlUserDomainVaultUsername, msSQLDSourceLinkSourceParameters.mssqlUserDomainVaultUsername) &&
        Objects.equals(this.mssqlUserDomainVault, msSQLDSourceLinkSourceParameters.mssqlUserDomainVault) &&
        Objects.equals(this.mssqlUserDomainHashicorpVaultEngine, msSQLDSourceLinkSourceParameters.mssqlUserDomainHashicorpVaultEngine) &&
        Objects.equals(this.mssqlUserDomainHashicorpVaultSecretPath, msSQLDSourceLinkSourceParameters.mssqlUserDomainHashicorpVaultSecretPath) &&
        Objects.equals(this.mssqlUserDomainHashicorpVaultUsernameKey, msSQLDSourceLinkSourceParameters.mssqlUserDomainHashicorpVaultUsernameKey) &&
        Objects.equals(this.mssqlUserDomainHashicorpVaultSecretKey, msSQLDSourceLinkSourceParameters.mssqlUserDomainHashicorpVaultSecretKey) &&
        Objects.equals(this.mssqlUserDomainAzureVaultName, msSQLDSourceLinkSourceParameters.mssqlUserDomainAzureVaultName) &&
        Objects.equals(this.mssqlUserDomainAzureVaultUsernameKey, msSQLDSourceLinkSourceParameters.mssqlUserDomainAzureVaultUsernameKey) &&
        Objects.equals(this.mssqlUserDomainAzureVaultSecretKey, msSQLDSourceLinkSourceParameters.mssqlUserDomainAzureVaultSecretKey) &&
        Objects.equals(this.mssqlUserDomainCyberarkVaultQueryString, msSQLDSourceLinkSourceParameters.mssqlUserDomainCyberarkVaultQueryString) &&
        Objects.equals(this.mssqlDatabaseUsername, msSQLDSourceLinkSourceParameters.mssqlDatabaseUsername) &&
        Objects.equals(this.mssqlDatabasePassword, msSQLDSourceLinkSourceParameters.mssqlDatabasePassword) &&
        Objects.equals(this.delphixManagedBackupCompressionEnabled, msSQLDSourceLinkSourceParameters.delphixManagedBackupCompressionEnabled) &&
        Objects.equals(this.delphixManagedBackupPolicy, msSQLDSourceLinkSourceParameters.delphixManagedBackupPolicy) &&
        Objects.equals(this.externalManagedValidateSyncMode, msSQLDSourceLinkSourceParameters.externalManagedValidateSyncMode) &&
        Objects.equals(this.externalManagedSharedBackupLocations, msSQLDSourceLinkSourceParameters.externalManagedSharedBackupLocations) &&
        Objects.equals(this.externalNetbackupConfigMasterName, msSQLDSourceLinkSourceParameters.externalNetbackupConfigMasterName) &&
        Objects.equals(this.externalNetbackupConfigSourceClientName, msSQLDSourceLinkSourceParameters.externalNetbackupConfigSourceClientName) &&
        Objects.equals(this.externalNetbackupConfigParams, msSQLDSourceLinkSourceParameters.externalNetbackupConfigParams) &&
        Objects.equals(this.externalNetbackupConfigTemplates, msSQLDSourceLinkSourceParameters.externalNetbackupConfigTemplates) &&
        Objects.equals(this.externalCommserveHostName, msSQLDSourceLinkSourceParameters.externalCommserveHostName) &&
        Objects.equals(this.externalCommvaultConfigSourceClientName, msSQLDSourceLinkSourceParameters.externalCommvaultConfigSourceClientName) &&
        Objects.equals(this.externalCommvaultConfigStagingClientName, msSQLDSourceLinkSourceParameters.externalCommvaultConfigStagingClientName) &&
        Objects.equals(this.externalCommvaultConfigParams, msSQLDSourceLinkSourceParameters.externalCommvaultConfigParams) &&
        Objects.equals(this.externalCommvaultConfigTemplates, msSQLDSourceLinkSourceParameters.externalCommvaultConfigTemplates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sourceId, groupId, description, logSyncEnabled, syncPolicyId, retentionPolicyId, makeCurrentAccountOwner, tags, opsPreSync, opsPostSync, encryptionKey, syncStrategy, mssqlBackupUuid, compressionEnabled, availabilityGroupBackupPolicy, sourceHostUser, pptRepository, pptHostUser, stagingPreScript, stagingPostScript, syncStrategyManagedType, mssqlUserEnvironmentReference, mssqlUserDomainUsername, mssqlUserDomainPassword, mssqlUserDomainVaultUsername, mssqlUserDomainVault, mssqlUserDomainHashicorpVaultEngine, mssqlUserDomainHashicorpVaultSecretPath, mssqlUserDomainHashicorpVaultUsernameKey, mssqlUserDomainHashicorpVaultSecretKey, mssqlUserDomainAzureVaultName, mssqlUserDomainAzureVaultUsernameKey, mssqlUserDomainAzureVaultSecretKey, mssqlUserDomainCyberarkVaultQueryString, mssqlDatabaseUsername, mssqlDatabasePassword, delphixManagedBackupCompressionEnabled, delphixManagedBackupPolicy, externalManagedValidateSyncMode, externalManagedSharedBackupLocations, externalNetbackupConfigMasterName, externalNetbackupConfigSourceClientName, externalNetbackupConfigParams, externalNetbackupConfigTemplates, externalCommserveHostName, externalCommvaultConfigSourceClientName, externalCommvaultConfigStagingClientName, externalCommvaultConfigParams, externalCommvaultConfigTemplates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MSSQLDSourceLinkSourceParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logSyncEnabled: ").append(toIndentedString(logSyncEnabled)).append("\n");
    sb.append("    syncPolicyId: ").append(toIndentedString(syncPolicyId)).append("\n");
    sb.append("    retentionPolicyId: ").append(toIndentedString(retentionPolicyId)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    opsPreSync: ").append(toIndentedString(opsPreSync)).append("\n");
    sb.append("    opsPostSync: ").append(toIndentedString(opsPostSync)).append("\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    syncStrategy: ").append(toIndentedString(syncStrategy)).append("\n");
    sb.append("    mssqlBackupUuid: ").append(toIndentedString(mssqlBackupUuid)).append("\n");
    sb.append("    compressionEnabled: ").append(toIndentedString(compressionEnabled)).append("\n");
    sb.append("    availabilityGroupBackupPolicy: ").append(toIndentedString(availabilityGroupBackupPolicy)).append("\n");
    sb.append("    sourceHostUser: ").append(toIndentedString(sourceHostUser)).append("\n");
    sb.append("    pptRepository: ").append(toIndentedString(pptRepository)).append("\n");
    sb.append("    pptHostUser: ").append(toIndentedString(pptHostUser)).append("\n");
    sb.append("    stagingPreScript: ").append(toIndentedString(stagingPreScript)).append("\n");
    sb.append("    stagingPostScript: ").append(toIndentedString(stagingPostScript)).append("\n");
    sb.append("    syncStrategyManagedType: ").append(toIndentedString(syncStrategyManagedType)).append("\n");
    sb.append("    mssqlUserEnvironmentReference: ").append(toIndentedString(mssqlUserEnvironmentReference)).append("\n");
    sb.append("    mssqlUserDomainUsername: ").append(toIndentedString(mssqlUserDomainUsername)).append("\n");
    sb.append("    mssqlUserDomainPassword: ").append(toIndentedString(mssqlUserDomainPassword)).append("\n");
    sb.append("    mssqlUserDomainVaultUsername: ").append(toIndentedString(mssqlUserDomainVaultUsername)).append("\n");
    sb.append("    mssqlUserDomainVault: ").append(toIndentedString(mssqlUserDomainVault)).append("\n");
    sb.append("    mssqlUserDomainHashicorpVaultEngine: ").append(toIndentedString(mssqlUserDomainHashicorpVaultEngine)).append("\n");
    sb.append("    mssqlUserDomainHashicorpVaultSecretPath: ").append(toIndentedString(mssqlUserDomainHashicorpVaultSecretPath)).append("\n");
    sb.append("    mssqlUserDomainHashicorpVaultUsernameKey: ").append(toIndentedString(mssqlUserDomainHashicorpVaultUsernameKey)).append("\n");
    sb.append("    mssqlUserDomainHashicorpVaultSecretKey: ").append(toIndentedString(mssqlUserDomainHashicorpVaultSecretKey)).append("\n");
    sb.append("    mssqlUserDomainAzureVaultName: ").append(toIndentedString(mssqlUserDomainAzureVaultName)).append("\n");
    sb.append("    mssqlUserDomainAzureVaultUsernameKey: ").append(toIndentedString(mssqlUserDomainAzureVaultUsernameKey)).append("\n");
    sb.append("    mssqlUserDomainAzureVaultSecretKey: ").append(toIndentedString(mssqlUserDomainAzureVaultSecretKey)).append("\n");
    sb.append("    mssqlUserDomainCyberarkVaultQueryString: ").append(toIndentedString(mssqlUserDomainCyberarkVaultQueryString)).append("\n");
    sb.append("    mssqlDatabaseUsername: ").append(toIndentedString(mssqlDatabaseUsername)).append("\n");
    sb.append("    mssqlDatabasePassword: ").append(toIndentedString(mssqlDatabasePassword)).append("\n");
    sb.append("    delphixManagedBackupCompressionEnabled: ").append(toIndentedString(delphixManagedBackupCompressionEnabled)).append("\n");
    sb.append("    delphixManagedBackupPolicy: ").append(toIndentedString(delphixManagedBackupPolicy)).append("\n");
    sb.append("    externalManagedValidateSyncMode: ").append(toIndentedString(externalManagedValidateSyncMode)).append("\n");
    sb.append("    externalManagedSharedBackupLocations: ").append(toIndentedString(externalManagedSharedBackupLocations)).append("\n");
    sb.append("    externalNetbackupConfigMasterName: ").append(toIndentedString(externalNetbackupConfigMasterName)).append("\n");
    sb.append("    externalNetbackupConfigSourceClientName: ").append(toIndentedString(externalNetbackupConfigSourceClientName)).append("\n");
    sb.append("    externalNetbackupConfigParams: ").append(toIndentedString(externalNetbackupConfigParams)).append("\n");
    sb.append("    externalNetbackupConfigTemplates: ").append(toIndentedString(externalNetbackupConfigTemplates)).append("\n");
    sb.append("    externalCommserveHostName: ").append(toIndentedString(externalCommserveHostName)).append("\n");
    sb.append("    externalCommvaultConfigSourceClientName: ").append(toIndentedString(externalCommvaultConfigSourceClientName)).append("\n");
    sb.append("    externalCommvaultConfigStagingClientName: ").append(toIndentedString(externalCommvaultConfigStagingClientName)).append("\n");
    sb.append("    externalCommvaultConfigParams: ").append(toIndentedString(externalCommvaultConfigParams)).append("\n");
    sb.append("    externalCommvaultConfigTemplates: ").append(toIndentedString(externalCommvaultConfigTemplates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("source_id");
    openapiFields.add("group_id");
    openapiFields.add("description");
    openapiFields.add("log_sync_enabled");
    openapiFields.add("sync_policy_id");
    openapiFields.add("retention_policy_id");
    openapiFields.add("make_current_account_owner");
    openapiFields.add("tags");
    openapiFields.add("ops_pre_sync");
    openapiFields.add("ops_post_sync");
    openapiFields.add("encryption_key");
    openapiFields.add("sync_strategy");
    openapiFields.add("mssql_backup_uuid");
    openapiFields.add("compression_enabled");
    openapiFields.add("availability_group_backup_policy");
    openapiFields.add("source_host_user");
    openapiFields.add("ppt_repository");
    openapiFields.add("ppt_host_user");
    openapiFields.add("staging_pre_script");
    openapiFields.add("staging_post_script");
    openapiFields.add("sync_strategy_managed_type");
    openapiFields.add("mssql_user_environment_reference");
    openapiFields.add("mssql_user_domain_username");
    openapiFields.add("mssql_user_domain_password");
    openapiFields.add("mssql_user_domain_vault_username");
    openapiFields.add("mssql_user_domain_vault");
    openapiFields.add("mssql_user_domain_hashicorp_vault_engine");
    openapiFields.add("mssql_user_domain_hashicorp_vault_secret_path");
    openapiFields.add("mssql_user_domain_hashicorp_vault_username_key");
    openapiFields.add("mssql_user_domain_hashicorp_vault_secret_key");
    openapiFields.add("mssql_user_domain_azure_vault_name");
    openapiFields.add("mssql_user_domain_azure_vault_username_key");
    openapiFields.add("mssql_user_domain_azure_vault_secret_key");
    openapiFields.add("mssql_user_domain_cyberark_vault_query_string");
    openapiFields.add("mssql_database_username");
    openapiFields.add("mssql_database_password");
    openapiFields.add("delphix_managed_backup_compression_enabled");
    openapiFields.add("delphix_managed_backup_policy");
    openapiFields.add("external_managed_validate_sync_mode");
    openapiFields.add("external_managed_shared_backup_locations");
    openapiFields.add("external_netbackup_config_master_name");
    openapiFields.add("external_netbackup_config_source_client_name");
    openapiFields.add("external_netbackup_config_params");
    openapiFields.add("external_netbackup_config_templates");
    openapiFields.add("external_commserve_host_name");
    openapiFields.add("external_commvault_config_source_client_name");
    openapiFields.add("external_commvault_config_staging_client_name");
    openapiFields.add("external_commvault_config_params");
    openapiFields.add("external_commvault_config_templates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MSSQLDSourceLinkSourceParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MSSQLDSourceLinkSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MSSQLDSourceLinkSourceParameters is not found in the empty JSON string", MSSQLDSourceLinkSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MSSQLDSourceLinkSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MSSQLDSourceLinkSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MSSQLDSourceLinkSourceParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("sync_policy_id") != null && !jsonObj.get("sync_policy_id").isJsonNull()) && !jsonObj.get("sync_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_policy_id").toString()));
      }
      if ((jsonObj.get("retention_policy_id") != null && !jsonObj.get("retention_policy_id").isJsonNull()) && !jsonObj.get("retention_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("ops_pre_sync") != null && !jsonObj.get("ops_pre_sync").isJsonNull()) {
        JsonArray jsonArrayopsPreSync = jsonObj.getAsJsonArray("ops_pre_sync");
        if (jsonArrayopsPreSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_pre_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_pre_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_pre_sync").toString()));
          }

          // validate the optional field `ops_pre_sync` (array)
          for (int i = 0; i < jsonArrayopsPreSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPreSync.get(i));
          };
        }
      }
      if (jsonObj.get("ops_post_sync") != null && !jsonObj.get("ops_post_sync").isJsonNull()) {
        JsonArray jsonArrayopsPostSync = jsonObj.getAsJsonArray("ops_post_sync");
        if (jsonArrayopsPostSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_post_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_post_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_post_sync").toString()));
          }

          // validate the optional field `ops_post_sync` (array)
          for (int i = 0; i < jsonArrayopsPostSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPostSync.get(i));
          };
        }
      }
      if ((jsonObj.get("encryption_key") != null && !jsonObj.get("encryption_key").isJsonNull()) && !jsonObj.get("encryption_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption_key").toString()));
      }
      if ((jsonObj.get("sync_strategy") != null && !jsonObj.get("sync_strategy").isJsonNull()) && !jsonObj.get("sync_strategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_strategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_strategy").toString()));
      }
      // validate the optional field `sync_strategy`
      if (jsonObj.get("sync_strategy") != null && !jsonObj.get("sync_strategy").isJsonNull()) {
        SyncStrategyEnum.validateJsonElement(jsonObj.get("sync_strategy"));
      }
      if ((jsonObj.get("mssql_backup_uuid") != null && !jsonObj.get("mssql_backup_uuid").isJsonNull()) && !jsonObj.get("mssql_backup_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_backup_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_backup_uuid").toString()));
      }
      if ((jsonObj.get("availability_group_backup_policy") != null && !jsonObj.get("availability_group_backup_policy").isJsonNull()) && !jsonObj.get("availability_group_backup_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability_group_backup_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability_group_backup_policy").toString()));
      }
      // validate the optional field `availability_group_backup_policy`
      if (jsonObj.get("availability_group_backup_policy") != null && !jsonObj.get("availability_group_backup_policy").isJsonNull()) {
        AvailabilityGroupBackupPolicyEnum.validateJsonElement(jsonObj.get("availability_group_backup_policy"));
      }
      if ((jsonObj.get("source_host_user") != null && !jsonObj.get("source_host_user").isJsonNull()) && !jsonObj.get("source_host_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_host_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_host_user").toString()));
      }
      if ((jsonObj.get("ppt_repository") != null && !jsonObj.get("ppt_repository").isJsonNull()) && !jsonObj.get("ppt_repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ppt_repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ppt_repository").toString()));
      }
      if ((jsonObj.get("ppt_host_user") != null && !jsonObj.get("ppt_host_user").isJsonNull()) && !jsonObj.get("ppt_host_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ppt_host_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ppt_host_user").toString()));
      }
      if ((jsonObj.get("staging_pre_script") != null && !jsonObj.get("staging_pre_script").isJsonNull()) && !jsonObj.get("staging_pre_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staging_pre_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staging_pre_script").toString()));
      }
      if ((jsonObj.get("staging_post_script") != null && !jsonObj.get("staging_post_script").isJsonNull()) && !jsonObj.get("staging_post_script").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staging_post_script` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staging_post_script").toString()));
      }
      if ((jsonObj.get("sync_strategy_managed_type") != null && !jsonObj.get("sync_strategy_managed_type").isJsonNull()) && !jsonObj.get("sync_strategy_managed_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_strategy_managed_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_strategy_managed_type").toString()));
      }
      // validate the optional field `sync_strategy_managed_type`
      if (jsonObj.get("sync_strategy_managed_type") != null && !jsonObj.get("sync_strategy_managed_type").isJsonNull()) {
        SyncStrategyManagedTypeEnum.validateJsonElement(jsonObj.get("sync_strategy_managed_type"));
      }
      if ((jsonObj.get("mssql_user_environment_reference") != null && !jsonObj.get("mssql_user_environment_reference").isJsonNull()) && !jsonObj.get("mssql_user_environment_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_environment_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_environment_reference").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_username") != null && !jsonObj.get("mssql_user_domain_username").isJsonNull()) && !jsonObj.get("mssql_user_domain_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_username").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_password") != null && !jsonObj.get("mssql_user_domain_password").isJsonNull()) && !jsonObj.get("mssql_user_domain_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_password").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_vault_username") != null && !jsonObj.get("mssql_user_domain_vault_username").isJsonNull()) && !jsonObj.get("mssql_user_domain_vault_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_vault_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_vault_username").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_vault") != null && !jsonObj.get("mssql_user_domain_vault").isJsonNull()) && !jsonObj.get("mssql_user_domain_vault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_vault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_vault").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_hashicorp_vault_engine") != null && !jsonObj.get("mssql_user_domain_hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("mssql_user_domain_hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_hashicorp_vault_secret_path") != null && !jsonObj.get("mssql_user_domain_hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("mssql_user_domain_hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_hashicorp_vault_username_key") != null && !jsonObj.get("mssql_user_domain_hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("mssql_user_domain_hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_hashicorp_vault_secret_key") != null && !jsonObj.get("mssql_user_domain_hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("mssql_user_domain_hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_azure_vault_name") != null && !jsonObj.get("mssql_user_domain_azure_vault_name").isJsonNull()) && !jsonObj.get("mssql_user_domain_azure_vault_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_azure_vault_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_azure_vault_name").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_azure_vault_username_key") != null && !jsonObj.get("mssql_user_domain_azure_vault_username_key").isJsonNull()) && !jsonObj.get("mssql_user_domain_azure_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_azure_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_azure_vault_username_key").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_azure_vault_secret_key") != null && !jsonObj.get("mssql_user_domain_azure_vault_secret_key").isJsonNull()) && !jsonObj.get("mssql_user_domain_azure_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_azure_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_azure_vault_secret_key").toString()));
      }
      if ((jsonObj.get("mssql_user_domain_cyberark_vault_query_string") != null && !jsonObj.get("mssql_user_domain_cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("mssql_user_domain_cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_user_domain_cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_user_domain_cyberark_vault_query_string").toString()));
      }
      if ((jsonObj.get("mssql_database_username") != null && !jsonObj.get("mssql_database_username").isJsonNull()) && !jsonObj.get("mssql_database_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_database_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_database_username").toString()));
      }
      if ((jsonObj.get("mssql_database_password") != null && !jsonObj.get("mssql_database_password").isJsonNull()) && !jsonObj.get("mssql_database_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_database_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_database_password").toString()));
      }
      if ((jsonObj.get("delphix_managed_backup_policy") != null && !jsonObj.get("delphix_managed_backup_policy").isJsonNull()) && !jsonObj.get("delphix_managed_backup_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delphix_managed_backup_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delphix_managed_backup_policy").toString()));
      }
      // validate the optional field `delphix_managed_backup_policy`
      if (jsonObj.get("delphix_managed_backup_policy") != null && !jsonObj.get("delphix_managed_backup_policy").isJsonNull()) {
        DelphixManagedBackupPolicyEnum.validateJsonElement(jsonObj.get("delphix_managed_backup_policy"));
      }
      if ((jsonObj.get("external_managed_validate_sync_mode") != null && !jsonObj.get("external_managed_validate_sync_mode").isJsonNull()) && !jsonObj.get("external_managed_validate_sync_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_managed_validate_sync_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_managed_validate_sync_mode").toString()));
      }
      // validate the optional field `external_managed_validate_sync_mode`
      if (jsonObj.get("external_managed_validate_sync_mode") != null && !jsonObj.get("external_managed_validate_sync_mode").isJsonNull()) {
        ExternalManagedValidateSyncModeEnum.validateJsonElement(jsonObj.get("external_managed_validate_sync_mode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("external_managed_shared_backup_locations") != null && !jsonObj.get("external_managed_shared_backup_locations").isJsonNull() && !jsonObj.get("external_managed_shared_backup_locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_managed_shared_backup_locations` to be an array in the JSON string but got `%s`", jsonObj.get("external_managed_shared_backup_locations").toString()));
      }
      if ((jsonObj.get("external_netbackup_config_master_name") != null && !jsonObj.get("external_netbackup_config_master_name").isJsonNull()) && !jsonObj.get("external_netbackup_config_master_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_netbackup_config_master_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_netbackup_config_master_name").toString()));
      }
      if ((jsonObj.get("external_netbackup_config_source_client_name") != null && !jsonObj.get("external_netbackup_config_source_client_name").isJsonNull()) && !jsonObj.get("external_netbackup_config_source_client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_netbackup_config_source_client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_netbackup_config_source_client_name").toString()));
      }
      if ((jsonObj.get("external_netbackup_config_templates") != null && !jsonObj.get("external_netbackup_config_templates").isJsonNull()) && !jsonObj.get("external_netbackup_config_templates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_netbackup_config_templates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_netbackup_config_templates").toString()));
      }
      if ((jsonObj.get("external_commserve_host_name") != null && !jsonObj.get("external_commserve_host_name").isJsonNull()) && !jsonObj.get("external_commserve_host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_commserve_host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_commserve_host_name").toString()));
      }
      if ((jsonObj.get("external_commvault_config_source_client_name") != null && !jsonObj.get("external_commvault_config_source_client_name").isJsonNull()) && !jsonObj.get("external_commvault_config_source_client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_commvault_config_source_client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_commvault_config_source_client_name").toString()));
      }
      if ((jsonObj.get("external_commvault_config_staging_client_name") != null && !jsonObj.get("external_commvault_config_staging_client_name").isJsonNull()) && !jsonObj.get("external_commvault_config_staging_client_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_commvault_config_staging_client_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_commvault_config_staging_client_name").toString()));
      }
      if ((jsonObj.get("external_commvault_config_templates") != null && !jsonObj.get("external_commvault_config_templates").isJsonNull()) && !jsonObj.get("external_commvault_config_templates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_commvault_config_templates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_commvault_config_templates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MSSQLDSourceLinkSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MSSQLDSourceLinkSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MSSQLDSourceLinkSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MSSQLDSourceLinkSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<MSSQLDSourceLinkSourceParameters>() {
           @Override
           public void write(JsonWriter out, MSSQLDSourceLinkSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MSSQLDSourceLinkSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MSSQLDSourceLinkSourceParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MSSQLDSourceLinkSourceParameters
  * @throws IOException if the JSON string is invalid with respect to MSSQLDSourceLinkSourceParameters
  */
  public static MSSQLDSourceLinkSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MSSQLDSourceLinkSourceParameters.class);
  }

 /**
  * Convert an instance of MSSQLDSourceLinkSourceParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

