/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.HyperscaleDataTypeEnum;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A Hyperscale connector to read/write data from/to a datasource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class HyperscaleConnector {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID = "hyperscale_instance_id";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID)
  private String hyperscaleInstanceId;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private HyperscaleDataTypeEnum dataType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_USERNAME = "source_username";
  @SerializedName(SERIALIZED_NAME_SOURCE_USERNAME)
  private String sourceUsername;

  public static final String SERIALIZED_NAME_SOURCE_PASSWORD = "source_password";
  @SerializedName(SERIALIZED_NAME_SOURCE_PASSWORD)
  private String sourcePassword;

  public static final String SERIALIZED_NAME_SOURCE_JDBC_URL = "source_jdbc_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_JDBC_URL)
  private String sourceJdbcUrl;

  public static final String SERIALIZED_NAME_SOURCE_MONGO_URL = "source_mongo_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_MONGO_URL)
  private String sourceMongoUrl;

  public static final String SERIALIZED_NAME_SOURCE_FILESYSTEM_PATH = "source_filesystem_path";
  @SerializedName(SERIALIZED_NAME_SOURCE_FILESYSTEM_PATH)
  private String sourceFilesystemPath;

  public static final String SERIALIZED_NAME_SOURCE_CONNECTION_PROPERTIES = "source_connection_properties";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONNECTION_PROPERTIES)
  private Map<String, String> sourceConnectionProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_USERNAME = "target_username";
  @SerializedName(SERIALIZED_NAME_TARGET_USERNAME)
  private String targetUsername;

  public static final String SERIALIZED_NAME_TARGET_PASSWORD = "target_password";
  @SerializedName(SERIALIZED_NAME_TARGET_PASSWORD)
  private String targetPassword;

  public static final String SERIALIZED_NAME_TARGET_JDBC_URL = "target_jdbc_url";
  @SerializedName(SERIALIZED_NAME_TARGET_JDBC_URL)
  private String targetJdbcUrl;

  public static final String SERIALIZED_NAME_TARGET_MONGO_URL = "target_mongo_url";
  @SerializedName(SERIALIZED_NAME_TARGET_MONGO_URL)
  private String targetMongoUrl;

  public static final String SERIALIZED_NAME_TARGET_FILESYSTEM_PATH = "target_filesystem_path";
  @SerializedName(SERIALIZED_NAME_TARGET_FILESYSTEM_PATH)
  private String targetFilesystemPath;

  public static final String SERIALIZED_NAME_TARGET_CONNECTION_PROPERTIES = "target_connection_properties";
  @SerializedName(SERIALIZED_NAME_TARGET_CONNECTION_PROPERTIES)
  private Map<String, String> targetConnectionProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public HyperscaleConnector() {
  }

  public HyperscaleConnector(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * The ID of the Hyperscale Connector.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public HyperscaleConnector hyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
    return this;
  }

   /**
   * The ID of the Hyperscale instance of this Connector.
   * @return hyperscaleInstanceId
  **/
  @javax.annotation.Nullable
  public String getHyperscaleInstanceId() {
    return hyperscaleInstanceId;
  }

  public void setHyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
  }


  public HyperscaleConnector dataType(HyperscaleDataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  public HyperscaleDataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(HyperscaleDataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public HyperscaleConnector name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HyperscaleConnector sourceUsername(String sourceUsername) {
    this.sourceUsername = sourceUsername;
    return this;
  }

   /**
   * The username this Connector will use to connect to the source database.
   * @return sourceUsername
  **/
  @javax.annotation.Nullable
  public String getSourceUsername() {
    return sourceUsername;
  }

  public void setSourceUsername(String sourceUsername) {
    this.sourceUsername = sourceUsername;
  }


  public HyperscaleConnector sourcePassword(String sourcePassword) {
    this.sourcePassword = sourcePassword;
    return this;
  }

   /**
   * The password this Connector will use to connect to the source database.
   * @return sourcePassword
  **/
  @javax.annotation.Nullable
  public String getSourcePassword() {
    return sourcePassword;
  }

  public void setSourcePassword(String sourcePassword) {
    this.sourcePassword = sourcePassword;
  }


  public HyperscaleConnector sourceJdbcUrl(String sourceJdbcUrl) {
    this.sourceJdbcUrl = sourceJdbcUrl;
    return this;
  }

   /**
   * The JDBC URL used to connect to the source database.
   * @return sourceJdbcUrl
  **/
  @javax.annotation.Nullable
  public String getSourceJdbcUrl() {
    return sourceJdbcUrl;
  }

  public void setSourceJdbcUrl(String sourceJdbcUrl) {
    this.sourceJdbcUrl = sourceJdbcUrl;
  }


  public HyperscaleConnector sourceMongoUrl(String sourceMongoUrl) {
    this.sourceMongoUrl = sourceMongoUrl;
    return this;
  }

   /**
   * The MongoDB URL used to connect to the source database.
   * @return sourceMongoUrl
  **/
  @javax.annotation.Nullable
  public String getSourceMongoUrl() {
    return sourceMongoUrl;
  }

  public void setSourceMongoUrl(String sourceMongoUrl) {
    this.sourceMongoUrl = sourceMongoUrl;
  }


  public HyperscaleConnector sourceFilesystemPath(String sourceFilesystemPath) {
    this.sourceFilesystemPath = sourceFilesystemPath;
    return this;
  }

   /**
   * The path on the filesystem where source files must be read (Delimited files Only).
   * @return sourceFilesystemPath
  **/
  @javax.annotation.Nullable
  public String getSourceFilesystemPath() {
    return sourceFilesystemPath;
  }

  public void setSourceFilesystemPath(String sourceFilesystemPath) {
    this.sourceFilesystemPath = sourceFilesystemPath;
  }


  public HyperscaleConnector sourceConnectionProperties(Map<String, String> sourceConnectionProperties) {
    this.sourceConnectionProperties = sourceConnectionProperties;
    return this;
  }

  public HyperscaleConnector putSourceConnectionPropertiesItem(String key, String sourceConnectionPropertiesItem) {
    if (this.sourceConnectionProperties == null) {
      this.sourceConnectionProperties = new HashMap<>();
    }
    this.sourceConnectionProperties.put(key, sourceConnectionPropertiesItem);
    return this;
  }

   /**
   * Get sourceConnectionProperties
   * @return sourceConnectionProperties
  **/
  @javax.annotation.Nullable
  public Map<String, String> getSourceConnectionProperties() {
    return sourceConnectionProperties;
  }

  public void setSourceConnectionProperties(Map<String, String> sourceConnectionProperties) {
    this.sourceConnectionProperties = sourceConnectionProperties;
  }


  public HyperscaleConnector targetUsername(String targetUsername) {
    this.targetUsername = targetUsername;
    return this;
  }

   /**
   * The username this Connector will use to connect to the target database.
   * @return targetUsername
  **/
  @javax.annotation.Nullable
  public String getTargetUsername() {
    return targetUsername;
  }

  public void setTargetUsername(String targetUsername) {
    this.targetUsername = targetUsername;
  }


  public HyperscaleConnector targetPassword(String targetPassword) {
    this.targetPassword = targetPassword;
    return this;
  }

   /**
   * The username this Connector will use to connect to the target database.
   * @return targetPassword
  **/
  @javax.annotation.Nullable
  public String getTargetPassword() {
    return targetPassword;
  }

  public void setTargetPassword(String targetPassword) {
    this.targetPassword = targetPassword;
  }


  public HyperscaleConnector targetJdbcUrl(String targetJdbcUrl) {
    this.targetJdbcUrl = targetJdbcUrl;
    return this;
  }

   /**
   * The JDBC URL used to connect to the target database.
   * @return targetJdbcUrl
  **/
  @javax.annotation.Nullable
  public String getTargetJdbcUrl() {
    return targetJdbcUrl;
  }

  public void setTargetJdbcUrl(String targetJdbcUrl) {
    this.targetJdbcUrl = targetJdbcUrl;
  }


  public HyperscaleConnector targetMongoUrl(String targetMongoUrl) {
    this.targetMongoUrl = targetMongoUrl;
    return this;
  }

   /**
   * The MongoDB URL used to connect to the target database.
   * @return targetMongoUrl
  **/
  @javax.annotation.Nullable
  public String getTargetMongoUrl() {
    return targetMongoUrl;
  }

  public void setTargetMongoUrl(String targetMongoUrl) {
    this.targetMongoUrl = targetMongoUrl;
  }


  public HyperscaleConnector targetFilesystemPath(String targetFilesystemPath) {
    this.targetFilesystemPath = targetFilesystemPath;
    return this;
  }

   /**
   * The path on the filesystem where target files must be written (Delimited files Only).
   * @return targetFilesystemPath
  **/
  @javax.annotation.Nullable
  public String getTargetFilesystemPath() {
    return targetFilesystemPath;
  }

  public void setTargetFilesystemPath(String targetFilesystemPath) {
    this.targetFilesystemPath = targetFilesystemPath;
  }


  public HyperscaleConnector targetConnectionProperties(Map<String, String> targetConnectionProperties) {
    this.targetConnectionProperties = targetConnectionProperties;
    return this;
  }

  public HyperscaleConnector putTargetConnectionPropertiesItem(String key, String targetConnectionPropertiesItem) {
    if (this.targetConnectionProperties == null) {
      this.targetConnectionProperties = new HashMap<>();
    }
    this.targetConnectionProperties.put(key, targetConnectionPropertiesItem);
    return this;
  }

   /**
   * Get targetConnectionProperties
   * @return targetConnectionProperties
  **/
  @javax.annotation.Nullable
  public Map<String, String> getTargetConnectionProperties() {
    return targetConnectionProperties;
  }

  public void setTargetConnectionProperties(Map<String, String> targetConnectionProperties) {
    this.targetConnectionProperties = targetConnectionProperties;
  }


  public HyperscaleConnector tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public HyperscaleConnector addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleConnector hyperscaleConnector = (HyperscaleConnector) o;
    return Objects.equals(this.id, hyperscaleConnector.id) &&
        Objects.equals(this.hyperscaleInstanceId, hyperscaleConnector.hyperscaleInstanceId) &&
        Objects.equals(this.dataType, hyperscaleConnector.dataType) &&
        Objects.equals(this.name, hyperscaleConnector.name) &&
        Objects.equals(this.sourceUsername, hyperscaleConnector.sourceUsername) &&
        Objects.equals(this.sourcePassword, hyperscaleConnector.sourcePassword) &&
        Objects.equals(this.sourceJdbcUrl, hyperscaleConnector.sourceJdbcUrl) &&
        Objects.equals(this.sourceMongoUrl, hyperscaleConnector.sourceMongoUrl) &&
        Objects.equals(this.sourceFilesystemPath, hyperscaleConnector.sourceFilesystemPath) &&
        Objects.equals(this.sourceConnectionProperties, hyperscaleConnector.sourceConnectionProperties) &&
        Objects.equals(this.targetUsername, hyperscaleConnector.targetUsername) &&
        Objects.equals(this.targetPassword, hyperscaleConnector.targetPassword) &&
        Objects.equals(this.targetJdbcUrl, hyperscaleConnector.targetJdbcUrl) &&
        Objects.equals(this.targetMongoUrl, hyperscaleConnector.targetMongoUrl) &&
        Objects.equals(this.targetFilesystemPath, hyperscaleConnector.targetFilesystemPath) &&
        Objects.equals(this.targetConnectionProperties, hyperscaleConnector.targetConnectionProperties) &&
        Objects.equals(this.tags, hyperscaleConnector.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hyperscaleInstanceId, dataType, name, sourceUsername, sourcePassword, sourceJdbcUrl, sourceMongoUrl, sourceFilesystemPath, sourceConnectionProperties, targetUsername, targetPassword, targetJdbcUrl, targetMongoUrl, targetFilesystemPath, targetConnectionProperties, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleConnector {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hyperscaleInstanceId: ").append(toIndentedString(hyperscaleInstanceId)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceUsername: ").append(toIndentedString(sourceUsername)).append("\n");
    sb.append("    sourcePassword: ").append(toIndentedString(sourcePassword)).append("\n");
    sb.append("    sourceJdbcUrl: ").append(toIndentedString(sourceJdbcUrl)).append("\n");
    sb.append("    sourceMongoUrl: ").append(toIndentedString(sourceMongoUrl)).append("\n");
    sb.append("    sourceFilesystemPath: ").append(toIndentedString(sourceFilesystemPath)).append("\n");
    sb.append("    sourceConnectionProperties: ").append(toIndentedString(sourceConnectionProperties)).append("\n");
    sb.append("    targetUsername: ").append(toIndentedString(targetUsername)).append("\n");
    sb.append("    targetPassword: ").append(toIndentedString(targetPassword)).append("\n");
    sb.append("    targetJdbcUrl: ").append(toIndentedString(targetJdbcUrl)).append("\n");
    sb.append("    targetMongoUrl: ").append(toIndentedString(targetMongoUrl)).append("\n");
    sb.append("    targetFilesystemPath: ").append(toIndentedString(targetFilesystemPath)).append("\n");
    sb.append("    targetConnectionProperties: ").append(toIndentedString(targetConnectionProperties)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("hyperscale_instance_id");
    openapiFields.add("data_type");
    openapiFields.add("name");
    openapiFields.add("source_username");
    openapiFields.add("source_password");
    openapiFields.add("source_jdbc_url");
    openapiFields.add("source_mongo_url");
    openapiFields.add("source_filesystem_path");
    openapiFields.add("source_connection_properties");
    openapiFields.add("target_username");
    openapiFields.add("target_password");
    openapiFields.add("target_jdbc_url");
    openapiFields.add("target_mongo_url");
    openapiFields.add("target_filesystem_path");
    openapiFields.add("target_connection_properties");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperscaleConnector
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperscaleConnector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperscaleConnector is not found in the empty JSON string", HyperscaleConnector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperscaleConnector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperscaleConnector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("hyperscale_instance_id") != null && !jsonObj.get("hyperscale_instance_id").isJsonNull()) && !jsonObj.get("hyperscale_instance_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_instance_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_instance_id").toString()));
      }
      // validate the optional field `data_type`
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull()) {
        HyperscaleDataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_username") != null && !jsonObj.get("source_username").isJsonNull()) && !jsonObj.get("source_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_username").toString()));
      }
      if ((jsonObj.get("source_password") != null && !jsonObj.get("source_password").isJsonNull()) && !jsonObj.get("source_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_password").toString()));
      }
      if ((jsonObj.get("source_jdbc_url") != null && !jsonObj.get("source_jdbc_url").isJsonNull()) && !jsonObj.get("source_jdbc_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_jdbc_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_jdbc_url").toString()));
      }
      if ((jsonObj.get("source_mongo_url") != null && !jsonObj.get("source_mongo_url").isJsonNull()) && !jsonObj.get("source_mongo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_mongo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_mongo_url").toString()));
      }
      if ((jsonObj.get("source_filesystem_path") != null && !jsonObj.get("source_filesystem_path").isJsonNull()) && !jsonObj.get("source_filesystem_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_filesystem_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_filesystem_path").toString()));
      }
      if ((jsonObj.get("target_username") != null && !jsonObj.get("target_username").isJsonNull()) && !jsonObj.get("target_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_username").toString()));
      }
      if ((jsonObj.get("target_password") != null && !jsonObj.get("target_password").isJsonNull()) && !jsonObj.get("target_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_password").toString()));
      }
      if ((jsonObj.get("target_jdbc_url") != null && !jsonObj.get("target_jdbc_url").isJsonNull()) && !jsonObj.get("target_jdbc_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_jdbc_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_jdbc_url").toString()));
      }
      if ((jsonObj.get("target_mongo_url") != null && !jsonObj.get("target_mongo_url").isJsonNull()) && !jsonObj.get("target_mongo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_mongo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_mongo_url").toString()));
      }
      if ((jsonObj.get("target_filesystem_path") != null && !jsonObj.get("target_filesystem_path").isJsonNull()) && !jsonObj.get("target_filesystem_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_filesystem_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_filesystem_path").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperscaleConnector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperscaleConnector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperscaleConnector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperscaleConnector.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperscaleConnector>() {
           @Override
           public void write(JsonWriter out, HyperscaleConnector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperscaleConnector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperscaleConnector given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperscaleConnector
  * @throws IOException if the JSON string is invalid with respect to HyperscaleConnector
  */
  public static HyperscaleConnector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperscaleConnector.class);
  }

 /**
  * Convert an instance of HyperscaleConnector to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

