/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Parameters to read or update password policies
 */
@ApiModel(description = "Parameters to read or update password policies")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class PasswordPoliciesParams {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "min_length";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength = 15;

  public static final String SERIALIZED_NAME_REUSE_DISALLOW_LIMIT = "reuse_disallow_limit";
  @SerializedName(SERIALIZED_NAME_REUSE_DISALLOW_LIMIT)
  private Integer reuseDisallowLimit = 2;

  public static final String SERIALIZED_NAME_DIGIT = "digit";
  @SerializedName(SERIALIZED_NAME_DIGIT)
  private Boolean digit = true;

  public static final String SERIALIZED_NAME_UPPERCASE_LETTER = "uppercase_letter";
  @SerializedName(SERIALIZED_NAME_UPPERCASE_LETTER)
  private Boolean uppercaseLetter = true;

  public static final String SERIALIZED_NAME_LOWERCASE_LETTER = "lowercase_letter";
  @SerializedName(SERIALIZED_NAME_LOWERCASE_LETTER)
  private Boolean lowercaseLetter = true;

  public static final String SERIALIZED_NAME_SPECIAL_CHARACTER = "special_character";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CHARACTER)
  private Boolean specialCharacter = true;

  public static final String SERIALIZED_NAME_DISALLOW_USERNAME_AS_PASSWORD = "disallow_username_as_password";
  @SerializedName(SERIALIZED_NAME_DISALLOW_USERNAME_AS_PASSWORD)
  private Boolean disallowUsernameAsPassword = true;

  public static final String SERIALIZED_NAME_MAXIMUM_PASSWORD_ATTEMPTS = "maximum_password_attempts";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_PASSWORD_ATTEMPTS)
  private Integer maximumPasswordAttempts = 5;


  public PasswordPoliciesParams enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * True if password policies are enforced/enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "True if password policies are enforced/enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PasswordPoliciesParams minLength(Integer minLength) {
    
    this.minLength = minLength;
    return this;
  }

   /**
   * Minimum length for password.
   * minimum: 0
   * @return minLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8", value = "Minimum length for password.")

  public Integer getMinLength() {
    return minLength;
  }


  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public PasswordPoliciesParams reuseDisallowLimit(Integer reuseDisallowLimit) {
    
    this.reuseDisallowLimit = reuseDisallowLimit;
    return this;
  }

   /**
   * The password can not be the same as any of the previous n passwords.
   * minimum: 0
   * maximum: 20
   * @return reuseDisallowLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The password can not be the same as any of the previous n passwords.")

  public Integer getReuseDisallowLimit() {
    return reuseDisallowLimit;
  }


  public void setReuseDisallowLimit(Integer reuseDisallowLimit) {
    this.reuseDisallowLimit = reuseDisallowLimit;
  }


  public PasswordPoliciesParams digit(Boolean digit) {
    
    this.digit = digit;
    return this;
  }

   /**
   * Mandate at least one digit in password.
   * @return digit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Mandate at least one digit in password.")

  public Boolean getDigit() {
    return digit;
  }


  public void setDigit(Boolean digit) {
    this.digit = digit;
  }


  public PasswordPoliciesParams uppercaseLetter(Boolean uppercaseLetter) {
    
    this.uppercaseLetter = uppercaseLetter;
    return this;
  }

   /**
   * Mandate at least one uppercase letter in password.
   * @return uppercaseLetter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Mandate at least one uppercase letter in password.")

  public Boolean getUppercaseLetter() {
    return uppercaseLetter;
  }


  public void setUppercaseLetter(Boolean uppercaseLetter) {
    this.uppercaseLetter = uppercaseLetter;
  }


  public PasswordPoliciesParams lowercaseLetter(Boolean lowercaseLetter) {
    
    this.lowercaseLetter = lowercaseLetter;
    return this;
  }

   /**
   * Mandate at least one lower letter in password.
   * @return lowercaseLetter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Mandate at least one lower letter in password.")

  public Boolean getLowercaseLetter() {
    return lowercaseLetter;
  }


  public void setLowercaseLetter(Boolean lowercaseLetter) {
    this.lowercaseLetter = lowercaseLetter;
  }


  public PasswordPoliciesParams specialCharacter(Boolean specialCharacter) {
    
    this.specialCharacter = specialCharacter;
    return this;
  }

   /**
   * Mandate at least one special character in password.
   * @return specialCharacter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Mandate at least one special character in password.")

  public Boolean getSpecialCharacter() {
    return specialCharacter;
  }


  public void setSpecialCharacter(Boolean specialCharacter) {
    this.specialCharacter = specialCharacter;
  }


  public PasswordPoliciesParams disallowUsernameAsPassword(Boolean disallowUsernameAsPassword) {
    
    this.disallowUsernameAsPassword = disallowUsernameAsPassword;
    return this;
  }

   /**
   * Disallows password containing case-insensitive user name or reversed user name.
   * @return disallowUsernameAsPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Disallows password containing case-insensitive user name or reversed user name.")

  public Boolean getDisallowUsernameAsPassword() {
    return disallowUsernameAsPassword;
  }


  public void setDisallowUsernameAsPassword(Boolean disallowUsernameAsPassword) {
    this.disallowUsernameAsPassword = disallowUsernameAsPassword;
  }


  public PasswordPoliciesParams maximumPasswordAttempts(Integer maximumPasswordAttempts) {
    
    this.maximumPasswordAttempts = maximumPasswordAttempts;
    return this;
  }

   /**
   * The number of allowed attempts for incorrect password, after which the account gets locked.
   * minimum: 0
   * maximum: 100
   * @return maximumPasswordAttempts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "The number of allowed attempts for incorrect password, after which the account gets locked.")

  public Integer getMaximumPasswordAttempts() {
    return maximumPasswordAttempts;
  }


  public void setMaximumPasswordAttempts(Integer maximumPasswordAttempts) {
    this.maximumPasswordAttempts = maximumPasswordAttempts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPoliciesParams passwordPoliciesParams = (PasswordPoliciesParams) o;
    return Objects.equals(this.enabled, passwordPoliciesParams.enabled) &&
        Objects.equals(this.minLength, passwordPoliciesParams.minLength) &&
        Objects.equals(this.reuseDisallowLimit, passwordPoliciesParams.reuseDisallowLimit) &&
        Objects.equals(this.digit, passwordPoliciesParams.digit) &&
        Objects.equals(this.uppercaseLetter, passwordPoliciesParams.uppercaseLetter) &&
        Objects.equals(this.lowercaseLetter, passwordPoliciesParams.lowercaseLetter) &&
        Objects.equals(this.specialCharacter, passwordPoliciesParams.specialCharacter) &&
        Objects.equals(this.disallowUsernameAsPassword, passwordPoliciesParams.disallowUsernameAsPassword) &&
        Objects.equals(this.maximumPasswordAttempts, passwordPoliciesParams.maximumPasswordAttempts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, minLength, reuseDisallowLimit, digit, uppercaseLetter, lowercaseLetter, specialCharacter, disallowUsernameAsPassword, maximumPasswordAttempts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPoliciesParams {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    reuseDisallowLimit: ").append(toIndentedString(reuseDisallowLimit)).append("\n");
    sb.append("    digit: ").append(toIndentedString(digit)).append("\n");
    sb.append("    uppercaseLetter: ").append(toIndentedString(uppercaseLetter)).append("\n");
    sb.append("    lowercaseLetter: ").append(toIndentedString(lowercaseLetter)).append("\n");
    sb.append("    specialCharacter: ").append(toIndentedString(specialCharacter)).append("\n");
    sb.append("    disallowUsernameAsPassword: ").append(toIndentedString(disallowUsernameAsPassword)).append("\n");
    sb.append("    maximumPasswordAttempts: ").append(toIndentedString(maximumPasswordAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

