/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Parameters to read or update password policies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class PasswordPoliciesParams {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "min_length";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength = 15;

  public static final String SERIALIZED_NAME_REUSE_DISALLOW_LIMIT = "reuse_disallow_limit";
  @SerializedName(SERIALIZED_NAME_REUSE_DISALLOW_LIMIT)
  private Integer reuseDisallowLimit = 2;

  public static final String SERIALIZED_NAME_DIGIT = "digit";
  @SerializedName(SERIALIZED_NAME_DIGIT)
  private Boolean digit = true;

  public static final String SERIALIZED_NAME_UPPERCASE_LETTER = "uppercase_letter";
  @SerializedName(SERIALIZED_NAME_UPPERCASE_LETTER)
  private Boolean uppercaseLetter = true;

  public static final String SERIALIZED_NAME_LOWERCASE_LETTER = "lowercase_letter";
  @SerializedName(SERIALIZED_NAME_LOWERCASE_LETTER)
  private Boolean lowercaseLetter = true;

  public static final String SERIALIZED_NAME_SPECIAL_CHARACTER = "special_character";
  @SerializedName(SERIALIZED_NAME_SPECIAL_CHARACTER)
  private Boolean specialCharacter = true;

  public static final String SERIALIZED_NAME_DISALLOW_USERNAME_AS_PASSWORD = "disallow_username_as_password";
  @SerializedName(SERIALIZED_NAME_DISALLOW_USERNAME_AS_PASSWORD)
  private Boolean disallowUsernameAsPassword = true;

  public static final String SERIALIZED_NAME_MAXIMUM_PASSWORD_ATTEMPTS = "maximum_password_attempts";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_PASSWORD_ATTEMPTS)
  private Integer maximumPasswordAttempts = 5;

  public PasswordPoliciesParams() {
  }

  public PasswordPoliciesParams enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * True if password policies are enforced/enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PasswordPoliciesParams minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

   /**
   * Minimum length for password.
   * minimum: 0
   * @return minLength
  **/
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public PasswordPoliciesParams reuseDisallowLimit(Integer reuseDisallowLimit) {
    this.reuseDisallowLimit = reuseDisallowLimit;
    return this;
  }

   /**
   * The password can not be the same as any of the previous n passwords.
   * minimum: 0
   * maximum: 20
   * @return reuseDisallowLimit
  **/
  @javax.annotation.Nullable
  public Integer getReuseDisallowLimit() {
    return reuseDisallowLimit;
  }

  public void setReuseDisallowLimit(Integer reuseDisallowLimit) {
    this.reuseDisallowLimit = reuseDisallowLimit;
  }


  public PasswordPoliciesParams digit(Boolean digit) {
    this.digit = digit;
    return this;
  }

   /**
   * Mandate at least one digit in password.
   * @return digit
  **/
  @javax.annotation.Nullable
  public Boolean getDigit() {
    return digit;
  }

  public void setDigit(Boolean digit) {
    this.digit = digit;
  }


  public PasswordPoliciesParams uppercaseLetter(Boolean uppercaseLetter) {
    this.uppercaseLetter = uppercaseLetter;
    return this;
  }

   /**
   * Mandate at least one uppercase letter in password.
   * @return uppercaseLetter
  **/
  @javax.annotation.Nullable
  public Boolean getUppercaseLetter() {
    return uppercaseLetter;
  }

  public void setUppercaseLetter(Boolean uppercaseLetter) {
    this.uppercaseLetter = uppercaseLetter;
  }


  public PasswordPoliciesParams lowercaseLetter(Boolean lowercaseLetter) {
    this.lowercaseLetter = lowercaseLetter;
    return this;
  }

   /**
   * Mandate at least one lower letter in password.
   * @return lowercaseLetter
  **/
  @javax.annotation.Nullable
  public Boolean getLowercaseLetter() {
    return lowercaseLetter;
  }

  public void setLowercaseLetter(Boolean lowercaseLetter) {
    this.lowercaseLetter = lowercaseLetter;
  }


  public PasswordPoliciesParams specialCharacter(Boolean specialCharacter) {
    this.specialCharacter = specialCharacter;
    return this;
  }

   /**
   * Mandate at least one special character in password.
   * @return specialCharacter
  **/
  @javax.annotation.Nullable
  public Boolean getSpecialCharacter() {
    return specialCharacter;
  }

  public void setSpecialCharacter(Boolean specialCharacter) {
    this.specialCharacter = specialCharacter;
  }


  public PasswordPoliciesParams disallowUsernameAsPassword(Boolean disallowUsernameAsPassword) {
    this.disallowUsernameAsPassword = disallowUsernameAsPassword;
    return this;
  }

   /**
   * Disallows password containing case-insensitive user name or reversed user name.
   * @return disallowUsernameAsPassword
  **/
  @javax.annotation.Nullable
  public Boolean getDisallowUsernameAsPassword() {
    return disallowUsernameAsPassword;
  }

  public void setDisallowUsernameAsPassword(Boolean disallowUsernameAsPassword) {
    this.disallowUsernameAsPassword = disallowUsernameAsPassword;
  }


  public PasswordPoliciesParams maximumPasswordAttempts(Integer maximumPasswordAttempts) {
    this.maximumPasswordAttempts = maximumPasswordAttempts;
    return this;
  }

   /**
   * The number of allowed attempts for incorrect password, after which the account gets locked.
   * minimum: 0
   * maximum: 100
   * @return maximumPasswordAttempts
  **/
  @javax.annotation.Nullable
  public Integer getMaximumPasswordAttempts() {
    return maximumPasswordAttempts;
  }

  public void setMaximumPasswordAttempts(Integer maximumPasswordAttempts) {
    this.maximumPasswordAttempts = maximumPasswordAttempts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPoliciesParams passwordPoliciesParams = (PasswordPoliciesParams) o;
    return Objects.equals(this.enabled, passwordPoliciesParams.enabled) &&
        Objects.equals(this.minLength, passwordPoliciesParams.minLength) &&
        Objects.equals(this.reuseDisallowLimit, passwordPoliciesParams.reuseDisallowLimit) &&
        Objects.equals(this.digit, passwordPoliciesParams.digit) &&
        Objects.equals(this.uppercaseLetter, passwordPoliciesParams.uppercaseLetter) &&
        Objects.equals(this.lowercaseLetter, passwordPoliciesParams.lowercaseLetter) &&
        Objects.equals(this.specialCharacter, passwordPoliciesParams.specialCharacter) &&
        Objects.equals(this.disallowUsernameAsPassword, passwordPoliciesParams.disallowUsernameAsPassword) &&
        Objects.equals(this.maximumPasswordAttempts, passwordPoliciesParams.maximumPasswordAttempts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, minLength, reuseDisallowLimit, digit, uppercaseLetter, lowercaseLetter, specialCharacter, disallowUsernameAsPassword, maximumPasswordAttempts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPoliciesParams {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    reuseDisallowLimit: ").append(toIndentedString(reuseDisallowLimit)).append("\n");
    sb.append("    digit: ").append(toIndentedString(digit)).append("\n");
    sb.append("    uppercaseLetter: ").append(toIndentedString(uppercaseLetter)).append("\n");
    sb.append("    lowercaseLetter: ").append(toIndentedString(lowercaseLetter)).append("\n");
    sb.append("    specialCharacter: ").append(toIndentedString(specialCharacter)).append("\n");
    sb.append("    disallowUsernameAsPassword: ").append(toIndentedString(disallowUsernameAsPassword)).append("\n");
    sb.append("    maximumPasswordAttempts: ").append(toIndentedString(maximumPasswordAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("min_length");
    openapiFields.add("reuse_disallow_limit");
    openapiFields.add("digit");
    openapiFields.add("uppercase_letter");
    openapiFields.add("lowercase_letter");
    openapiFields.add("special_character");
    openapiFields.add("disallow_username_as_password");
    openapiFields.add("maximum_password_attempts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PasswordPoliciesParams
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordPoliciesParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPoliciesParams is not found in the empty JSON string", PasswordPoliciesParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordPoliciesParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordPoliciesParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPoliciesParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPoliciesParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPoliciesParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPoliciesParams.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPoliciesParams>() {
           @Override
           public void write(JsonWriter out, PasswordPoliciesParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPoliciesParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordPoliciesParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordPoliciesParams
  * @throws IOException if the JSON string is invalid with respect to PasswordPoliciesParams
  */
  public static PasswordPoliciesParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPoliciesParams.class);
  }

 /**
  * Convert an instance of PasswordPoliciesParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

