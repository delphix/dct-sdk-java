/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Specifies an additional location on which to mount a subdirectory of an AppData container.
 */
@ApiModel(description = "Specifies an additional location on which to mount a subdirectory of an AppData container.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T18:53:50.335381+05:30[Asia/Kolkata]")
public class AdditionalMountPoint {
  public static final String SERIALIZED_NAME_SHARED_PATH = "shared_path";
  @SerializedName(SERIALIZED_NAME_SHARED_PATH)
  private String sharedPath;

  public static final String SERIALIZED_NAME_MOUNT_PATH = "mount_path";
  @SerializedName(SERIALIZED_NAME_MOUNT_PATH)
  private String mountPath;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;


  public AdditionalMountPoint sharedPath(String sharedPath) {
    
    this.sharedPath = sharedPath;
    return this;
  }

   /**
   * Relative path within the container of the directory that should be mounted.
   * @return sharedPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/", value = "Relative path within the container of the directory that should be mounted.")

  public String getSharedPath() {
    return sharedPath;
  }


  public void setSharedPath(String sharedPath) {
    this.sharedPath = sharedPath;
  }


  public AdditionalMountPoint mountPath(String mountPath) {
    
    this.mountPath = mountPath;
    return this;
  }

   /**
   * Absolute path on the target environment were the filesystem should be mounted
   * @return mountPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/work/ws1", value = "Absolute path on the target environment were the filesystem should be mounted")

  public String getMountPath() {
    return mountPath;
  }


  public void setMountPath(String mountPath) {
    this.mountPath = mountPath;
  }


  public AdditionalMountPoint environmentId(String environmentId) {
    
    this.environmentId = environmentId;
    return this;
  }

   /**
   * The entity ID of the environment on which the file system will be mounted.
   * @return environmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "environment-123", value = "The entity ID of the environment on which the file system will be mounted.")

  public String getEnvironmentId() {
    return environmentId;
  }


  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalMountPoint additionalMountPoint = (AdditionalMountPoint) o;
    return Objects.equals(this.sharedPath, additionalMountPoint.sharedPath) &&
        Objects.equals(this.mountPath, additionalMountPoint.mountPath) &&
        Objects.equals(this.environmentId, additionalMountPoint.environmentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedPath, mountPath, environmentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalMountPoint {\n");
    sb.append("    sharedPath: ").append(toIndentedString(sharedPath)).append("\n");
    sb.append("    mountPath: ").append(toIndentedString(mountPath)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

