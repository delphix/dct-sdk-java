/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A log containing warnings or errors associated with a job execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ExecutionLog {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "execution_id";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  public static final String SERIALIZED_NAME_MASKING_JOB_ID = "masking_job_id";
  @SerializedName(SERIALIZED_NAME_MASKING_JOB_ID)
  private String maskingJobId;

  /**
   * The status of the execution regarding its completion.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED"),
    
    QUEUED("QUEUED"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_LOG = "log";
  @SerializedName(SERIALIZED_NAME_LOG)
  private String log;

  public ExecutionLog() {
  }

  public ExecutionLog id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ExecutionLog entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExecutionLog executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

   /**
   * The ID of the execution.
   * @return executionId
  **/
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public ExecutionLog maskingJobId(String maskingJobId) {
    this.maskingJobId = maskingJobId;
    return this;
  }

   /**
   * The ID of the masking job that is being executed.
   * @return maskingJobId
  **/
  @javax.annotation.Nullable
  public String getMaskingJobId() {
    return maskingJobId;
  }

  public void setMaskingJobId(String maskingJobId) {
    this.maskingJobId = maskingJobId;
  }


  public ExecutionLog status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the execution regarding its completion.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ExecutionLog log(String log) {
    this.log = log;
    return this;
  }

   /**
   * The log file contents.
   * @return log
  **/
  @javax.annotation.Nullable
  public String getLog() {
    return log;
  }

  public void setLog(String log) {
    this.log = log;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionLog executionLog = (ExecutionLog) o;
    return Objects.equals(this.id, executionLog.id) &&
        Objects.equals(this.executionId, executionLog.executionId) &&
        Objects.equals(this.maskingJobId, executionLog.maskingJobId) &&
        Objects.equals(this.status, executionLog.status) &&
        Objects.equals(this.log, executionLog.log);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, executionId, maskingJobId, status, log);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionLog {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    maskingJobId: ").append(toIndentedString(maskingJobId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("execution_id");
    openapiFields.add("masking_job_id");
    openapiFields.add("status");
    openapiFields.add("log");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExecutionLog
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionLog is not found in the empty JSON string", ExecutionLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("execution_id") != null && !jsonObj.get("execution_id").isJsonNull()) && !jsonObj.get("execution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution_id").toString()));
      }
      if ((jsonObj.get("masking_job_id") != null && !jsonObj.get("masking_job_id").isJsonNull()) && !jsonObj.get("masking_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masking_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masking_job_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("log") != null && !jsonObj.get("log").isJsonNull()) && !jsonObj.get("log").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionLog.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionLog>() {
           @Override
           public void write(JsonWriter out, ExecutionLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecutionLog given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecutionLog
  * @throws IOException if the JSON string is invalid with respect to ExecutionLog
  */
  public static ExecutionLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionLog.class);
  }

 /**
  * Convert an instance of ExecutionLog to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

