/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Parameters to check connectivity between engine and remote host.
 */
@ApiModel(description = "Parameters to check connectivity between engine and remote host.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T18:53:50.335381+05:30[Asia/Kolkata]")
public class ConnectivityCheckParameters {
  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY = "use_engine_public_key";
  @SerializedName(SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY)
  private Boolean useEnginePublicKey;

  /**
   * Operating system type of the environment.
   */
  @JsonAdapter(OsNameEnum.Adapter.class)
  public enum OsNameEnum {
    UNIX("UNIX"),
    
    WINDOWS("WINDOWS");

    private String value;

    OsNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsNameEnum fromValue(String value) {
      for (OsNameEnum b : OsNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OS_NAME = "os_name";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private OsNameEnum osName;

  public static final String SERIALIZED_NAME_STAGING_ENVIRONMENT = "staging_environment";
  @SerializedName(SERIALIZED_NAME_STAGING_ENVIRONMENT)
  private String stagingEnvironment;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;


  public ConnectivityCheckParameters engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the engine to check.
   * @return engineId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "engine-123", required = true, value = "The ID of the engine to check.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public ConnectivityCheckParameters useEnginePublicKey(Boolean useEnginePublicKey) {
    
    this.useEnginePublicKey = useEnginePublicKey;
    return this;
  }

   /**
   * Whether to use public key authentication.
   * @return useEnginePublicKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to use public key authentication.")

  public Boolean getUseEnginePublicKey() {
    return useEnginePublicKey;
  }


  public void setUseEnginePublicKey(Boolean useEnginePublicKey) {
    this.useEnginePublicKey = useEnginePublicKey;
  }


  public ConnectivityCheckParameters osName(OsNameEnum osName) {
    
    this.osName = osName;
    return this;
  }

   /**
   * Operating system type of the environment.
   * @return osName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "UNIX", value = "Operating system type of the environment.")

  public OsNameEnum getOsName() {
    return osName;
  }


  public void setOsName(OsNameEnum osName) {
    this.osName = osName;
  }


  public ConnectivityCheckParameters stagingEnvironment(String stagingEnvironment) {
    
    this.stagingEnvironment = stagingEnvironment;
    return this;
  }

   /**
   * Id of the connector environment which is used to connect to this source environment.
   * @return stagingEnvironment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1-WINDOWS_HOST-1", value = "Id of the connector environment which is used to connect to this source environment.")

  public String getStagingEnvironment() {
    return stagingEnvironment;
  }


  public void setStagingEnvironment(String stagingEnvironment) {
    this.stagingEnvironment = stagingEnvironment;
  }


  public ConnectivityCheckParameters host(String host) {
    
    this.host = host;
    return this;
  }

   /**
   * The hostname of the remote host machine to check.
   * @return host
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "test.host.com", required = true, value = "The hostname of the remote host machine to check.")

  public String getHost() {
    return host;
  }


  public void setHost(String host) {
    this.host = host;
  }


  public ConnectivityCheckParameters port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * The port of the remote host machine to check. For Windows, port on which Delphix connector is running.
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "22", required = true, value = "The port of the remote host machine to check. For Windows, port on which Delphix connector is running.")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public ConnectivityCheckParameters username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * The username of the remote host machine to check.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "The username of the remote host machine to check.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public ConnectivityCheckParameters password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * The password of the remote host machine to check.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "password", value = "The password of the remote host machine to check.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectivityCheckParameters connectivityCheckParameters = (ConnectivityCheckParameters) o;
    return Objects.equals(this.engineId, connectivityCheckParameters.engineId) &&
        Objects.equals(this.useEnginePublicKey, connectivityCheckParameters.useEnginePublicKey) &&
        Objects.equals(this.osName, connectivityCheckParameters.osName) &&
        Objects.equals(this.stagingEnvironment, connectivityCheckParameters.stagingEnvironment) &&
        Objects.equals(this.host, connectivityCheckParameters.host) &&
        Objects.equals(this.port, connectivityCheckParameters.port) &&
        Objects.equals(this.username, connectivityCheckParameters.username) &&
        Objects.equals(this.password, connectivityCheckParameters.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engineId, useEnginePublicKey, osName, stagingEnvironment, host, port, username, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectivityCheckParameters {\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    useEnginePublicKey: ").append(toIndentedString(useEnginePublicKey)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    stagingEnvironment: ").append(toIndentedString(stagingEnvironment)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

