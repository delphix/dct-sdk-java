/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Engine;
import com.delphix.dct.models.Tag;
import com.delphix.dct.models.VirtualizationTask;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * An asynchronous task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Job {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the job.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    STARTED("STARTED"),
    
    TIMEDOUT("TIMEDOUT"),
    
    RUNNING("RUNNING"),
    
    CANCELED("CANCELED"),
    
    FAILED("FAILED"),
    
    SUSPENDED("SUSPENDED"),
    
    WAITING("WAITING"),
    
    COMPLETED("COMPLETED"),
    
    ABANDONED("ABANDONED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_IS_WAITING_FOR_TELEMETRY = "is_waiting_for_telemetry";
  @SerializedName(SERIALIZED_NAME_IS_WAITING_FOR_TELEMETRY)
  private Boolean isWaitingForTelemetry;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_LOCALIZED_TYPE = "localized_type";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_TYPE)
  private String localizedType;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "error_details";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private String errorDetails;

  public static final String SERIALIZED_NAME_WARNING_MESSAGE = "warning_message";
  @SerializedName(SERIALIZED_NAME_WARNING_MESSAGE)
  private String warningMessage;

  public static final String SERIALIZED_NAME_TARGET_ID = "target_id";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_NAME = "target_name";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  private String targetName;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_TRACE_ID = "trace_id";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  private String traceId;

  public static final String SERIALIZED_NAME_ENGINE_IDS = "engine_ids";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ENGINE_IDS)
  private List<String> engineIds;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_ENGINES = "engines";
  @SerializedName(SERIALIZED_NAME_ENGINES)
  private List<Engine> engines;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percent_complete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_VIRTUALIZATION_TASKS = "virtualization_tasks";
  @SerializedName(SERIALIZED_NAME_VIRTUALIZATION_TASKS)
  private List<VirtualizationTask> virtualizationTasks;

  public Job() {
  }

  public Job id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Job entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Job status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the job.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Job isWaitingForTelemetry(Boolean isWaitingForTelemetry) {
    this.isWaitingForTelemetry = isWaitingForTelemetry;
    return this;
  }

   /**
   * Indicates that the operations performed by this Job have completed successfully, but the object changes are not yet reflected. This is only set when when the JOB is in STARTED status, with the guarantee that the job will not transition to the FAILED status. Note that this flag will likely be replaced with a new status in future API versions and be deprecated.
   * @return isWaitingForTelemetry
  **/
  @javax.annotation.Nullable
  public Boolean getIsWaitingForTelemetry() {
    return isWaitingForTelemetry;
  }

  public void setIsWaitingForTelemetry(Boolean isWaitingForTelemetry) {
    this.isWaitingForTelemetry = isWaitingForTelemetry;
  }


  @Deprecated
  public Job type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of job being done.
   * @return type
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  @Deprecated
  public void setType(String type) {
    this.type = type;
  }


  public Job localizedType(String localizedType) {
    this.localizedType = localizedType;
    return this;
  }

   /**
   * The i18n translated type of job being done.
   * @return localizedType
  **/
  @javax.annotation.Nullable
  public String getLocalizedType() {
    return localizedType;
  }

  public void setLocalizedType(String localizedType) {
    this.localizedType = localizedType;
  }


  public Job errorDetails(String errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

   /**
   * Details about the failure for FAILED jobs.
   * @return errorDetails
  **/
  @javax.annotation.Nullable
  public String getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(String errorDetails) {
    this.errorDetails = errorDetails;
  }


  public Job warningMessage(String warningMessage) {
    this.warningMessage = warningMessage;
    return this;
  }

   /**
   * Warnings for the job.
   * @return warningMessage
  **/
  @javax.annotation.Nullable
  public String getWarningMessage() {
    return warningMessage;
  }

  public void setWarningMessage(String warningMessage) {
    this.warningMessage = warningMessage;
  }


  public Job targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

   /**
   * A reference to the job&#39;s target.
   * @return targetId
  **/
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public Job targetName(String targetName) {
    this.targetName = targetName;
    return this;
  }

   /**
   * A reference to the job&#39;s target name.
   * @return targetName
  **/
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }


  public Job startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The time the job started executing.
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Job updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The time the job was last updated.
   * @return updateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public Job traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

   /**
   * traceId of the request which created this Job
   * @return traceId
  **/
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }


  @Deprecated
  public Job engineIds(List<String> engineIds) {
    this.engineIds = engineIds;
    return this;
  }

  public Job addEngineIdsItem(String engineIdsItem) {
    if (this.engineIds == null) {
      this.engineIds = new ArrayList<>();
    }
    this.engineIds.add(engineIdsItem);
    return this;
  }

   /**
   * IDs of the engines this Job is executing on.
   * @return engineIds
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getEngineIds() {
    return engineIds;
  }

  @Deprecated
  public void setEngineIds(List<String> engineIds) {
    this.engineIds = engineIds;
  }


  public Job tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Job addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public Job engines(List<Engine> engines) {
    this.engines = engines;
    return this;
  }

  public Job addEnginesItem(Engine enginesItem) {
    if (this.engines == null) {
      this.engines = new ArrayList<>();
    }
    this.engines.add(enginesItem);
    return this;
  }

   /**
   * Get engines
   * @return engines
  **/
  @javax.annotation.Nullable
  public List<Engine> getEngines() {
    return engines;
  }

  public void setEngines(List<Engine> engines) {
    this.engines = engines;
  }


  public Job accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * The ID of the account who initiated this job.
   * @return accountId
  **/
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public Job accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * The account name which initiated this job. It can be either firstname and lastname combination or firstname or lastname or username or email address or Account-&lt;id&gt;.
   * @return accountName
  **/
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public Job percentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

   /**
   * Completion percentage of the Job.
   * minimum: 0
   * maximum: 100
   * @return percentComplete
  **/
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
  }


  public Job virtualizationTasks(List<VirtualizationTask> virtualizationTasks) {
    this.virtualizationTasks = virtualizationTasks;
    return this;
  }

  public Job addVirtualizationTasksItem(VirtualizationTask virtualizationTasksItem) {
    if (this.virtualizationTasks == null) {
      this.virtualizationTasks = new ArrayList<>();
    }
    this.virtualizationTasks.add(virtualizationTasksItem);
    return this;
  }

   /**
   * Get virtualizationTasks
   * @return virtualizationTasks
  **/
  @javax.annotation.Nullable
  public List<VirtualizationTask> getVirtualizationTasks() {
    return virtualizationTasks;
  }

  public void setVirtualizationTasks(List<VirtualizationTask> virtualizationTasks) {
    this.virtualizationTasks = virtualizationTasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.id, job.id) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.isWaitingForTelemetry, job.isWaitingForTelemetry) &&
        Objects.equals(this.type, job.type) &&
        Objects.equals(this.localizedType, job.localizedType) &&
        Objects.equals(this.errorDetails, job.errorDetails) &&
        Objects.equals(this.warningMessage, job.warningMessage) &&
        Objects.equals(this.targetId, job.targetId) &&
        Objects.equals(this.targetName, job.targetName) &&
        Objects.equals(this.startTime, job.startTime) &&
        Objects.equals(this.updateTime, job.updateTime) &&
        Objects.equals(this.traceId, job.traceId) &&
        Objects.equals(this.engineIds, job.engineIds) &&
        Objects.equals(this.tags, job.tags) &&
        Objects.equals(this.engines, job.engines) &&
        Objects.equals(this.accountId, job.accountId) &&
        Objects.equals(this.accountName, job.accountName) &&
        Objects.equals(this.percentComplete, job.percentComplete) &&
        Objects.equals(this.virtualizationTasks, job.virtualizationTasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, isWaitingForTelemetry, type, localizedType, errorDetails, warningMessage, targetId, targetName, startTime, updateTime, traceId, engineIds, tags, engines, accountId, accountName, percentComplete, virtualizationTasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isWaitingForTelemetry: ").append(toIndentedString(isWaitingForTelemetry)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    localizedType: ").append(toIndentedString(localizedType)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    warningMessage: ").append(toIndentedString(warningMessage)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    engineIds: ").append(toIndentedString(engineIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    engines: ").append(toIndentedString(engines)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    virtualizationTasks: ").append(toIndentedString(virtualizationTasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("is_waiting_for_telemetry");
    openapiFields.add("type");
    openapiFields.add("localized_type");
    openapiFields.add("error_details");
    openapiFields.add("warning_message");
    openapiFields.add("target_id");
    openapiFields.add("target_name");
    openapiFields.add("start_time");
    openapiFields.add("update_time");
    openapiFields.add("trace_id");
    openapiFields.add("engine_ids");
    openapiFields.add("tags");
    openapiFields.add("engines");
    openapiFields.add("account_id");
    openapiFields.add("account_name");
    openapiFields.add("percent_complete");
    openapiFields.add("virtualization_tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Job
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("localized_type") != null && !jsonObj.get("localized_type").isJsonNull()) && !jsonObj.get("localized_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localized_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localized_type").toString()));
      }
      if ((jsonObj.get("error_details") != null && !jsonObj.get("error_details").isJsonNull()) && !jsonObj.get("error_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_details").toString()));
      }
      if ((jsonObj.get("warning_message") != null && !jsonObj.get("warning_message").isJsonNull()) && !jsonObj.get("warning_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning_message").toString()));
      }
      if ((jsonObj.get("target_id") != null && !jsonObj.get("target_id").isJsonNull()) && !jsonObj.get("target_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_id").toString()));
      }
      if ((jsonObj.get("target_name") != null && !jsonObj.get("target_name").isJsonNull()) && !jsonObj.get("target_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_name").toString()));
      }
      if ((jsonObj.get("trace_id") != null && !jsonObj.get("trace_id").isJsonNull()) && !jsonObj.get("trace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trace_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("engine_ids") != null && !jsonObj.get("engine_ids").isJsonNull() && !jsonObj.get("engine_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_ids` to be an array in the JSON string but got `%s`", jsonObj.get("engine_ids").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("engines") != null && !jsonObj.get("engines").isJsonNull()) {
        JsonArray jsonArrayengines = jsonObj.getAsJsonArray("engines");
        if (jsonArrayengines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("engines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `engines` to be an array in the JSON string but got `%s`", jsonObj.get("engines").toString()));
          }

          // validate the optional field `engines` (array)
          for (int i = 0; i < jsonArrayengines.size(); i++) {
            Engine.validateJsonElement(jsonArrayengines.get(i));
          };
        }
      }
      if ((jsonObj.get("account_name") != null && !jsonObj.get("account_name").isJsonNull()) && !jsonObj.get("account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_name").toString()));
      }
      if (jsonObj.get("virtualization_tasks") != null && !jsonObj.get("virtualization_tasks").isJsonNull()) {
        JsonArray jsonArrayvirtualizationTasks = jsonObj.getAsJsonArray("virtualization_tasks");
        if (jsonArrayvirtualizationTasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualization_tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualization_tasks` to be an array in the JSON string but got `%s`", jsonObj.get("virtualization_tasks").toString()));
          }

          // validate the optional field `virtualization_tasks` (array)
          for (int i = 0; i < jsonArrayvirtualizationTasks.size(); i++) {
            VirtualizationTask.validateJsonElement(jsonArrayvirtualizationTasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Job
  * @throws IOException if the JSON string is invalid with respect to Job
  */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

 /**
  * Convert an instance of Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

