/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.NameValuePair;
import com.delphix.dct.models.SourceOperation;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * OracleStagingPushDSourceLinkSourceParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class OracleStagingPushDSourceLinkSourceParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOG_SYNC_ENABLED = "log_sync_enabled";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_ENABLED)
  private Boolean logSyncEnabled = false;

  public static final String SERIALIZED_NAME_SYNC_POLICY_ID = "sync_policy_id";
  @SerializedName(SERIALIZED_NAME_SYNC_POLICY_ID)
  private String syncPolicyId;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_ID = "retention_policy_id";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_ID)
  private String retentionPolicyId;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_OPS_PRE_SYNC = "ops_pre_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_SYNC)
  private List<SourceOperation> opsPreSync;

  public static final String SERIALIZED_NAME_OPS_POST_SYNC = "ops_post_sync";
  @SerializedName(SERIALIZED_NAME_OPS_POST_SYNC)
  private List<SourceOperation> opsPostSync;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  /**
   * The container type of this database.If not provided the request would be considered as a PDB database.
   */
  @JsonAdapter(ContainerTypeEnum.Adapter.class)
  public enum ContainerTypeEnum {
    ROOT_CDB("ROOT_CDB"),
    
    NON_CDB("NON_CDB");

    private String value;

    ContainerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContainerTypeEnum fromValue(String value) {
      for (ContainerTypeEnum b : ContainerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContainerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContainerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContainerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContainerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContainerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "container_type";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private ContainerTypeEnum containerType;

  public static final String SERIALIZED_NAME_ENVIRONMENT_USER_ID = "environment_user_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_USER_ID)
  private String environmentUserId;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "database_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DATABASE_UNIQUE_NAME = "database_unique_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_UNIQUE_NAME)
  private String databaseUniqueName;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  private String sid;

  public static final String SERIALIZED_NAME_MOUNT_BASE = "mount_base";
  @SerializedName(SERIALIZED_NAME_MOUNT_BASE)
  private String mountBase;

  public static final String SERIALIZED_NAME_CUSTOM_ENV_VARIABLES_PAIRS = "custom_env_variables_pairs";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ENV_VARIABLES_PAIRS)
  private List<NameValuePair> customEnvVariablesPairs;

  public static final String SERIALIZED_NAME_CUSTOM_ENV_VARIABLES_PATHS = "custom_env_variables_paths";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ENV_VARIABLES_PATHS)
  private List<String> customEnvVariablesPaths;

  public static final String SERIALIZED_NAME_AUTO_STAGING_RESTART = "auto_staging_restart";
  @SerializedName(SERIALIZED_NAME_AUTO_STAGING_RESTART)
  private Boolean autoStagingRestart = false;

  public static final String SERIALIZED_NAME_PHYSICAL_STANDBY = "physical_standby";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_STANDBY)
  private Boolean physicalStandby = false;

  public static final String SERIALIZED_NAME_VALIDATE_SNAPSHOT_IN_READONLY = "validate_snapshot_in_readonly";
  @SerializedName(SERIALIZED_NAME_VALIDATE_SNAPSHOT_IN_READONLY)
  private Boolean validateSnapshotInReadonly = false;

  public static final String SERIALIZED_NAME_STAGING_DATABASE_TEMPLATES = "staging_database_templates";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STAGING_DATABASE_TEMPLATES)
  private List<NameValuePair> stagingDatabaseTemplates;

  public static final String SERIALIZED_NAME_STAGING_DATABASE_CONFIG_PARAMS = "staging_database_config_params";
  @SerializedName(SERIALIZED_NAME_STAGING_DATABASE_CONFIG_PARAMS)
  private Map<String, String> stagingDatabaseConfigParams;

  public static final String SERIALIZED_NAME_STAGING_CONTAINER_DATABASE_REFERENCE = "staging_container_database_reference";
  @SerializedName(SERIALIZED_NAME_STAGING_CONTAINER_DATABASE_REFERENCE)
  private String stagingContainerDatabaseReference;

  public static final String SERIALIZED_NAME_OPS_PRE_LOG_SYNC = "ops_pre_log_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_LOG_SYNC)
  private List<SourceOperation> opsPreLogSync;

  /**
   * The type of TDE keystore configuration to use for the staging database.
   */
  @JsonAdapter(TdeKeystoreConfigTypeEnum.Adapter.class)
  public enum TdeKeystoreConfigTypeEnum {
    FILE("FILE"),
    
    OKV("OKV"),
    
    HSM("HSM");

    private String value;

    TdeKeystoreConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TdeKeystoreConfigTypeEnum fromValue(String value) {
      for (TdeKeystoreConfigTypeEnum b : TdeKeystoreConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TdeKeystoreConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TdeKeystoreConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TdeKeystoreConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TdeKeystoreConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TdeKeystoreConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TDE_KEYSTORE_CONFIG_TYPE = "tde_keystore_config_type";
  @SerializedName(SERIALIZED_NAME_TDE_KEYSTORE_CONFIG_TYPE)
  private TdeKeystoreConfigTypeEnum tdeKeystoreConfigType;

  public OracleStagingPushDSourceLinkSourceParameters() {
  }

  public OracleStagingPushDSourceLinkSourceParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the dSource to be created.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OracleStagingPushDSourceLinkSourceParameters sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Id of the source to link.
   * @return sourceId
  **/
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public OracleStagingPushDSourceLinkSourceParameters groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Id of the dataset group where this dSource should belong to.
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public OracleStagingPushDSourceLinkSourceParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The notes/description for the dSource.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OracleStagingPushDSourceLinkSourceParameters logSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
    return this;
  }

   /**
   * True if LogSync should run for this database.
   * @return logSyncEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getLogSyncEnabled() {
    return logSyncEnabled;
  }

  public void setLogSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
  }


  public OracleStagingPushDSourceLinkSourceParameters syncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
    return this;
  }

   /**
   * The ID of the SnapSync policy for the dSource.
   * @return syncPolicyId
  **/
  @javax.annotation.Nullable
  public String getSyncPolicyId() {
    return syncPolicyId;
  }

  public void setSyncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
  }


  public OracleStagingPushDSourceLinkSourceParameters retentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
    return this;
  }

   /**
   * The ID of the Retention policy for the dSource.
   * @return retentionPolicyId
  **/
  @javax.annotation.Nullable
  public String getRetentionPolicyId() {
    return retentionPolicyId;
  }

  public void setRetentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
  }


  public OracleStagingPushDSourceLinkSourceParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this reporting schedule must be configured as owner of the reporting schedule.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }


  public OracleStagingPushDSourceLinkSourceParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for dSource.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public OracleStagingPushDSourceLinkSourceParameters opsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addOpsPreSyncItem(SourceOperation opsPreSyncItem) {
    if (this.opsPreSync == null) {
      this.opsPreSync = new ArrayList<>();
    }
    this.opsPreSync.add(opsPreSyncItem);
    return this;
  }

   /**
   * Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
   * @return opsPreSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPreSync() {
    return opsPreSync;
  }

  public void setOpsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
  }


  public OracleStagingPushDSourceLinkSourceParameters opsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addOpsPostSyncItem(SourceOperation opsPostSyncItem) {
    if (this.opsPostSync == null) {
      this.opsPostSync = new ArrayList<>();
    }
    this.opsPostSync.add(opsPostSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource.
   * @return opsPostSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPostSync() {
    return opsPostSync;
  }

  public void setOpsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
  }


  public OracleStagingPushDSourceLinkSourceParameters engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the engine to link staging push database on.
   * @return engineId
  **/
  @javax.annotation.Nonnull
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public OracleStagingPushDSourceLinkSourceParameters containerType(ContainerTypeEnum containerType) {
    this.containerType = containerType;
    return this;
  }

   /**
   * The container type of this database.If not provided the request would be considered as a PDB database.
   * @return containerType
  **/
  @javax.annotation.Nullable
  public ContainerTypeEnum getContainerType() {
    return containerType;
  }

  public void setContainerType(ContainerTypeEnum containerType) {
    this.containerType = containerType;
  }


  public OracleStagingPushDSourceLinkSourceParameters environmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
    return this;
  }

   /**
   * Id of the environment user to use for linking.
   * @return environmentUserId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentUserId() {
    return environmentUserId;
  }

  public void setEnvironmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
  }


  public OracleStagingPushDSourceLinkSourceParameters repository(String repository) {
    this.repository = repository;
    return this;
  }

   /**
   * The repository reference to link.
   * @return repository
  **/
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public OracleStagingPushDSourceLinkSourceParameters databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * The name of the database.
   * @return databaseName
  **/
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public OracleStagingPushDSourceLinkSourceParameters databaseUniqueName(String databaseUniqueName) {
    this.databaseUniqueName = databaseUniqueName;
    return this;
  }

   /**
   * The unique name of the database.
   * @return databaseUniqueName
  **/
  @javax.annotation.Nullable
  public String getDatabaseUniqueName() {
    return databaseUniqueName;
  }

  public void setDatabaseUniqueName(String databaseUniqueName) {
    this.databaseUniqueName = databaseUniqueName;
  }


  public OracleStagingPushDSourceLinkSourceParameters sid(String sid) {
    this.sid = sid;
    return this;
  }

   /**
   * The name (sid) of the instance.
   * @return sid
  **/
  @javax.annotation.Nullable
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }


  public OracleStagingPushDSourceLinkSourceParameters mountBase(String mountBase) {
    this.mountBase = mountBase;
    return this;
  }

   /**
   * The base mount point to use for the NFS mounts.
   * @return mountBase
  **/
  @javax.annotation.Nullable
  public String getMountBase() {
    return mountBase;
  }

  public void setMountBase(String mountBase) {
    this.mountBase = mountBase;
  }


  public OracleStagingPushDSourceLinkSourceParameters customEnvVariablesPairs(List<NameValuePair> customEnvVariablesPairs) {
    this.customEnvVariablesPairs = customEnvVariablesPairs;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addCustomEnvVariablesPairsItem(NameValuePair customEnvVariablesPairsItem) {
    if (this.customEnvVariablesPairs == null) {
      this.customEnvVariablesPairs = new ArrayList<>();
    }
    this.customEnvVariablesPairs.add(customEnvVariablesPairsItem);
    return this;
  }

   /**
   * An array of name value pair of environment variables.
   * @return customEnvVariablesPairs
  **/
  @javax.annotation.Nullable
  public List<NameValuePair> getCustomEnvVariablesPairs() {
    return customEnvVariablesPairs;
  }

  public void setCustomEnvVariablesPairs(List<NameValuePair> customEnvVariablesPairs) {
    this.customEnvVariablesPairs = customEnvVariablesPairs;
  }


  public OracleStagingPushDSourceLinkSourceParameters customEnvVariablesPaths(List<String> customEnvVariablesPaths) {
    this.customEnvVariablesPaths = customEnvVariablesPaths;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addCustomEnvVariablesPathsItem(String customEnvVariablesPathsItem) {
    if (this.customEnvVariablesPaths == null) {
      this.customEnvVariablesPaths = new ArrayList<>();
    }
    this.customEnvVariablesPaths.add(customEnvVariablesPathsItem);
    return this;
  }

   /**
   * An array of strings of whitespace-separated parameters to be passed to the source command. The first parameter must be an absolute path to a file that exists on the target environment. Every subsequent parameter will be treated as an argument interpreted by the environment file.
   * @return customEnvVariablesPaths
  **/
  @javax.annotation.Nullable
  public List<String> getCustomEnvVariablesPaths() {
    return customEnvVariablesPaths;
  }

  public void setCustomEnvVariablesPaths(List<String> customEnvVariablesPaths) {
    this.customEnvVariablesPaths = customEnvVariablesPaths;
  }


  public OracleStagingPushDSourceLinkSourceParameters autoStagingRestart(Boolean autoStagingRestart) {
    this.autoStagingRestart = autoStagingRestart;
    return this;
  }

   /**
   * Boolean value indicates whether this staging database should automatically be restarted when staging host reboot is detected.
   * @return autoStagingRestart
  **/
  @javax.annotation.Nullable
  public Boolean getAutoStagingRestart() {
    return autoStagingRestart;
  }

  public void setAutoStagingRestart(Boolean autoStagingRestart) {
    this.autoStagingRestart = autoStagingRestart;
  }


  public OracleStagingPushDSourceLinkSourceParameters physicalStandby(Boolean physicalStandby) {
    this.physicalStandby = physicalStandby;
    return this;
  }

   /**
   * Boolean value indicates whether this staging database will be configured as a physical standby.
   * @return physicalStandby
  **/
  @javax.annotation.Nullable
  public Boolean getPhysicalStandby() {
    return physicalStandby;
  }

  public void setPhysicalStandby(Boolean physicalStandby) {
    this.physicalStandby = physicalStandby;
  }


  public OracleStagingPushDSourceLinkSourceParameters validateSnapshotInReadonly(Boolean validateSnapshotInReadonly) {
    this.validateSnapshotInReadonly = validateSnapshotInReadonly;
    return this;
  }

   /**
   * Boolean value indicates whether this staging database snapshot will be validated by opening it in read-only.
   * @return validateSnapshotInReadonly
  **/
  @javax.annotation.Nullable
  public Boolean getValidateSnapshotInReadonly() {
    return validateSnapshotInReadonly;
  }

  public void setValidateSnapshotInReadonly(Boolean validateSnapshotInReadonly) {
    this.validateSnapshotInReadonly = validateSnapshotInReadonly;
  }


  @Deprecated
  public OracleStagingPushDSourceLinkSourceParameters stagingDatabaseTemplates(List<NameValuePair> stagingDatabaseTemplates) {
    this.stagingDatabaseTemplates = stagingDatabaseTemplates;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addStagingDatabaseTemplatesItem(NameValuePair stagingDatabaseTemplatesItem) {
    if (this.stagingDatabaseTemplates == null) {
      this.stagingDatabaseTemplates = new ArrayList<>();
    }
    this.stagingDatabaseTemplates.add(stagingDatabaseTemplatesItem);
    return this;
  }

   /**
   * An array of name value pair of Oracle database configuration parameter overrides. This property is deprecated. Use staging_database_config_params instead.
   * @return stagingDatabaseTemplates
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public List<NameValuePair> getStagingDatabaseTemplates() {
    return stagingDatabaseTemplates;
  }

  @Deprecated
  public void setStagingDatabaseTemplates(List<NameValuePair> stagingDatabaseTemplates) {
    this.stagingDatabaseTemplates = stagingDatabaseTemplates;
  }


  public OracleStagingPushDSourceLinkSourceParameters stagingDatabaseConfigParams(Map<String, String> stagingDatabaseConfigParams) {
    this.stagingDatabaseConfigParams = stagingDatabaseConfigParams;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters putStagingDatabaseConfigParamsItem(String key, String stagingDatabaseConfigParamsItem) {
    if (this.stagingDatabaseConfigParams == null) {
      this.stagingDatabaseConfigParams = new HashMap<>();
    }
    this.stagingDatabaseConfigParams.put(key, stagingDatabaseConfigParamsItem);
    return this;
  }

   /**
   * Oracle database configuration parameter overrides. If both staging_database_templates and staging_database_config_params are specified, staging_database_config_params will be used.
   * @return stagingDatabaseConfigParams
  **/
  @javax.annotation.Nullable
  public Map<String, String> getStagingDatabaseConfigParams() {
    return stagingDatabaseConfigParams;
  }

  public void setStagingDatabaseConfigParams(Map<String, String> stagingDatabaseConfigParams) {
    this.stagingDatabaseConfigParams = stagingDatabaseConfigParams;
  }


  public OracleStagingPushDSourceLinkSourceParameters stagingContainerDatabaseReference(String stagingContainerDatabaseReference) {
    this.stagingContainerDatabaseReference = stagingContainerDatabaseReference;
    return this;
  }

   /**
   * Reference of the CDB source config.
   * @return stagingContainerDatabaseReference
  **/
  @javax.annotation.Nullable
  public String getStagingContainerDatabaseReference() {
    return stagingContainerDatabaseReference;
  }

  public void setStagingContainerDatabaseReference(String stagingContainerDatabaseReference) {
    this.stagingContainerDatabaseReference = stagingContainerDatabaseReference;
  }


  public OracleStagingPushDSourceLinkSourceParameters opsPreLogSync(List<SourceOperation> opsPreLogSync) {
    this.opsPreLogSync = opsPreLogSync;
    return this;
  }

  public OracleStagingPushDSourceLinkSourceParameters addOpsPreLogSyncItem(SourceOperation opsPreLogSyncItem) {
    if (this.opsPreLogSync == null) {
      this.opsPreLogSync = new ArrayList<>();
    }
    this.opsPreLogSync.add(opsPreLogSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource and before running the LogSync.
   * @return opsPreLogSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPreLogSync() {
    return opsPreLogSync;
  }

  public void setOpsPreLogSync(List<SourceOperation> opsPreLogSync) {
    this.opsPreLogSync = opsPreLogSync;
  }


  public OracleStagingPushDSourceLinkSourceParameters tdeKeystoreConfigType(TdeKeystoreConfigTypeEnum tdeKeystoreConfigType) {
    this.tdeKeystoreConfigType = tdeKeystoreConfigType;
    return this;
  }

   /**
   * The type of TDE keystore configuration to use for the staging database.
   * @return tdeKeystoreConfigType
  **/
  @javax.annotation.Nullable
  public TdeKeystoreConfigTypeEnum getTdeKeystoreConfigType() {
    return tdeKeystoreConfigType;
  }

  public void setTdeKeystoreConfigType(TdeKeystoreConfigTypeEnum tdeKeystoreConfigType) {
    this.tdeKeystoreConfigType = tdeKeystoreConfigType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OracleStagingPushDSourceLinkSourceParameters oracleStagingPushDSourceLinkSourceParameters = (OracleStagingPushDSourceLinkSourceParameters) o;
    return Objects.equals(this.name, oracleStagingPushDSourceLinkSourceParameters.name) &&
        Objects.equals(this.sourceId, oracleStagingPushDSourceLinkSourceParameters.sourceId) &&
        Objects.equals(this.groupId, oracleStagingPushDSourceLinkSourceParameters.groupId) &&
        Objects.equals(this.description, oracleStagingPushDSourceLinkSourceParameters.description) &&
        Objects.equals(this.logSyncEnabled, oracleStagingPushDSourceLinkSourceParameters.logSyncEnabled) &&
        Objects.equals(this.syncPolicyId, oracleStagingPushDSourceLinkSourceParameters.syncPolicyId) &&
        Objects.equals(this.retentionPolicyId, oracleStagingPushDSourceLinkSourceParameters.retentionPolicyId) &&
        Objects.equals(this.makeCurrentAccountOwner, oracleStagingPushDSourceLinkSourceParameters.makeCurrentAccountOwner) &&
        Objects.equals(this.tags, oracleStagingPushDSourceLinkSourceParameters.tags) &&
        Objects.equals(this.opsPreSync, oracleStagingPushDSourceLinkSourceParameters.opsPreSync) &&
        Objects.equals(this.opsPostSync, oracleStagingPushDSourceLinkSourceParameters.opsPostSync) &&
        Objects.equals(this.engineId, oracleStagingPushDSourceLinkSourceParameters.engineId) &&
        Objects.equals(this.containerType, oracleStagingPushDSourceLinkSourceParameters.containerType) &&
        Objects.equals(this.environmentUserId, oracleStagingPushDSourceLinkSourceParameters.environmentUserId) &&
        Objects.equals(this.repository, oracleStagingPushDSourceLinkSourceParameters.repository) &&
        Objects.equals(this.databaseName, oracleStagingPushDSourceLinkSourceParameters.databaseName) &&
        Objects.equals(this.databaseUniqueName, oracleStagingPushDSourceLinkSourceParameters.databaseUniqueName) &&
        Objects.equals(this.sid, oracleStagingPushDSourceLinkSourceParameters.sid) &&
        Objects.equals(this.mountBase, oracleStagingPushDSourceLinkSourceParameters.mountBase) &&
        Objects.equals(this.customEnvVariablesPairs, oracleStagingPushDSourceLinkSourceParameters.customEnvVariablesPairs) &&
        Objects.equals(this.customEnvVariablesPaths, oracleStagingPushDSourceLinkSourceParameters.customEnvVariablesPaths) &&
        Objects.equals(this.autoStagingRestart, oracleStagingPushDSourceLinkSourceParameters.autoStagingRestart) &&
        Objects.equals(this.physicalStandby, oracleStagingPushDSourceLinkSourceParameters.physicalStandby) &&
        Objects.equals(this.validateSnapshotInReadonly, oracleStagingPushDSourceLinkSourceParameters.validateSnapshotInReadonly) &&
        Objects.equals(this.stagingDatabaseTemplates, oracleStagingPushDSourceLinkSourceParameters.stagingDatabaseTemplates) &&
        Objects.equals(this.stagingDatabaseConfigParams, oracleStagingPushDSourceLinkSourceParameters.stagingDatabaseConfigParams) &&
        Objects.equals(this.stagingContainerDatabaseReference, oracleStagingPushDSourceLinkSourceParameters.stagingContainerDatabaseReference) &&
        Objects.equals(this.opsPreLogSync, oracleStagingPushDSourceLinkSourceParameters.opsPreLogSync) &&
        Objects.equals(this.tdeKeystoreConfigType, oracleStagingPushDSourceLinkSourceParameters.tdeKeystoreConfigType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sourceId, groupId, description, logSyncEnabled, syncPolicyId, retentionPolicyId, makeCurrentAccountOwner, tags, opsPreSync, opsPostSync, engineId, containerType, environmentUserId, repository, databaseName, databaseUniqueName, sid, mountBase, customEnvVariablesPairs, customEnvVariablesPaths, autoStagingRestart, physicalStandby, validateSnapshotInReadonly, stagingDatabaseTemplates, stagingDatabaseConfigParams, stagingContainerDatabaseReference, opsPreLogSync, tdeKeystoreConfigType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OracleStagingPushDSourceLinkSourceParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logSyncEnabled: ").append(toIndentedString(logSyncEnabled)).append("\n");
    sb.append("    syncPolicyId: ").append(toIndentedString(syncPolicyId)).append("\n");
    sb.append("    retentionPolicyId: ").append(toIndentedString(retentionPolicyId)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    opsPreSync: ").append(toIndentedString(opsPreSync)).append("\n");
    sb.append("    opsPostSync: ").append(toIndentedString(opsPostSync)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    environmentUserId: ").append(toIndentedString(environmentUserId)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    databaseUniqueName: ").append(toIndentedString(databaseUniqueName)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    mountBase: ").append(toIndentedString(mountBase)).append("\n");
    sb.append("    customEnvVariablesPairs: ").append(toIndentedString(customEnvVariablesPairs)).append("\n");
    sb.append("    customEnvVariablesPaths: ").append(toIndentedString(customEnvVariablesPaths)).append("\n");
    sb.append("    autoStagingRestart: ").append(toIndentedString(autoStagingRestart)).append("\n");
    sb.append("    physicalStandby: ").append(toIndentedString(physicalStandby)).append("\n");
    sb.append("    validateSnapshotInReadonly: ").append(toIndentedString(validateSnapshotInReadonly)).append("\n");
    sb.append("    stagingDatabaseTemplates: ").append(toIndentedString(stagingDatabaseTemplates)).append("\n");
    sb.append("    stagingDatabaseConfigParams: ").append(toIndentedString(stagingDatabaseConfigParams)).append("\n");
    sb.append("    stagingContainerDatabaseReference: ").append(toIndentedString(stagingContainerDatabaseReference)).append("\n");
    sb.append("    opsPreLogSync: ").append(toIndentedString(opsPreLogSync)).append("\n");
    sb.append("    tdeKeystoreConfigType: ").append(toIndentedString(tdeKeystoreConfigType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("source_id");
    openapiFields.add("group_id");
    openapiFields.add("description");
    openapiFields.add("log_sync_enabled");
    openapiFields.add("sync_policy_id");
    openapiFields.add("retention_policy_id");
    openapiFields.add("make_current_account_owner");
    openapiFields.add("tags");
    openapiFields.add("ops_pre_sync");
    openapiFields.add("ops_post_sync");
    openapiFields.add("engine_id");
    openapiFields.add("container_type");
    openapiFields.add("environment_user_id");
    openapiFields.add("repository");
    openapiFields.add("database_name");
    openapiFields.add("database_unique_name");
    openapiFields.add("sid");
    openapiFields.add("mount_base");
    openapiFields.add("custom_env_variables_pairs");
    openapiFields.add("custom_env_variables_paths");
    openapiFields.add("auto_staging_restart");
    openapiFields.add("physical_standby");
    openapiFields.add("validate_snapshot_in_readonly");
    openapiFields.add("staging_database_templates");
    openapiFields.add("staging_database_config_params");
    openapiFields.add("staging_container_database_reference");
    openapiFields.add("ops_pre_log_sync");
    openapiFields.add("tde_keystore_config_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engine_id");
    openapiRequiredFields.add("database_name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OracleStagingPushDSourceLinkSourceParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OracleStagingPushDSourceLinkSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OracleStagingPushDSourceLinkSourceParameters is not found in the empty JSON string", OracleStagingPushDSourceLinkSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OracleStagingPushDSourceLinkSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OracleStagingPushDSourceLinkSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OracleStagingPushDSourceLinkSourceParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("sync_policy_id") != null && !jsonObj.get("sync_policy_id").isJsonNull()) && !jsonObj.get("sync_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_policy_id").toString()));
      }
      if ((jsonObj.get("retention_policy_id") != null && !jsonObj.get("retention_policy_id").isJsonNull()) && !jsonObj.get("retention_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("ops_pre_sync") != null && !jsonObj.get("ops_pre_sync").isJsonNull()) {
        JsonArray jsonArrayopsPreSync = jsonObj.getAsJsonArray("ops_pre_sync");
        if (jsonArrayopsPreSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_pre_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_pre_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_pre_sync").toString()));
          }

          // validate the optional field `ops_pre_sync` (array)
          for (int i = 0; i < jsonArrayopsPreSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPreSync.get(i));
          };
        }
      }
      if (jsonObj.get("ops_post_sync") != null && !jsonObj.get("ops_post_sync").isJsonNull()) {
        JsonArray jsonArrayopsPostSync = jsonObj.getAsJsonArray("ops_post_sync");
        if (jsonArrayopsPostSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_post_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_post_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_post_sync").toString()));
          }

          // validate the optional field `ops_post_sync` (array)
          for (int i = 0; i < jsonArrayopsPostSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPostSync.get(i));
          };
        }
      }
      if (!jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("container_type") != null && !jsonObj.get("container_type").isJsonNull()) && !jsonObj.get("container_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_type").toString()));
      }
      // validate the optional field `container_type`
      if (jsonObj.get("container_type") != null && !jsonObj.get("container_type").isJsonNull()) {
        ContainerTypeEnum.validateJsonElement(jsonObj.get("container_type"));
      }
      if ((jsonObj.get("environment_user_id") != null && !jsonObj.get("environment_user_id").isJsonNull()) && !jsonObj.get("environment_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_user_id").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if (!jsonObj.get("database_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_name").toString()));
      }
      if ((jsonObj.get("database_unique_name") != null && !jsonObj.get("database_unique_name").isJsonNull()) && !jsonObj.get("database_unique_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_unique_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_unique_name").toString()));
      }
      if ((jsonObj.get("sid") != null && !jsonObj.get("sid").isJsonNull()) && !jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("mount_base") != null && !jsonObj.get("mount_base").isJsonNull()) && !jsonObj.get("mount_base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_base").toString()));
      }
      if (jsonObj.get("custom_env_variables_pairs") != null && !jsonObj.get("custom_env_variables_pairs").isJsonNull()) {
        JsonArray jsonArraycustomEnvVariablesPairs = jsonObj.getAsJsonArray("custom_env_variables_pairs");
        if (jsonArraycustomEnvVariablesPairs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_env_variables_pairs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_env_variables_pairs` to be an array in the JSON string but got `%s`", jsonObj.get("custom_env_variables_pairs").toString()));
          }

          // validate the optional field `custom_env_variables_pairs` (array)
          for (int i = 0; i < jsonArraycustomEnvVariablesPairs.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraycustomEnvVariablesPairs.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("custom_env_variables_paths") != null && !jsonObj.get("custom_env_variables_paths").isJsonNull() && !jsonObj.get("custom_env_variables_paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_env_variables_paths` to be an array in the JSON string but got `%s`", jsonObj.get("custom_env_variables_paths").toString()));
      }
      if (jsonObj.get("staging_database_templates") != null && !jsonObj.get("staging_database_templates").isJsonNull()) {
        JsonArray jsonArraystagingDatabaseTemplates = jsonObj.getAsJsonArray("staging_database_templates");
        if (jsonArraystagingDatabaseTemplates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staging_database_templates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staging_database_templates` to be an array in the JSON string but got `%s`", jsonObj.get("staging_database_templates").toString()));
          }

          // validate the optional field `staging_database_templates` (array)
          for (int i = 0; i < jsonArraystagingDatabaseTemplates.size(); i++) {
            NameValuePair.validateJsonElement(jsonArraystagingDatabaseTemplates.get(i));
          };
        }
      }
      if ((jsonObj.get("staging_container_database_reference") != null && !jsonObj.get("staging_container_database_reference").isJsonNull()) && !jsonObj.get("staging_container_database_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staging_container_database_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staging_container_database_reference").toString()));
      }
      if (jsonObj.get("ops_pre_log_sync") != null && !jsonObj.get("ops_pre_log_sync").isJsonNull()) {
        JsonArray jsonArrayopsPreLogSync = jsonObj.getAsJsonArray("ops_pre_log_sync");
        if (jsonArrayopsPreLogSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_pre_log_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_pre_log_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_pre_log_sync").toString()));
          }

          // validate the optional field `ops_pre_log_sync` (array)
          for (int i = 0; i < jsonArrayopsPreLogSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPreLogSync.get(i));
          };
        }
      }
      if ((jsonObj.get("tde_keystore_config_type") != null && !jsonObj.get("tde_keystore_config_type").isJsonNull()) && !jsonObj.get("tde_keystore_config_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tde_keystore_config_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tde_keystore_config_type").toString()));
      }
      // validate the optional field `tde_keystore_config_type`
      if (jsonObj.get("tde_keystore_config_type") != null && !jsonObj.get("tde_keystore_config_type").isJsonNull()) {
        TdeKeystoreConfigTypeEnum.validateJsonElement(jsonObj.get("tde_keystore_config_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OracleStagingPushDSourceLinkSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OracleStagingPushDSourceLinkSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OracleStagingPushDSourceLinkSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OracleStagingPushDSourceLinkSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<OracleStagingPushDSourceLinkSourceParameters>() {
           @Override
           public void write(JsonWriter out, OracleStagingPushDSourceLinkSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OracleStagingPushDSourceLinkSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OracleStagingPushDSourceLinkSourceParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OracleStagingPushDSourceLinkSourceParameters
  * @throws IOException if the JSON string is invalid with respect to OracleStagingPushDSourceLinkSourceParameters
  */
  public static OracleStagingPushDSourceLinkSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OracleStagingPushDSourceLinkSourceParameters.class);
  }

 /**
  * Convert an instance of OracleStagingPushDSourceLinkSourceParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

