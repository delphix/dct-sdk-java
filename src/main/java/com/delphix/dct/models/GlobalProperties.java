/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Global properties response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class GlobalProperties {
  public static final String SERIALIZED_NAME_DISABLE_USERNAME_PASSWORD = "disable_username_password";
  @SerializedName(SERIALIZED_NAME_DISABLE_USERNAME_PASSWORD)
  private Boolean disableUsernamePassword;

  public static final String SERIALIZED_NAME_PHONEHOME_UPLOAD_CADENCE = "phonehome_upload_cadence";
  @SerializedName(SERIALIZED_NAME_PHONEHOME_UPLOAD_CADENCE)
  private Integer phonehomeUploadCadence;

  public static final String SERIALIZED_NAME_PHONEHOME_MAXIMUM_TRANSFER_SIZE = "phonehome_maximum_transfer_size";
  @SerializedName(SERIALIZED_NAME_PHONEHOME_MAXIMUM_TRANSFER_SIZE)
  private Integer phonehomeMaximumTransferSize;

  public GlobalProperties() {
  }

  public GlobalProperties disableUsernamePassword(Boolean disableUsernamePassword) {
    this.disableUsernamePassword = disableUsernamePassword;
    return this;
  }

   /**
   * Property to define either username &amp; password based authentication disabled or not.
   * @return disableUsernamePassword
  **/
  @javax.annotation.Nullable
  public Boolean getDisableUsernamePassword() {
    return disableUsernamePassword;
  }

  public void setDisableUsernamePassword(Boolean disableUsernamePassword) {
    this.disableUsernamePassword = disableUsernamePassword;
  }


  public GlobalProperties phonehomeUploadCadence(Integer phonehomeUploadCadence) {
    this.phonehomeUploadCadence = phonehomeUploadCadence;
    return this;
  }

   /**
   * Property to define the phonehome bundle upload cadence, in days, if Delphix services are reachable.
   * minimum: 1
   * maximum: 30
   * @return phonehomeUploadCadence
  **/
  @javax.annotation.Nullable
  public Integer getPhonehomeUploadCadence() {
    return phonehomeUploadCadence;
  }

  public void setPhonehomeUploadCadence(Integer phonehomeUploadCadence) {
    this.phonehomeUploadCadence = phonehomeUploadCadence;
  }


  public GlobalProperties phonehomeMaximumTransferSize(Integer phonehomeMaximumTransferSize) {
    this.phonehomeMaximumTransferSize = phonehomeMaximumTransferSize;
    return this;
  }

   /**
   * Property to define the maximum uncompressed bundle transfer size, in bytes, for phonehome.
   * minimum: 1048576
   * maximum: 1073741824
   * @return phonehomeMaximumTransferSize
  **/
  @javax.annotation.Nullable
  public Integer getPhonehomeMaximumTransferSize() {
    return phonehomeMaximumTransferSize;
  }

  public void setPhonehomeMaximumTransferSize(Integer phonehomeMaximumTransferSize) {
    this.phonehomeMaximumTransferSize = phonehomeMaximumTransferSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalProperties globalProperties = (GlobalProperties) o;
    return Objects.equals(this.disableUsernamePassword, globalProperties.disableUsernamePassword) &&
        Objects.equals(this.phonehomeUploadCadence, globalProperties.phonehomeUploadCadence) &&
        Objects.equals(this.phonehomeMaximumTransferSize, globalProperties.phonehomeMaximumTransferSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableUsernamePassword, phonehomeUploadCadence, phonehomeMaximumTransferSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalProperties {\n");
    sb.append("    disableUsernamePassword: ").append(toIndentedString(disableUsernamePassword)).append("\n");
    sb.append("    phonehomeUploadCadence: ").append(toIndentedString(phonehomeUploadCadence)).append("\n");
    sb.append("    phonehomeMaximumTransferSize: ").append(toIndentedString(phonehomeMaximumTransferSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disable_username_password");
    openapiFields.add("phonehome_upload_cadence");
    openapiFields.add("phonehome_maximum_transfer_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GlobalProperties
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalProperties is not found in the empty JSON string", GlobalProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalProperties>() {
           @Override
           public void write(JsonWriter out, GlobalProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GlobalProperties given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GlobalProperties
  * @throws IOException if the JSON string is invalid with respect to GlobalProperties
  */
  public static GlobalProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalProperties.class);
  }

 /**
  * Convert an instance of GlobalProperties to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

