/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A registered engine&#39;s connection and authentication settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class RegisteredEngine {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  /**
   * The type of this engine.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VIRTUALIZATION("VIRTUALIZATION"),
    
    MASKING("MASKING"),
    
    BOTH("BOTH"),
    
    UNSET("UNSET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SSH_PUBLIC_KEY = "ssh_public_key";
  @SerializedName(SERIALIZED_NAME_SSH_PUBLIC_KEY)
  private String sshPublicKey;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_CPU_CORE_COUNT = "cpu_core_count";
  @SerializedName(SERIALIZED_NAME_CPU_CORE_COUNT)
  private Integer cpuCoreCount;

  public static final String SERIALIZED_NAME_MEMORY_SIZE = "memory_size";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE)
  private Long memorySize;

  public static final String SERIALIZED_NAME_DATA_STORAGE_CAPACITY = "data_storage_capacity";
  @SerializedName(SERIALIZED_NAME_DATA_STORAGE_CAPACITY)
  private Long dataStorageCapacity;

  public static final String SERIALIZED_NAME_DATA_STORAGE_USED = "data_storage_used";
  @SerializedName(SERIALIZED_NAME_DATA_STORAGE_USED)
  private Long dataStorageUsed;

  public static final String SERIALIZED_NAME_INSECURE_SSL = "insecure_ssl";
  @SerializedName(SERIALIZED_NAME_INSECURE_SSL)
  private Boolean insecureSsl;

  public static final String SERIALIZED_NAME_UNSAFE_SSL_HOSTNAME_CHECK = "unsafe_ssl_hostname_check";
  @SerializedName(SERIALIZED_NAME_UNSAFE_SSL_HOSTNAME_CHECK)
  private Boolean unsafeSslHostnameCheck;

  public static final String SERIALIZED_NAME_TRUSTSTORE_FILENAME = "truststore_filename";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_FILENAME)
  private String truststoreFilename;

  public static final String SERIALIZED_NAME_TRUSTSTORE_PASSWORD = "truststore_password";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_PASSWORD)
  private String truststorePassword;

  /**
   * the status of the engine 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    DELETING("DELETING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The status of the connection to the engine. Deprecated; use \&quot;engine_connection_status\&quot; instead.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    ONLINE("ONLINE"),
    
    OFFLINE("OFFLINE");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  /**
   * The state of the connection to the engine.
   */
  @JsonAdapter(EngineConnectionStatusEnum.Adapter.class)
  public enum EngineConnectionStatusEnum {
    ONLINE("ONLINE"),
    
    CONNECTION_ERROR("CONNECTION_ERROR"),
    
    MISSING_CREDENTIALS("MISSING_CREDENTIALS"),
    
    BAD_CREDENTIALS("BAD_CREDENTIALS");

    private String value;

    EngineConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineConnectionStatusEnum fromValue(String value) {
      for (EngineConnectionStatusEnum b : EngineConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE_CONNECTION_STATUS = "engine_connection_status";
  @SerializedName(SERIALIZED_NAME_ENGINE_CONNECTION_STATUS)
  private EngineConnectionStatusEnum engineConnectionStatus;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS_DETAILS = "connection_status_details";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS_DETAILS)
  private String connectionStatusDetails;

  public static final String SERIALIZED_NAME_ENGINE_CONNECTION_STATUS_DETAILS = "engine_connection_status_details";
  @SerializedName(SERIALIZED_NAME_ENGINE_CONNECTION_STATUS_DETAILS)
  private String engineConnectionStatusDetails;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_MASKING_USERNAME = "masking_username";
  @SerializedName(SERIALIZED_NAME_MASKING_USERNAME)
  private String maskingUsername;

  public static final String SERIALIZED_NAME_MASKING_PASSWORD = "masking_password";
  @SerializedName(SERIALIZED_NAME_MASKING_PASSWORD)
  private String maskingPassword;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_COMMAND_ARGS = "hashicorp_vault_username_command_args";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_COMMAND_ARGS)
  private List<String> hashicorpVaultUsernameCommandArgs;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_MASKING_USERNAME_COMMAND_ARGS = "hashicorp_vault_masking_username_command_args";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_MASKING_USERNAME_COMMAND_ARGS)
  private List<String> hashicorpVaultMaskingUsernameCommandArgs;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_PASSWORD_COMMAND_ARGS = "hashicorp_vault_password_command_args";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_PASSWORD_COMMAND_ARGS)
  private List<String> hashicorpVaultPasswordCommandArgs;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_MASKING_PASSWORD_COMMAND_ARGS = "hashicorp_vault_masking_password_command_args";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_MASKING_PASSWORD_COMMAND_ARGS)
  private List<String> hashicorpVaultMaskingPasswordCommandArgs;

  public static final String SERIALIZED_NAME_MASKING_HASHICORP_VAULT_ID = "masking_hashicorp_vault_id";
  @SerializedName(SERIALIZED_NAME_MASKING_HASHICORP_VAULT_ID)
  private Long maskingHashicorpVaultId;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_ID = "hashicorp_vault_id";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_ID)
  private Long hashicorpVaultId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_MASKING_MEMORY_USED = "masking_memory_used";
  @SerializedName(SERIALIZED_NAME_MASKING_MEMORY_USED)
  private Long maskingMemoryUsed;

  public static final String SERIALIZED_NAME_MASKING_ALLOCATED_MEMORY = "masking_allocated_memory";
  @SerializedName(SERIALIZED_NAME_MASKING_ALLOCATED_MEMORY)
  private Long maskingAllocatedMemory;

  public static final String SERIALIZED_NAME_MASKING_JOBS_RUNNING = "masking_jobs_running";
  @SerializedName(SERIALIZED_NAME_MASKING_JOBS_RUNNING)
  private Integer maskingJobsRunning;

  public static final String SERIALIZED_NAME_MASKING_MAX_CONCURRENT_JOBS = "masking_max_concurrent_jobs";
  @SerializedName(SERIALIZED_NAME_MASKING_MAX_CONCURRENT_JOBS)
  private Integer maskingMaxConcurrentJobs;

  public static final String SERIALIZED_NAME_MASKING_AVAILABLE_CORES = "masking_available_cores";
  @SerializedName(SERIALIZED_NAME_MASKING_AVAILABLE_CORES)
  private Integer maskingAvailableCores;

  public static final String SERIALIZED_NAME_HYPERSCALE_INSTANCE_IDS = "hyperscale_instance_ids";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_INSTANCE_IDS)
  private List<String> hyperscaleInstanceIds;

  public static final String SERIALIZED_NAME_HYPERSCALE_TRUSTSTORE_FILENAME = "hyperscale_truststore_filename";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_TRUSTSTORE_FILENAME)
  private String hyperscaleTruststoreFilename;

  public static final String SERIALIZED_NAME_HYPERSCALE_TRUSTSTORE_PASSWORD = "hyperscale_truststore_password";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_TRUSTSTORE_PASSWORD)
  private String hyperscaleTruststorePassword;

  public RegisteredEngine() {
  }

  public RegisteredEngine(
     String id, 
     StatusEnum status, 
     ConnectionStatusEnum connectionStatus, 
     EngineConnectionStatusEnum engineConnectionStatus, 
     String connectionStatusDetails, 
     String engineConnectionStatusDetails
  ) {
    this();
    this.id = id;
    this.status = status;
    this.connectionStatus = connectionStatus;
    this.engineConnectionStatus = engineConnectionStatus;
    this.connectionStatusDetails = connectionStatusDetails;
    this.engineConnectionStatusDetails = engineConnectionStatusDetails;
  }

   /**
   * The Engine object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public RegisteredEngine uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * The unique identifier generated by this engine.
   * @return uuid
  **/
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public RegisteredEngine type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of this engine.
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RegisteredEngine version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The engine version.
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public RegisteredEngine name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this engine.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RegisteredEngine sshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
    return this;
  }

   /**
   * The ssh public key of this engine.
   * @return sshPublicKey
  **/
  @javax.annotation.Nullable
  public String getSshPublicKey() {
    return sshPublicKey;
  }

  public void setSshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
  }


  public RegisteredEngine hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname of this engine.
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public RegisteredEngine cpuCoreCount(Integer cpuCoreCount) {
    this.cpuCoreCount = cpuCoreCount;
    return this;
  }

   /**
   * The total number of CPU cores on this engine.
   * @return cpuCoreCount
  **/
  @javax.annotation.Nullable
  public Integer getCpuCoreCount() {
    return cpuCoreCount;
  }

  public void setCpuCoreCount(Integer cpuCoreCount) {
    this.cpuCoreCount = cpuCoreCount;
  }


  public RegisteredEngine memorySize(Long memorySize) {
    this.memorySize = memorySize;
    return this;
  }

   /**
   * The total amount of memory on this engine, in bytes.
   * @return memorySize
  **/
  @javax.annotation.Nullable
  public Long getMemorySize() {
    return memorySize;
  }

  public void setMemorySize(Long memorySize) {
    this.memorySize = memorySize;
  }


  public RegisteredEngine dataStorageCapacity(Long dataStorageCapacity) {
    this.dataStorageCapacity = dataStorageCapacity;
    return this;
  }

   /**
   * The total amount of storage allocated for engine objects and system metadata, in bytes.
   * @return dataStorageCapacity
  **/
  @javax.annotation.Nullable
  public Long getDataStorageCapacity() {
    return dataStorageCapacity;
  }

  public void setDataStorageCapacity(Long dataStorageCapacity) {
    this.dataStorageCapacity = dataStorageCapacity;
  }


  public RegisteredEngine dataStorageUsed(Long dataStorageUsed) {
    this.dataStorageUsed = dataStorageUsed;
    return this;
  }

   /**
   * The amount of storage used by engine objects and system metadata, in bytes.
   * @return dataStorageUsed
  **/
  @javax.annotation.Nullable
  public Long getDataStorageUsed() {
    return dataStorageUsed;
  }

  public void setDataStorageUsed(Long dataStorageUsed) {
    this.dataStorageUsed = dataStorageUsed;
  }


  public RegisteredEngine insecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
    return this;
  }

   /**
   * Allow connections to the engine over HTTPs without validating the TLS certificate. Even though the connection to the engine might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the engine&#39;s certificate, and set the truststore_filename property. 
   * @return insecureSsl
  **/
  @javax.annotation.Nullable
  public Boolean getInsecureSsl() {
    return insecureSsl;
  }

  public void setInsecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
  }


  public RegisteredEngine unsafeSslHostnameCheck(Boolean unsafeSslHostnameCheck) {
    this.unsafeSslHostnameCheck = unsafeSslHostnameCheck;
    return this;
  }

   /**
   * Ignore validation of the name associated to the TLS certificate when connecting to the engine over HTTPs. Setting this value must only be done if the TLS certificate of the engine does not match the hostname, and the TLS configuration of the engine cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this engine. This is ignored if insecure_ssl is set. 
   * @return unsafeSslHostnameCheck
  **/
  @javax.annotation.Nullable
  public Boolean getUnsafeSslHostnameCheck() {
    return unsafeSslHostnameCheck;
  }

  public void setUnsafeSslHostnameCheck(Boolean unsafeSslHostnameCheck) {
    this.unsafeSslHostnameCheck = unsafeSslHostnameCheck;
  }


  public RegisteredEngine truststoreFilename(String truststoreFilename) {
    this.truststoreFilename = truststoreFilename;
    return this;
  }

   /**
   * File name of a truststore which can be used to validate the TLS certificate of the engine. The truststore must be available at /etc/config/certs/&lt;truststore_filename&gt; 
   * @return truststoreFilename
  **/
  @javax.annotation.Nullable
  public String getTruststoreFilename() {
    return truststoreFilename;
  }

  public void setTruststoreFilename(String truststoreFilename) {
    this.truststoreFilename = truststoreFilename;
  }


  public RegisteredEngine truststorePassword(String truststorePassword) {
    this.truststorePassword = truststorePassword;
    return this;
  }

   /**
   * Password to read the truststore. 
   * @return truststorePassword
  **/
  @javax.annotation.Nullable
  public String getTruststorePassword() {
    return truststorePassword;
  }

  public void setTruststorePassword(String truststorePassword) {
    this.truststorePassword = truststorePassword;
  }


   /**
   * the status of the engine 
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



   /**
   * The status of the connection to the engine. Deprecated; use \&quot;engine_connection_status\&quot; instead.
   * @return connectionStatus
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }



   /**
   * The state of the connection to the engine.
   * @return engineConnectionStatus
  **/
  @javax.annotation.Nullable
  public EngineConnectionStatusEnum getEngineConnectionStatus() {
    return engineConnectionStatus;
  }



   /**
   * If set, details about the status of the connection to the engine. Deprecated; use \&quot;engine_connection_status_details\&quot; instead.
   * @return connectionStatusDetails
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public String getConnectionStatusDetails() {
    return connectionStatusDetails;
  }



   /**
   * If set, details about the state of the connection to the engine.
   * @return engineConnectionStatusDetails
  **/
  @javax.annotation.Nullable
  public String getEngineConnectionStatusDetails() {
    return engineConnectionStatusDetails;
  }



  public RegisteredEngine username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The virtualization domain admin username.
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public RegisteredEngine password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The virtualization domain admin password.
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public RegisteredEngine maskingUsername(String maskingUsername) {
    this.maskingUsername = maskingUsername;
    return this;
  }

   /**
   * The masking admin username.
   * @return maskingUsername
  **/
  @javax.annotation.Nullable
  public String getMaskingUsername() {
    return maskingUsername;
  }

  public void setMaskingUsername(String maskingUsername) {
    this.maskingUsername = maskingUsername;
  }


  public RegisteredEngine maskingPassword(String maskingPassword) {
    this.maskingPassword = maskingPassword;
    return this;
  }

   /**
   * The masking admin password.
   * @return maskingPassword
  **/
  @javax.annotation.Nullable
  public String getMaskingPassword() {
    return maskingPassword;
  }

  public void setMaskingPassword(String maskingPassword) {
    this.maskingPassword = maskingPassword;
  }


  public RegisteredEngine hashicorpVaultUsernameCommandArgs(List<String> hashicorpVaultUsernameCommandArgs) {
    this.hashicorpVaultUsernameCommandArgs = hashicorpVaultUsernameCommandArgs;
    return this;
  }

  public RegisteredEngine addHashicorpVaultUsernameCommandArgsItem(String hashicorpVaultUsernameCommandArgsItem) {
    if (this.hashicorpVaultUsernameCommandArgs == null) {
      this.hashicorpVaultUsernameCommandArgs = new ArrayList<>();
    }
    this.hashicorpVaultUsernameCommandArgs.add(hashicorpVaultUsernameCommandArgsItem);
    return this;
  }

   /**
   * Arguments to pass to the Vault CLI tool to retrieve the virtualization username for the engine.
   * @return hashicorpVaultUsernameCommandArgs
  **/
  @javax.annotation.Nullable
  public List<String> getHashicorpVaultUsernameCommandArgs() {
    return hashicorpVaultUsernameCommandArgs;
  }

  public void setHashicorpVaultUsernameCommandArgs(List<String> hashicorpVaultUsernameCommandArgs) {
    this.hashicorpVaultUsernameCommandArgs = hashicorpVaultUsernameCommandArgs;
  }


  public RegisteredEngine hashicorpVaultMaskingUsernameCommandArgs(List<String> hashicorpVaultMaskingUsernameCommandArgs) {
    this.hashicorpVaultMaskingUsernameCommandArgs = hashicorpVaultMaskingUsernameCommandArgs;
    return this;
  }

  public RegisteredEngine addHashicorpVaultMaskingUsernameCommandArgsItem(String hashicorpVaultMaskingUsernameCommandArgsItem) {
    if (this.hashicorpVaultMaskingUsernameCommandArgs == null) {
      this.hashicorpVaultMaskingUsernameCommandArgs = new ArrayList<>();
    }
    this.hashicorpVaultMaskingUsernameCommandArgs.add(hashicorpVaultMaskingUsernameCommandArgsItem);
    return this;
  }

   /**
   * Arguments to pass to the Vault CLI tool to retrieve the masking username for the engine.
   * @return hashicorpVaultMaskingUsernameCommandArgs
  **/
  @javax.annotation.Nullable
  public List<String> getHashicorpVaultMaskingUsernameCommandArgs() {
    return hashicorpVaultMaskingUsernameCommandArgs;
  }

  public void setHashicorpVaultMaskingUsernameCommandArgs(List<String> hashicorpVaultMaskingUsernameCommandArgs) {
    this.hashicorpVaultMaskingUsernameCommandArgs = hashicorpVaultMaskingUsernameCommandArgs;
  }


  public RegisteredEngine hashicorpVaultPasswordCommandArgs(List<String> hashicorpVaultPasswordCommandArgs) {
    this.hashicorpVaultPasswordCommandArgs = hashicorpVaultPasswordCommandArgs;
    return this;
  }

  public RegisteredEngine addHashicorpVaultPasswordCommandArgsItem(String hashicorpVaultPasswordCommandArgsItem) {
    if (this.hashicorpVaultPasswordCommandArgs == null) {
      this.hashicorpVaultPasswordCommandArgs = new ArrayList<>();
    }
    this.hashicorpVaultPasswordCommandArgs.add(hashicorpVaultPasswordCommandArgsItem);
    return this;
  }

   /**
   * Arguments to pass to the Vault CLI tool to retrieve the virtualization password for the engine.
   * @return hashicorpVaultPasswordCommandArgs
  **/
  @javax.annotation.Nullable
  public List<String> getHashicorpVaultPasswordCommandArgs() {
    return hashicorpVaultPasswordCommandArgs;
  }

  public void setHashicorpVaultPasswordCommandArgs(List<String> hashicorpVaultPasswordCommandArgs) {
    this.hashicorpVaultPasswordCommandArgs = hashicorpVaultPasswordCommandArgs;
  }


  public RegisteredEngine hashicorpVaultMaskingPasswordCommandArgs(List<String> hashicorpVaultMaskingPasswordCommandArgs) {
    this.hashicorpVaultMaskingPasswordCommandArgs = hashicorpVaultMaskingPasswordCommandArgs;
    return this;
  }

  public RegisteredEngine addHashicorpVaultMaskingPasswordCommandArgsItem(String hashicorpVaultMaskingPasswordCommandArgsItem) {
    if (this.hashicorpVaultMaskingPasswordCommandArgs == null) {
      this.hashicorpVaultMaskingPasswordCommandArgs = new ArrayList<>();
    }
    this.hashicorpVaultMaskingPasswordCommandArgs.add(hashicorpVaultMaskingPasswordCommandArgsItem);
    return this;
  }

   /**
   * Arguments to pass to the Vault CLI tool to retrieve the masking password for the engine.
   * @return hashicorpVaultMaskingPasswordCommandArgs
  **/
  @javax.annotation.Nullable
  public List<String> getHashicorpVaultMaskingPasswordCommandArgs() {
    return hashicorpVaultMaskingPasswordCommandArgs;
  }

  public void setHashicorpVaultMaskingPasswordCommandArgs(List<String> hashicorpVaultMaskingPasswordCommandArgs) {
    this.hashicorpVaultMaskingPasswordCommandArgs = hashicorpVaultMaskingPasswordCommandArgs;
  }


  public RegisteredEngine maskingHashicorpVaultId(Long maskingHashicorpVaultId) {
    this.maskingHashicorpVaultId = maskingHashicorpVaultId;
    return this;
  }

   /**
   * Reference to the Hashicorp vault to use to retrieve masking engine credentials.
   * @return maskingHashicorpVaultId
  **/
  @javax.annotation.Nullable
  public Long getMaskingHashicorpVaultId() {
    return maskingHashicorpVaultId;
  }

  public void setMaskingHashicorpVaultId(Long maskingHashicorpVaultId) {
    this.maskingHashicorpVaultId = maskingHashicorpVaultId;
  }


  public RegisteredEngine hashicorpVaultId(Long hashicorpVaultId) {
    this.hashicorpVaultId = hashicorpVaultId;
    return this;
  }

   /**
   * Reference to the Hashicorp vault to use to retrieve virtualization engine credentials.
   * @return hashicorpVaultId
  **/
  @javax.annotation.Nullable
  public Long getHashicorpVaultId() {
    return hashicorpVaultId;
  }

  public void setHashicorpVaultId(Long hashicorpVaultId) {
    this.hashicorpVaultId = hashicorpVaultId;
  }


  public RegisteredEngine tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public RegisteredEngine addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for this engine.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public RegisteredEngine maskingMemoryUsed(Long maskingMemoryUsed) {
    this.maskingMemoryUsed = maskingMemoryUsed;
    return this;
  }

   /**
   * The current amount of memory used by running masking jobs in bytes.
   * @return maskingMemoryUsed
  **/
  @javax.annotation.Nullable
  public Long getMaskingMemoryUsed() {
    return maskingMemoryUsed;
  }

  public void setMaskingMemoryUsed(Long maskingMemoryUsed) {
    this.maskingMemoryUsed = maskingMemoryUsed;
  }


  public RegisteredEngine maskingAllocatedMemory(Long maskingAllocatedMemory) {
    this.maskingAllocatedMemory = maskingAllocatedMemory;
    return this;
  }

   /**
   * The maximum amount of memory available for running masking jobs in bytes.
   * @return maskingAllocatedMemory
  **/
  @javax.annotation.Nullable
  public Long getMaskingAllocatedMemory() {
    return maskingAllocatedMemory;
  }

  public void setMaskingAllocatedMemory(Long maskingAllocatedMemory) {
    this.maskingAllocatedMemory = maskingAllocatedMemory;
  }


  public RegisteredEngine maskingJobsRunning(Integer maskingJobsRunning) {
    this.maskingJobsRunning = maskingJobsRunning;
    return this;
  }

   /**
   * The number of masking jobs currently running.
   * @return maskingJobsRunning
  **/
  @javax.annotation.Nullable
  public Integer getMaskingJobsRunning() {
    return maskingJobsRunning;
  }

  public void setMaskingJobsRunning(Integer maskingJobsRunning) {
    this.maskingJobsRunning = maskingJobsRunning;
  }


  public RegisteredEngine maskingMaxConcurrentJobs(Integer maskingMaxConcurrentJobs) {
    this.maskingMaxConcurrentJobs = maskingMaxConcurrentJobs;
    return this;
  }

   /**
   * The maximum number of masking jobs that can be running at the same time.
   * @return maskingMaxConcurrentJobs
  **/
  @javax.annotation.Nullable
  public Integer getMaskingMaxConcurrentJobs() {
    return maskingMaxConcurrentJobs;
  }

  public void setMaskingMaxConcurrentJobs(Integer maskingMaxConcurrentJobs) {
    this.maskingMaxConcurrentJobs = maskingMaxConcurrentJobs;
  }


  public RegisteredEngine maskingAvailableCores(Integer maskingAvailableCores) {
    this.maskingAvailableCores = maskingAvailableCores;
    return this;
  }

   /**
   * The number of CPU cores available to the masking engine.
   * @return maskingAvailableCores
  **/
  @javax.annotation.Nullable
  public Integer getMaskingAvailableCores() {
    return maskingAvailableCores;
  }

  public void setMaskingAvailableCores(Integer maskingAvailableCores) {
    this.maskingAvailableCores = maskingAvailableCores;
  }


  public RegisteredEngine hyperscaleInstanceIds(List<String> hyperscaleInstanceIds) {
    this.hyperscaleInstanceIds = hyperscaleInstanceIds;
    return this;
  }

  public RegisteredEngine addHyperscaleInstanceIdsItem(String hyperscaleInstanceIdsItem) {
    if (this.hyperscaleInstanceIds == null) {
      this.hyperscaleInstanceIds = new ArrayList<>();
    }
    this.hyperscaleInstanceIds.add(hyperscaleInstanceIdsItem);
    return this;
  }

   /**
   * List of Hyperscale Instances that this engine is connected to.
   * @return hyperscaleInstanceIds
  **/
  @javax.annotation.Nullable
  public List<String> getHyperscaleInstanceIds() {
    return hyperscaleInstanceIds;
  }

  public void setHyperscaleInstanceIds(List<String> hyperscaleInstanceIds) {
    this.hyperscaleInstanceIds = hyperscaleInstanceIds;
  }


  public RegisteredEngine hyperscaleTruststoreFilename(String hyperscaleTruststoreFilename) {
    this.hyperscaleTruststoreFilename = hyperscaleTruststoreFilename;
    return this;
  }

   /**
   * File name of a truststore which can be used to validate the TLS certificate of the engine as expected by associated hyperscale instances. 
   * @return hyperscaleTruststoreFilename
  **/
  @javax.annotation.Nullable
  public String getHyperscaleTruststoreFilename() {
    return hyperscaleTruststoreFilename;
  }

  public void setHyperscaleTruststoreFilename(String hyperscaleTruststoreFilename) {
    this.hyperscaleTruststoreFilename = hyperscaleTruststoreFilename;
  }


  public RegisteredEngine hyperscaleTruststorePassword(String hyperscaleTruststorePassword) {
    this.hyperscaleTruststorePassword = hyperscaleTruststorePassword;
    return this;
  }

   /**
   * Password to read the truststore as expected by associated hyperscale instances. 
   * @return hyperscaleTruststorePassword
  **/
  @javax.annotation.Nullable
  public String getHyperscaleTruststorePassword() {
    return hyperscaleTruststorePassword;
  }

  public void setHyperscaleTruststorePassword(String hyperscaleTruststorePassword) {
    this.hyperscaleTruststorePassword = hyperscaleTruststorePassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisteredEngine registeredEngine = (RegisteredEngine) o;
    return Objects.equals(this.id, registeredEngine.id) &&
        Objects.equals(this.uuid, registeredEngine.uuid) &&
        Objects.equals(this.type, registeredEngine.type) &&
        Objects.equals(this.version, registeredEngine.version) &&
        Objects.equals(this.name, registeredEngine.name) &&
        Objects.equals(this.sshPublicKey, registeredEngine.sshPublicKey) &&
        Objects.equals(this.hostname, registeredEngine.hostname) &&
        Objects.equals(this.cpuCoreCount, registeredEngine.cpuCoreCount) &&
        Objects.equals(this.memorySize, registeredEngine.memorySize) &&
        Objects.equals(this.dataStorageCapacity, registeredEngine.dataStorageCapacity) &&
        Objects.equals(this.dataStorageUsed, registeredEngine.dataStorageUsed) &&
        Objects.equals(this.insecureSsl, registeredEngine.insecureSsl) &&
        Objects.equals(this.unsafeSslHostnameCheck, registeredEngine.unsafeSslHostnameCheck) &&
        Objects.equals(this.truststoreFilename, registeredEngine.truststoreFilename) &&
        Objects.equals(this.truststorePassword, registeredEngine.truststorePassword) &&
        Objects.equals(this.status, registeredEngine.status) &&
        Objects.equals(this.connectionStatus, registeredEngine.connectionStatus) &&
        Objects.equals(this.engineConnectionStatus, registeredEngine.engineConnectionStatus) &&
        Objects.equals(this.connectionStatusDetails, registeredEngine.connectionStatusDetails) &&
        Objects.equals(this.engineConnectionStatusDetails, registeredEngine.engineConnectionStatusDetails) &&
        Objects.equals(this.username, registeredEngine.username) &&
        Objects.equals(this.password, registeredEngine.password) &&
        Objects.equals(this.maskingUsername, registeredEngine.maskingUsername) &&
        Objects.equals(this.maskingPassword, registeredEngine.maskingPassword) &&
        Objects.equals(this.hashicorpVaultUsernameCommandArgs, registeredEngine.hashicorpVaultUsernameCommandArgs) &&
        Objects.equals(this.hashicorpVaultMaskingUsernameCommandArgs, registeredEngine.hashicorpVaultMaskingUsernameCommandArgs) &&
        Objects.equals(this.hashicorpVaultPasswordCommandArgs, registeredEngine.hashicorpVaultPasswordCommandArgs) &&
        Objects.equals(this.hashicorpVaultMaskingPasswordCommandArgs, registeredEngine.hashicorpVaultMaskingPasswordCommandArgs) &&
        Objects.equals(this.maskingHashicorpVaultId, registeredEngine.maskingHashicorpVaultId) &&
        Objects.equals(this.hashicorpVaultId, registeredEngine.hashicorpVaultId) &&
        Objects.equals(this.tags, registeredEngine.tags) &&
        Objects.equals(this.maskingMemoryUsed, registeredEngine.maskingMemoryUsed) &&
        Objects.equals(this.maskingAllocatedMemory, registeredEngine.maskingAllocatedMemory) &&
        Objects.equals(this.maskingJobsRunning, registeredEngine.maskingJobsRunning) &&
        Objects.equals(this.maskingMaxConcurrentJobs, registeredEngine.maskingMaxConcurrentJobs) &&
        Objects.equals(this.maskingAvailableCores, registeredEngine.maskingAvailableCores) &&
        Objects.equals(this.hyperscaleInstanceIds, registeredEngine.hyperscaleInstanceIds) &&
        Objects.equals(this.hyperscaleTruststoreFilename, registeredEngine.hyperscaleTruststoreFilename) &&
        Objects.equals(this.hyperscaleTruststorePassword, registeredEngine.hyperscaleTruststorePassword);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uuid, type, version, name, sshPublicKey, hostname, cpuCoreCount, memorySize, dataStorageCapacity, dataStorageUsed, insecureSsl, unsafeSslHostnameCheck, truststoreFilename, truststorePassword, status, connectionStatus, engineConnectionStatus, connectionStatusDetails, engineConnectionStatusDetails, username, password, maskingUsername, maskingPassword, hashicorpVaultUsernameCommandArgs, hashicorpVaultMaskingUsernameCommandArgs, hashicorpVaultPasswordCommandArgs, hashicorpVaultMaskingPasswordCommandArgs, maskingHashicorpVaultId, hashicorpVaultId, tags, maskingMemoryUsed, maskingAllocatedMemory, maskingJobsRunning, maskingMaxConcurrentJobs, maskingAvailableCores, hyperscaleInstanceIds, hyperscaleTruststoreFilename, hyperscaleTruststorePassword);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisteredEngine {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sshPublicKey: ").append(toIndentedString(sshPublicKey)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    cpuCoreCount: ").append(toIndentedString(cpuCoreCount)).append("\n");
    sb.append("    memorySize: ").append(toIndentedString(memorySize)).append("\n");
    sb.append("    dataStorageCapacity: ").append(toIndentedString(dataStorageCapacity)).append("\n");
    sb.append("    dataStorageUsed: ").append(toIndentedString(dataStorageUsed)).append("\n");
    sb.append("    insecureSsl: ").append(toIndentedString(insecureSsl)).append("\n");
    sb.append("    unsafeSslHostnameCheck: ").append(toIndentedString(unsafeSslHostnameCheck)).append("\n");
    sb.append("    truststoreFilename: ").append(toIndentedString(truststoreFilename)).append("\n");
    sb.append("    truststorePassword: ").append(toIndentedString(truststorePassword)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    engineConnectionStatus: ").append(toIndentedString(engineConnectionStatus)).append("\n");
    sb.append("    connectionStatusDetails: ").append(toIndentedString(connectionStatusDetails)).append("\n");
    sb.append("    engineConnectionStatusDetails: ").append(toIndentedString(engineConnectionStatusDetails)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    maskingUsername: ").append(toIndentedString(maskingUsername)).append("\n");
    sb.append("    maskingPassword: ").append(toIndentedString(maskingPassword)).append("\n");
    sb.append("    hashicorpVaultUsernameCommandArgs: ").append(toIndentedString(hashicorpVaultUsernameCommandArgs)).append("\n");
    sb.append("    hashicorpVaultMaskingUsernameCommandArgs: ").append(toIndentedString(hashicorpVaultMaskingUsernameCommandArgs)).append("\n");
    sb.append("    hashicorpVaultPasswordCommandArgs: ").append(toIndentedString(hashicorpVaultPasswordCommandArgs)).append("\n");
    sb.append("    hashicorpVaultMaskingPasswordCommandArgs: ").append(toIndentedString(hashicorpVaultMaskingPasswordCommandArgs)).append("\n");
    sb.append("    maskingHashicorpVaultId: ").append(toIndentedString(maskingHashicorpVaultId)).append("\n");
    sb.append("    hashicorpVaultId: ").append(toIndentedString(hashicorpVaultId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    maskingMemoryUsed: ").append(toIndentedString(maskingMemoryUsed)).append("\n");
    sb.append("    maskingAllocatedMemory: ").append(toIndentedString(maskingAllocatedMemory)).append("\n");
    sb.append("    maskingJobsRunning: ").append(toIndentedString(maskingJobsRunning)).append("\n");
    sb.append("    maskingMaxConcurrentJobs: ").append(toIndentedString(maskingMaxConcurrentJobs)).append("\n");
    sb.append("    maskingAvailableCores: ").append(toIndentedString(maskingAvailableCores)).append("\n");
    sb.append("    hyperscaleInstanceIds: ").append(toIndentedString(hyperscaleInstanceIds)).append("\n");
    sb.append("    hyperscaleTruststoreFilename: ").append(toIndentedString(hyperscaleTruststoreFilename)).append("\n");
    sb.append("    hyperscaleTruststorePassword: ").append(toIndentedString(hyperscaleTruststorePassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("uuid");
    openapiFields.add("type");
    openapiFields.add("version");
    openapiFields.add("name");
    openapiFields.add("ssh_public_key");
    openapiFields.add("hostname");
    openapiFields.add("cpu_core_count");
    openapiFields.add("memory_size");
    openapiFields.add("data_storage_capacity");
    openapiFields.add("data_storage_used");
    openapiFields.add("insecure_ssl");
    openapiFields.add("unsafe_ssl_hostname_check");
    openapiFields.add("truststore_filename");
    openapiFields.add("truststore_password");
    openapiFields.add("status");
    openapiFields.add("connection_status");
    openapiFields.add("engine_connection_status");
    openapiFields.add("connection_status_details");
    openapiFields.add("engine_connection_status_details");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("masking_username");
    openapiFields.add("masking_password");
    openapiFields.add("hashicorp_vault_username_command_args");
    openapiFields.add("hashicorp_vault_masking_username_command_args");
    openapiFields.add("hashicorp_vault_password_command_args");
    openapiFields.add("hashicorp_vault_masking_password_command_args");
    openapiFields.add("masking_hashicorp_vault_id");
    openapiFields.add("hashicorp_vault_id");
    openapiFields.add("tags");
    openapiFields.add("masking_memory_used");
    openapiFields.add("masking_allocated_memory");
    openapiFields.add("masking_jobs_running");
    openapiFields.add("masking_max_concurrent_jobs");
    openapiFields.add("masking_available_cores");
    openapiFields.add("hyperscale_instance_ids");
    openapiFields.add("hyperscale_truststore_filename");
    openapiFields.add("hyperscale_truststore_password");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RegisteredEngine
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisteredEngine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisteredEngine is not found in the empty JSON string", RegisteredEngine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisteredEngine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisteredEngine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ssh_public_key") != null && !jsonObj.get("ssh_public_key").isJsonNull()) && !jsonObj.get("ssh_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_public_key").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("truststore_filename") != null && !jsonObj.get("truststore_filename").isJsonNull()) && !jsonObj.get("truststore_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `truststore_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("truststore_filename").toString()));
      }
      if ((jsonObj.get("truststore_password") != null && !jsonObj.get("truststore_password").isJsonNull()) && !jsonObj.get("truststore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `truststore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("truststore_password").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonNull()) && !jsonObj.get("connection_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_status").toString()));
      }
      // validate the optional field `connection_status`
      if (jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connection_status"));
      }
      if ((jsonObj.get("engine_connection_status") != null && !jsonObj.get("engine_connection_status").isJsonNull()) && !jsonObj.get("engine_connection_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_connection_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_connection_status").toString()));
      }
      // validate the optional field `engine_connection_status`
      if (jsonObj.get("engine_connection_status") != null && !jsonObj.get("engine_connection_status").isJsonNull()) {
        EngineConnectionStatusEnum.validateJsonElement(jsonObj.get("engine_connection_status"));
      }
      if ((jsonObj.get("connection_status_details") != null && !jsonObj.get("connection_status_details").isJsonNull()) && !jsonObj.get("connection_status_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_status_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_status_details").toString()));
      }
      if ((jsonObj.get("engine_connection_status_details") != null && !jsonObj.get("engine_connection_status_details").isJsonNull()) && !jsonObj.get("engine_connection_status_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_connection_status_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_connection_status_details").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("masking_username") != null && !jsonObj.get("masking_username").isJsonNull()) && !jsonObj.get("masking_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masking_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masking_username").toString()));
      }
      if ((jsonObj.get("masking_password") != null && !jsonObj.get("masking_password").isJsonNull()) && !jsonObj.get("masking_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masking_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masking_password").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashicorp_vault_username_command_args") != null && !jsonObj.get("hashicorp_vault_username_command_args").isJsonNull() && !jsonObj.get("hashicorp_vault_username_command_args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_username_command_args` to be an array in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_username_command_args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashicorp_vault_masking_username_command_args") != null && !jsonObj.get("hashicorp_vault_masking_username_command_args").isJsonNull() && !jsonObj.get("hashicorp_vault_masking_username_command_args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_masking_username_command_args` to be an array in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_masking_username_command_args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashicorp_vault_password_command_args") != null && !jsonObj.get("hashicorp_vault_password_command_args").isJsonNull() && !jsonObj.get("hashicorp_vault_password_command_args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_password_command_args` to be an array in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_password_command_args").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hashicorp_vault_masking_password_command_args") != null && !jsonObj.get("hashicorp_vault_masking_password_command_args").isJsonNull() && !jsonObj.get("hashicorp_vault_masking_password_command_args").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_masking_password_command_args` to be an array in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_masking_password_command_args").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hyperscale_instance_ids") != null && !jsonObj.get("hyperscale_instance_ids").isJsonNull() && !jsonObj.get("hyperscale_instance_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_instance_ids` to be an array in the JSON string but got `%s`", jsonObj.get("hyperscale_instance_ids").toString()));
      }
      if ((jsonObj.get("hyperscale_truststore_filename") != null && !jsonObj.get("hyperscale_truststore_filename").isJsonNull()) && !jsonObj.get("hyperscale_truststore_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_truststore_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_truststore_filename").toString()));
      }
      if ((jsonObj.get("hyperscale_truststore_password") != null && !jsonObj.get("hyperscale_truststore_password").isJsonNull()) && !jsonObj.get("hyperscale_truststore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_truststore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_truststore_password").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisteredEngine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisteredEngine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisteredEngine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisteredEngine.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisteredEngine>() {
           @Override
           public void write(JsonWriter out, RegisteredEngine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisteredEngine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RegisteredEngine given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RegisteredEngine
  * @throws IOException if the JSON string is invalid with respect to RegisteredEngine
  */
  public static RegisteredEngine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisteredEngine.class);
  }

 /**
  * Convert an instance of RegisteredEngine to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

