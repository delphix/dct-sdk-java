/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Connectors are the way users define the data sources to which the Masking Engine should connect.
 */
@ApiModel(description = "Connectors are the way users define the data sources to which the Masking Engine should connect.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class Connector {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  /**
   * The type of Connector. One of Database, File, or Mainframe.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DATABASE("DATABASE"),
    
    FILE("FILE"),
    
    MAINFRAME_DATASET("MAINFRAME_DATASET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = null;


  public Connector id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The Connector entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1-database-123", value = "The Connector entity ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Connector name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The Connector name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "connector-name", value = "The Connector name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Connector engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * A reference to the Engine that this Connector belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123", value = "A reference to the Engine that this Connector belongs to.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public Connector type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of Connector. One of Database, File, or Mainframe.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DATABASE", value = "The type of Connector. One of Database, File, or Mainframe.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Connector hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The network hostname or IP address of the database server.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "database_server.mycompany.co", value = "The network hostname or IP address of the database server.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Connector port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * The TCP port of the server.
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9100", value = "The TCP port of the server.")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public Connector username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * The username this Connector will use to connect to the database.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The username this Connector will use to connect to the database.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public Connector tags(List<Tag> tags) {
    
    this.tags = tags;
    return this;
  }

  public Connector addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connector connector = (Connector) o;
    return Objects.equals(this.id, connector.id) &&
        Objects.equals(this.name, connector.name) &&
        Objects.equals(this.engineId, connector.engineId) &&
        Objects.equals(this.type, connector.type) &&
        Objects.equals(this.hostname, connector.hostname) &&
        Objects.equals(this.port, connector.port) &&
        Objects.equals(this.username, connector.username) &&
        Objects.equals(this.tags, connector.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, engineId, type, hostname, port, username, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connector {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

