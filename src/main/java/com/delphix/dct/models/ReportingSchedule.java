/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * ReportingSchedule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ReportingSchedule {
  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private Integer reportId;

  /**
   * Gets or Sets reportType
   */
  @JsonAdapter(ReportTypeEnum.Adapter.class)
  public enum ReportTypeEnum {
    VIRTUALIZATION_STORAGE_SUMMARY("VIRTUALIZATION_STORAGE_SUMMARY"),
    
    ENGINE_PERFORMANCE_ANALYTIC("ENGINE_PERFORMANCE_ANALYTIC"),
    
    VDB_INVENTORY_DATA("VDB_INVENTORY_DATA"),
    
    DSOURCE_USAGE_DATA("DSOURCE_USAGE_DATA"),
    
    DSOURCE_CONSUMPTION_DATA("DSOURCE_CONSUMPTION_DATA"),
    
    MASKING_EXECUTION_METRICS("MASKING_EXECUTION_METRICS"),
    
    AUDIT_LOGS_SUMMARY("AUDIT_LOGS_SUMMARY"),
    
    STORAGE_SAVINGS_SUMMARY("STORAGE_SAVINGS_SUMMARY");

    private String value;

    ReportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportTypeEnum fromValue(String value) {
      for (ReportTypeEnum b : ReportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_TYPE = "report_type";
  @SerializedName(SERIALIZED_NAME_REPORT_TYPE)
  private ReportTypeEnum reportType;

  public static final String SERIALIZED_NAME_CRON_EXPRESSION = "cron_expression";
  @SerializedName(SERIALIZED_NAME_CRON_EXPRESSION)
  private String cronExpression;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * Gets or Sets fileFormat
   */
  @JsonAdapter(FileFormatEnum.Adapter.class)
  public enum FileFormatEnum {
    CSV("CSV");

    private String value;

    FileFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileFormatEnum fromValue(String value) {
      for (FileFormatEnum b : FileFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_FORMAT = "file_format";
  @SerializedName(SERIALIZED_NAME_FILE_FORMAT)
  private FileFormatEnum fileFormat;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private Set<String> recipients = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  /**
   * Gets or Sets sortColumn
   */
  @JsonAdapter(SortColumnEnum.Adapter.class)
  public enum SortColumnEnum {
    ENGINE_ID("engine_id"),
    
    ENGINE_NAME("engine_name"),
    
    ENGINE_HOSTNAME("engine_hostname"),
    
    TOTAL_CAPACITY("total_capacity"),
    
    FREE_STORAGE("free_storage"),
    
    USED_STORAGE("used_storage"),
    
    USED_PERCENTAGE("used_percentage"),
    
    DSOURCE_COUNT("dsource_count"),
    
    VDB_COUNT("vdb_count"),
    
    TOTAL_OBJECT_COUNT("total_object_count"),
    
    NAME("name"),
    
    UNVIRTUALIZED_SPACE("unvirtualized_space"),
    
    ACTUAL_SPACE("actual_space"),
    
    DEPENDANT_VDBS("dependant_vdbs"),
    
    TYPE("type"),
    
    VERSION("version"),
    
    PARENT_ID("parent_id"),
    
    PARENT_NAME("parent_name"),
    
    CREATION_DATE("creation_date"),
    
    PARENT_TIMEFLOW_LOCATION("parent_timeflow_location"),
    
    PARENT_TIMEFLOW_TIMESTAMP("parent_timeflow_timestamp"),
    
    PARENT_TIMEFLOW_TIMEZONE("parent_timeflow_timezone"),
    
    ENABLED("enabled"),
    
    STATUS("status"),
    
    _ENGINE_ID("-engine_id"),
    
    _ENGINE_NAME("-engine_name"),
    
    _ENGINE_HOSTNAME("-engine_hostname"),
    
    _TOTAL_CAPACITY("-total_capacity"),
    
    _FREE_STORAGE("-free_storage"),
    
    _USED_STORAGE("-used_storage"),
    
    _USED_PERCENTAGE("-used_percentage"),
    
    _DSOURCE_COUNT("-dsource_count"),
    
    _VDB_COUNT("-vdb_count"),
    
    _TOTAL_OBJECT_COUNT("-total_object_count"),
    
    _UNVIRTUALIZED_SPACE("-unvirtualized_space"),
    
    _ACTUAL_SPACE("-actual_space"),
    
    _DEPENDANT_VDBS("-dependant_vdbs"),
    
    _NAME("-name"),
    
    _TYPE("-type"),
    
    _VERSION("-version"),
    
    _PARENT_ID("-parent_id"),
    
    _PARENT_NAME("-parent_name"),
    
    _CREATION_DATE("-creation_date"),
    
    _PARENT_TIMEFLOW_LOCATION("-parent_timeflow_location"),
    
    _PARENT_TIMEFLOW_TIMESTAMP("-parent_timeflow_timestamp"),
    
    _PARENT_TIMEFLOW_TIMEZONE("-parent_timeflow_timezone"),
    
    _ENABLED("-enabled"),
    
    _STATUS("-status");

    private String value;

    SortColumnEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortColumnEnum fromValue(String value) {
      for (SortColumnEnum b : SortColumnEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortColumnEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortColumnEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortColumnEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortColumnEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortColumnEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_COLUMN = "sort_column";
  @SerializedName(SERIALIZED_NAME_SORT_COLUMN)
  private SortColumnEnum sortColumn;

  public static final String SERIALIZED_NAME_ROW_COUNT = "row_count";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private Integer rowCount;

  public ReportingSchedule() {
  }

  public ReportingSchedule(
     Integer reportId
  ) {
    this();
    this.reportId = reportId;
  }

   /**
   * Get reportId
   * @return reportId
  **/
  @javax.annotation.Nullable
  public Integer getReportId() {
    return reportId;
  }



  public ReportingSchedule reportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
    return this;
  }

   /**
   * Get reportType
   * @return reportType
  **/
  @javax.annotation.Nonnull
  public ReportTypeEnum getReportType() {
    return reportType;
  }

  public void setReportType(ReportTypeEnum reportType) {
    this.reportType = reportType;
  }


  public ReportingSchedule cronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
    return this;
  }

   /**
   * Standard cron expressions are supported e.g. 0 15 10 L * ?  - Schedule at 10:15 AM on the last day of every month, 0 0 2 ? * Mon-Fri - Schedule at 2:00 AM every Monday, Tuesday, Wednesday, Thursday and Friday. For more details kindly refer- \&quot;http://www.quartz-scheduler.org/documentation/\&quot;
   * @return cronExpression
  **/
  @javax.annotation.Nonnull
  public String getCronExpression() {
    return cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }


  public ReportingSchedule timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Timezones are specified according to the Olson tzinfo database - \&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;.
   * @return timeZone
  **/
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public ReportingSchedule message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ReportingSchedule fileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

   /**
   * Get fileFormat
   * @return fileFormat
  **/
  @javax.annotation.Nonnull
  public FileFormatEnum getFileFormat() {
    return fileFormat;
  }

  public void setFileFormat(FileFormatEnum fileFormat) {
    this.fileFormat = fileFormat;
  }


  public ReportingSchedule enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ReportingSchedule recipients(Set<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public ReportingSchedule addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new LinkedHashSet<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nonnull
  public Set<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(Set<String> recipients) {
    this.recipients = recipients;
  }


  public ReportingSchedule tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public ReportingSchedule addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public ReportingSchedule sortColumn(SortColumnEnum sortColumn) {
    this.sortColumn = sortColumn;
    return this;
  }

   /**
   * Get sortColumn
   * @return sortColumn
  **/
  @javax.annotation.Nullable
  public SortColumnEnum getSortColumn() {
    return sortColumn;
  }

  public void setSortColumn(SortColumnEnum sortColumn) {
    this.sortColumn = sortColumn;
  }


  public ReportingSchedule rowCount(Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

   /**
   * Get rowCount
   * minimum: 1
   * @return rowCount
  **/
  @javax.annotation.Nullable
  public Integer getRowCount() {
    return rowCount;
  }

  public void setRowCount(Integer rowCount) {
    this.rowCount = rowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportingSchedule reportingSchedule = (ReportingSchedule) o;
    return Objects.equals(this.reportId, reportingSchedule.reportId) &&
        Objects.equals(this.reportType, reportingSchedule.reportType) &&
        Objects.equals(this.cronExpression, reportingSchedule.cronExpression) &&
        Objects.equals(this.timeZone, reportingSchedule.timeZone) &&
        Objects.equals(this.message, reportingSchedule.message) &&
        Objects.equals(this.fileFormat, reportingSchedule.fileFormat) &&
        Objects.equals(this.enabled, reportingSchedule.enabled) &&
        Objects.equals(this.recipients, reportingSchedule.recipients) &&
        Objects.equals(this.tags, reportingSchedule.tags) &&
        Objects.equals(this.sortColumn, reportingSchedule.sortColumn) &&
        Objects.equals(this.rowCount, reportingSchedule.rowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportId, reportType, cronExpression, timeZone, message, fileFormat, enabled, recipients, tags, sortColumn, rowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportingSchedule {\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportType: ").append(toIndentedString(reportType)).append("\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    fileFormat: ").append(toIndentedString(fileFormat)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sortColumn: ").append(toIndentedString(sortColumn)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("report_id");
    openapiFields.add("report_type");
    openapiFields.add("cron_expression");
    openapiFields.add("time_zone");
    openapiFields.add("message");
    openapiFields.add("file_format");
    openapiFields.add("enabled");
    openapiFields.add("recipients");
    openapiFields.add("tags");
    openapiFields.add("sort_column");
    openapiFields.add("row_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("report_type");
    openapiRequiredFields.add("cron_expression");
    openapiRequiredFields.add("file_format");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("recipients");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReportingSchedule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportingSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportingSchedule is not found in the empty JSON string", ReportingSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportingSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportingSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportingSchedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("report_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_type").toString()));
      }
      // validate the required field `report_type`
      ReportTypeEnum.validateJsonElement(jsonObj.get("report_type"));
      if (!jsonObj.get("cron_expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron_expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron_expression").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("file_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_format").toString()));
      }
      // validate the required field `file_format`
      FileFormatEnum.validateJsonElement(jsonObj.get("file_format"));
      // ensure the required json array is present
      if (jsonObj.get("recipients") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("sort_column") != null && !jsonObj.get("sort_column").isJsonNull()) && !jsonObj.get("sort_column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort_column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort_column").toString()));
      }
      // validate the optional field `sort_column`
      if (jsonObj.get("sort_column") != null && !jsonObj.get("sort_column").isJsonNull()) {
        SortColumnEnum.validateJsonElement(jsonObj.get("sort_column"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportingSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportingSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportingSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportingSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportingSchedule>() {
           @Override
           public void write(JsonWriter out, ReportingSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportingSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportingSchedule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportingSchedule
  * @throws IOException if the JSON string is invalid with respect to ReportingSchedule
  */
  public static ReportingSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportingSchedule.class);
  }

 /**
  * Convert an instance of ReportingSchedule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

