/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;

/**
 * The Delphix storage-based copy of the source database including its history.
 */
@ApiModel(description = "The Delphix storage-based copy of the source database including its history.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class DSource {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "database_version";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private String databaseVersion;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DATA_UUID = "data_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_UUID)
  private String dataUuid;

  public static final String SERIALIZED_NAME_STORAGE_SIZE = "storage_size";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE)
  private Long storageSize;

  public static final String SERIALIZED_NAME_PLUGIN_VERSION = "plugin_version";
  @SerializedName(SERIALIZED_NAME_PLUGIN_VERSION)
  private String pluginVersion;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_CDB_ID = "cdb_id";
  @SerializedName(SERIALIZED_NAME_CDB_ID)
  private String cdbId;

  public static final String SERIALIZED_NAME_CURRENT_TIMEFLOW_ID = "current_timeflow_id";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIMEFLOW_ID)
  private String currentTimeflowId;

  public static final String SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID = "previous_timeflow_id";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID)
  private String previousTimeflowId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = null;


  public DSource id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The dSource object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dSource object entity ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public DSource databaseType(String databaseType) {
    
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The database type of this dSource.
   * @return databaseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The database type of this dSource.")

  public String getDatabaseType() {
    return databaseType;
  }


  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public DSource name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The container name of this dSource.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The container name of this dSource.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DSource databaseVersion(String databaseVersion) {
    
    this.databaseVersion = databaseVersion;
    return this;
  }

   /**
   * The database version of this dSource.
   * @return databaseVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The database version of this dSource.")

  public String getDatabaseVersion() {
    return databaseVersion;
  }


  public void setDatabaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public DSource contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * The content type of the dSource.
   * @return contentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The content type of the dSource.")

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public DSource dataUuid(String dataUuid) {
    
    this.dataUuid = dataUuid;
    return this;
  }

   /**
   * A universal ID that uniquely identifies the dSource database.
   * @return dataUuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A universal ID that uniquely identifies the dSource database.")

  public String getDataUuid() {
    return dataUuid;
  }


  public void setDataUuid(String dataUuid) {
    this.dataUuid = dataUuid;
  }


  public DSource storageSize(Long storageSize) {
    
    this.storageSize = storageSize;
    return this;
  }

   /**
   * The actual space used by this dSource, in bytes.
   * @return storageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The actual space used by this dSource, in bytes.")

  public Long getStorageSize() {
    return storageSize;
  }


  public void setStorageSize(Long storageSize) {
    this.storageSize = storageSize;
  }


  public DSource pluginVersion(String pluginVersion) {
    
    this.pluginVersion = pluginVersion;
    return this;
  }

   /**
   * The version of the plugin associated with this source database.
   * @return pluginVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The version of the plugin associated with this source database.")

  public String getPluginVersion() {
    return pluginVersion;
  }


  public void setPluginVersion(String pluginVersion) {
    this.pluginVersion = pluginVersion;
  }


  public DSource creationDate(OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date this dSource was created.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date this dSource was created.")

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public DSource groupName(String groupName) {
    
    this.groupName = groupName;
    return this;
  }

   /**
   * The name of the group containing this dSource.
   * @return groupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the group containing this dSource.")

  public String getGroupName() {
    return groupName;
  }


  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public DSource enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * A value indicating whether this dSource is enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A value indicating whether this dSource is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DSource engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * A reference to the Engine that this dSource belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to the Engine that this dSource belongs to.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public DSource sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * A reference to the Source associated with this dSource.
   * @return sourceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to the Source associated with this dSource.")

  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public DSource status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The runtime status of the dSource. &#39;Unknown&#39; if all attempts to connect to the source failed.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The runtime status of the dSource. 'Unknown' if all attempts to connect to the source failed.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public DSource engineName(String engineName) {
    
    this.engineName = engineName;
    return this;
  }

   /**
   * Name of the Engine where this DSource is hosted
   * @return engineName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Engine where this DSource is hosted")

  public String getEngineName() {
    return engineName;
  }


  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public DSource cdbId(String cdbId) {
    
    this.cdbId = cdbId;
    return this;
  }

   /**
   * A reference to the CDB associated with this dSource.
   * @return cdbId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to the CDB associated with this dSource.")

  public String getCdbId() {
    return cdbId;
  }


  public void setCdbId(String cdbId) {
    this.cdbId = cdbId;
  }


  public DSource currentTimeflowId(String currentTimeflowId) {
    
    this.currentTimeflowId = currentTimeflowId;
    return this;
  }

   /**
   * A reference to the currently active timeflow for this dSource.
   * @return currentTimeflowId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "timeflow-123", value = "A reference to the currently active timeflow for this dSource.")

  public String getCurrentTimeflowId() {
    return currentTimeflowId;
  }


  public void setCurrentTimeflowId(String currentTimeflowId) {
    this.currentTimeflowId = currentTimeflowId;
  }


  public DSource previousTimeflowId(String previousTimeflowId) {
    
    this.previousTimeflowId = previousTimeflowId;
    return this;
  }

   /**
   * A reference to the previous timeflow for this dSource.
   * @return previousTimeflowId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "timeflow-123", value = "A reference to the previous timeflow for this dSource.")

  public String getPreviousTimeflowId() {
    return previousTimeflowId;
  }


  public void setPreviousTimeflowId(String previousTimeflowId) {
    this.previousTimeflowId = previousTimeflowId;
  }


  public DSource tags(List<Tag> tags) {
    
    this.tags = tags;
    return this;
  }

  public DSource addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSource dsource = (DSource) o;
    return Objects.equals(this.id, dsource.id) &&
        Objects.equals(this.databaseType, dsource.databaseType) &&
        Objects.equals(this.name, dsource.name) &&
        Objects.equals(this.databaseVersion, dsource.databaseVersion) &&
        Objects.equals(this.contentType, dsource.contentType) &&
        Objects.equals(this.dataUuid, dsource.dataUuid) &&
        Objects.equals(this.storageSize, dsource.storageSize) &&
        Objects.equals(this.pluginVersion, dsource.pluginVersion) &&
        Objects.equals(this.creationDate, dsource.creationDate) &&
        Objects.equals(this.groupName, dsource.groupName) &&
        Objects.equals(this.enabled, dsource.enabled) &&
        Objects.equals(this.engineId, dsource.engineId) &&
        Objects.equals(this.sourceId, dsource.sourceId) &&
        Objects.equals(this.status, dsource.status) &&
        Objects.equals(this.engineName, dsource.engineName) &&
        Objects.equals(this.cdbId, dsource.cdbId) &&
        Objects.equals(this.currentTimeflowId, dsource.currentTimeflowId) &&
        Objects.equals(this.previousTimeflowId, dsource.previousTimeflowId) &&
        Objects.equals(this.tags, dsource.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && a.get().getClass().isArray() ? Arrays.equals((T[])a.get(), (T[])b.get()) : Objects.equals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, databaseType, name, databaseVersion, contentType, dataUuid, storageSize, pluginVersion, creationDate, groupName, enabled, engineId, sourceId, status, engineName, cdbId, currentTimeflowId, previousTimeflowId, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent()
      ? (a.get().getClass().isArray() ? Arrays.hashCode((T[])a.get()) : Objects.hashCode(a.get()))
      : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    dataUuid: ").append(toIndentedString(dataUuid)).append("\n");
    sb.append("    storageSize: ").append(toIndentedString(storageSize)).append("\n");
    sb.append("    pluginVersion: ").append(toIndentedString(pluginVersion)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    cdbId: ").append(toIndentedString(cdbId)).append("\n");
    sb.append("    currentTimeflowId: ").append(toIndentedString(currentTimeflowId)).append("\n");
    sb.append("    previousTimeflowId: ").append(toIndentedString(previousTimeflowId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

