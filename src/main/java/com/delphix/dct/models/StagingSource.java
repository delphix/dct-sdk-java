/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * The Delphix representation of the staging source database (not typically managed by Delphix).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class StagingSource {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "database_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "database_version";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private String databaseVersion;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_DATA_UUID = "data_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_UUID)
  private String dataUuid;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  private String repository;

  /**
   * The type of oracle source configuration for this staging source. (Oracle only)
   */
  @JsonAdapter(OracleConfigTypeEnum.Adapter.class)
  public enum OracleConfigTypeEnum {
    ORACLERACCONFIG("OracleRACConfig"),
    
    ORACLESICONFIG("OracleSIConfig"),
    
    ORACLEPDBCONFIG("OraclePDBConfig");

    private String value;

    OracleConfigTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OracleConfigTypeEnum fromValue(String value) {
      for (OracleConfigTypeEnum b : OracleConfigTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OracleConfigTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OracleConfigTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OracleConfigTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OracleConfigTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OracleConfigTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORACLE_CONFIG_TYPE = "oracle_config_type";
  @SerializedName(SERIALIZED_NAME_ORACLE_CONFIG_TYPE)
  private OracleConfigTypeEnum oracleConfigType;

  public static final String SERIALIZED_NAME_CDB_TYPE = "cdb_type";
  @SerializedName(SERIALIZED_NAME_CDB_TYPE)
  private String cdbType;

  public static final String SERIALIZED_NAME_DSOURCE_ID = "dsource_id";
  @SerializedName(SERIALIZED_NAME_DSOURCE_ID)
  private String dsourceId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public StagingSource() {
  }

  public StagingSource id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Staging Source object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StagingSource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this staging source database.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public StagingSource databaseType(String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The type of this staging source database.
   * @return databaseType
  **/
  @javax.annotation.Nullable
  public String getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public StagingSource databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

   /**
   * The name of container database of associated with this staging source database.
   * @return databaseName
  **/
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public StagingSource databaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

   /**
   * The version of container database associated with this staging source database.
   * @return databaseVersion
  **/
  @javax.annotation.Nullable
  public String getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public StagingSource environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * A reference to the Environment that hosts this staging source database.
   * @return environmentId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public StagingSource dataUuid(String dataUuid) {
    this.dataUuid = dataUuid;
    return this;
  }

   /**
   * A universal ID that uniquely identifies this staging source database.
   * @return dataUuid
  **/
  @javax.annotation.Nullable
  public String getDataUuid() {
    return dataUuid;
  }

  public void setDataUuid(String dataUuid) {
    this.dataUuid = dataUuid;
  }


  public StagingSource ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The IP address of the staging source&#39;s host.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public StagingSource fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

   /**
   * The FQDN of the staging source&#39;s host.
   * @return fqdn
  **/
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public StagingSource repository(String repository) {
    this.repository = repository;
    return this;
  }

   /**
   * The repository id for this staging source.
   * @return repository
  **/
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(String repository) {
    this.repository = repository;
  }


  public StagingSource oracleConfigType(OracleConfigTypeEnum oracleConfigType) {
    this.oracleConfigType = oracleConfigType;
    return this;
  }

   /**
   * The type of oracle source configuration for this staging source. (Oracle only)
   * @return oracleConfigType
  **/
  @javax.annotation.Nullable
  public OracleConfigTypeEnum getOracleConfigType() {
    return oracleConfigType;
  }

  public void setOracleConfigType(OracleConfigTypeEnum oracleConfigType) {
    this.oracleConfigType = oracleConfigType;
  }


  public StagingSource cdbType(String cdbType) {
    this.cdbType = cdbType;
    return this;
  }

   /**
   * The cdb type for this staging source. (Oracle only)
   * @return cdbType
  **/
  @javax.annotation.Nullable
  public String getCdbType() {
    return cdbType;
  }

  public void setCdbType(String cdbType) {
    this.cdbType = cdbType;
  }


  public StagingSource dsourceId(String dsourceId) {
    this.dsourceId = dsourceId;
    return this;
  }

   /**
   * The dsource_id associated with this staging source.
   * @return dsourceId
  **/
  @javax.annotation.Nullable
  public String getDsourceId() {
    return dsourceId;
  }

  public void setDsourceId(String dsourceId) {
    this.dsourceId = dsourceId;
  }


  public StagingSource tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public StagingSource addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StagingSource stagingSource = (StagingSource) o;
    return Objects.equals(this.id, stagingSource.id) &&
        Objects.equals(this.name, stagingSource.name) &&
        Objects.equals(this.databaseType, stagingSource.databaseType) &&
        Objects.equals(this.databaseName, stagingSource.databaseName) &&
        Objects.equals(this.databaseVersion, stagingSource.databaseVersion) &&
        Objects.equals(this.environmentId, stagingSource.environmentId) &&
        Objects.equals(this.dataUuid, stagingSource.dataUuid) &&
        Objects.equals(this.ipAddress, stagingSource.ipAddress) &&
        Objects.equals(this.fqdn, stagingSource.fqdn) &&
        Objects.equals(this.repository, stagingSource.repository) &&
        Objects.equals(this.oracleConfigType, stagingSource.oracleConfigType) &&
        Objects.equals(this.cdbType, stagingSource.cdbType) &&
        Objects.equals(this.dsourceId, stagingSource.dsourceId) &&
        Objects.equals(this.tags, stagingSource.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, databaseType, databaseName, databaseVersion, environmentId, dataUuid, ipAddress, fqdn, repository, oracleConfigType, cdbType, dsourceId, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StagingSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    dataUuid: ").append(toIndentedString(dataUuid)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    oracleConfigType: ").append(toIndentedString(oracleConfigType)).append("\n");
    sb.append("    cdbType: ").append(toIndentedString(cdbType)).append("\n");
    sb.append("    dsourceId: ").append(toIndentedString(dsourceId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("database_type");
    openapiFields.add("database_name");
    openapiFields.add("database_version");
    openapiFields.add("environment_id");
    openapiFields.add("data_uuid");
    openapiFields.add("ip_address");
    openapiFields.add("fqdn");
    openapiFields.add("repository");
    openapiFields.add("oracle_config_type");
    openapiFields.add("cdb_type");
    openapiFields.add("dsource_id");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StagingSource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StagingSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StagingSource is not found in the empty JSON string", StagingSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StagingSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StagingSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("database_type") != null && !jsonObj.get("database_type").isJsonNull()) && !jsonObj.get("database_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_type").toString()));
      }
      if ((jsonObj.get("database_name") != null && !jsonObj.get("database_name").isJsonNull()) && !jsonObj.get("database_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_name").toString()));
      }
      if ((jsonObj.get("database_version") != null && !jsonObj.get("database_version").isJsonNull()) && !jsonObj.get("database_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_version").toString()));
      }
      if ((jsonObj.get("environment_id") != null && !jsonObj.get("environment_id").isJsonNull()) && !jsonObj.get("environment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_id").toString()));
      }
      if ((jsonObj.get("data_uuid") != null && !jsonObj.get("data_uuid").isJsonNull()) && !jsonObj.get("data_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_uuid").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("oracle_config_type") != null && !jsonObj.get("oracle_config_type").isJsonNull()) && !jsonObj.get("oracle_config_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_config_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_config_type").toString()));
      }
      // validate the optional field `oracle_config_type`
      if (jsonObj.get("oracle_config_type") != null && !jsonObj.get("oracle_config_type").isJsonNull()) {
        OracleConfigTypeEnum.validateJsonElement(jsonObj.get("oracle_config_type"));
      }
      if ((jsonObj.get("cdb_type") != null && !jsonObj.get("cdb_type").isJsonNull()) && !jsonObj.get("cdb_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdb_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdb_type").toString()));
      }
      if ((jsonObj.get("dsource_id") != null && !jsonObj.get("dsource_id").isJsonNull()) && !jsonObj.get("dsource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsource_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StagingSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StagingSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StagingSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StagingSource.class));

       return (TypeAdapter<T>) new TypeAdapter<StagingSource>() {
           @Override
           public void write(JsonWriter out, StagingSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StagingSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StagingSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StagingSource
  * @throws IOException if the JSON string is invalid with respect to StagingSource
  */
  public static StagingSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StagingSource.class);
  }

 /**
  * Convert an instance of StagingSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

