/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.SourceOperation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * OracleDSourceLinkSourceParametersAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class OracleDSourceLinkSourceParametersAllOf {
  public static final String SERIALIZED_NAME_ENVIRONMENT_USER_ID = "environment_user_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_USER_ID)
  private String environmentUserId;

  public static final String SERIALIZED_NAME_BACKUP_LEVEL_ENABLED = "backup_level_enabled";
  @SerializedName(SERIALIZED_NAME_BACKUP_LEVEL_ENABLED)
  private Boolean backupLevelEnabled;

  public static final String SERIALIZED_NAME_RMAN_CHANNELS = "rman_channels";
  @SerializedName(SERIALIZED_NAME_RMAN_CHANNELS)
  private Integer rmanChannels = 2;

  public static final String SERIALIZED_NAME_FILES_PER_SET = "files_per_set";
  @SerializedName(SERIALIZED_NAME_FILES_PER_SET)
  private Integer filesPerSet = 5;

  public static final String SERIALIZED_NAME_CHECK_LOGICAL = "check_logical";
  @SerializedName(SERIALIZED_NAME_CHECK_LOGICAL)
  private Boolean checkLogical = false;

  public static final String SERIALIZED_NAME_ENCRYPTED_LINKING_ENABLED = "encrypted_linking_enabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_LINKING_ENABLED)
  private Boolean encryptedLinkingEnabled = false;

  public static final String SERIALIZED_NAME_COMPRESSED_LINKING_ENABLED = "compressed_linking_enabled";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_LINKING_ENABLED)
  private Boolean compressedLinkingEnabled = true;

  public static final String SERIALIZED_NAME_BANDWIDTH_LIMIT = "bandwidth_limit";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_LIMIT)
  private Integer bandwidthLimit = 0;

  public static final String SERIALIZED_NAME_NUMBER_OF_CONNECTIONS = "number_of_connections";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CONNECTIONS)
  private Integer numberOfConnections = 1;

  public static final String SERIALIZED_NAME_DIAGNOSE_NO_LOGGING_FAULTS = "diagnose_no_logging_faults";
  @SerializedName(SERIALIZED_NAME_DIAGNOSE_NO_LOGGING_FAULTS)
  private Boolean diagnoseNoLoggingFaults = true;

  public static final String SERIALIZED_NAME_PRE_PROVISIONING_ENABLED = "pre_provisioning_enabled";
  @SerializedName(SERIALIZED_NAME_PRE_PROVISIONING_ENABLED)
  private Boolean preProvisioningEnabled = false;

  public static final String SERIALIZED_NAME_LINK_NOW = "link_now";
  @SerializedName(SERIALIZED_NAME_LINK_NOW)
  private Boolean linkNow = false;

  public static final String SERIALIZED_NAME_FORCE_FULL_BACKUP = "force_full_backup";
  @SerializedName(SERIALIZED_NAME_FORCE_FULL_BACKUP)
  private Boolean forceFullBackup = false;

  public static final String SERIALIZED_NAME_DOUBLE_SYNC = "double_sync";
  @SerializedName(SERIALIZED_NAME_DOUBLE_SYNC)
  private Boolean doubleSync = false;

  public static final String SERIALIZED_NAME_SKIP_SPACE_CHECK = "skip_space_check";
  @SerializedName(SERIALIZED_NAME_SKIP_SPACE_CHECK)
  private Boolean skipSpaceCheck = false;

  public static final String SERIALIZED_NAME_DO_NOT_RESUME = "do_not_resume";
  @SerializedName(SERIALIZED_NAME_DO_NOT_RESUME)
  private Boolean doNotResume = false;

  public static final String SERIALIZED_NAME_FILES_FOR_FULL_BACKUP = "files_for_full_backup";
  @SerializedName(SERIALIZED_NAME_FILES_FOR_FULL_BACKUP)
  private List<Integer> filesForFullBackup = null;

  /**
   * LogSync operation mode for this database.
   */
  @JsonAdapter(LogSyncModeEnum.Adapter.class)
  public enum LogSyncModeEnum {
    ARCHIVE_ONLY_MODE("ARCHIVE_ONLY_MODE"),
    
    ARCHIVE_REDO_MODE("ARCHIVE_REDO_MODE"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    LogSyncModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogSyncModeEnum fromValue(String value) {
      for (LogSyncModeEnum b : LogSyncModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogSyncModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogSyncModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogSyncModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogSyncModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOG_SYNC_MODE = "log_sync_mode";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_MODE)
  private LogSyncModeEnum logSyncMode = LogSyncModeEnum.UNDEFINED;

  public static final String SERIALIZED_NAME_LOG_SYNC_INTERVAL = "log_sync_interval";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_INTERVAL)
  private Integer logSyncInterval = 5;

  public static final String SERIALIZED_NAME_NON_SYS_USERNAME = "non_sys_username";
  @SerializedName(SERIALIZED_NAME_NON_SYS_USERNAME)
  private String nonSysUsername;

  public static final String SERIALIZED_NAME_NON_SYS_PASSWORD = "non_sys_password";
  @SerializedName(SERIALIZED_NAME_NON_SYS_PASSWORD)
  private String nonSysPassword;

  public static final String SERIALIZED_NAME_NON_SYS_VAULT = "non_sys_vault";
  @SerializedName(SERIALIZED_NAME_NON_SYS_VAULT)
  private String nonSysVault;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_ENGINE = "non_sys_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_ENGINE)
  private String nonSysHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_PATH = "non_sys_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_PATH)
  private String nonSysHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_USERNAME_KEY = "non_sys_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_USERNAME_KEY)
  private String nonSysHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_KEY = "non_sys_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_KEY)
  private String nonSysHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_NAME = "non_sys_azure_vault_name";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_NAME)
  private String nonSysAzureVaultName;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_USERNAME_KEY = "non_sys_azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_USERNAME_KEY)
  private String nonSysAzureVaultUsernameKey;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_SECRET_KEY = "non_sys_azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_SECRET_KEY)
  private String nonSysAzureVaultSecretKey;

  public static final String SERIALIZED_NAME_NON_SYS_CYBERARK_VAULT_QUERY_STRING = "non_sys_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_NON_SYS_CYBERARK_VAULT_QUERY_STRING)
  private String nonSysCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_FALLBACK_USERNAME = "fallback_username";
  @SerializedName(SERIALIZED_NAME_FALLBACK_USERNAME)
  private String fallbackUsername;

  public static final String SERIALIZED_NAME_FALLBACK_PASSWORD = "fallback_password";
  @SerializedName(SERIALIZED_NAME_FALLBACK_PASSWORD)
  private String fallbackPassword;

  public static final String SERIALIZED_NAME_FALLBACK_VAULT = "fallback_vault";
  @SerializedName(SERIALIZED_NAME_FALLBACK_VAULT)
  private String fallbackVault;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_ENGINE = "fallback_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_ENGINE)
  private String fallbackHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_PATH = "fallback_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_PATH)
  private String fallbackHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_USERNAME_KEY = "fallback_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_USERNAME_KEY)
  private String fallbackHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_KEY = "fallback_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_KEY)
  private String fallbackHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_NAME = "fallback_azure_vault_name";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_NAME)
  private String fallbackAzureVaultName;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_USERNAME_KEY = "fallback_azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_USERNAME_KEY)
  private String fallbackAzureVaultUsernameKey;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_SECRET_KEY = "fallback_azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_SECRET_KEY)
  private String fallbackAzureVaultSecretKey;

  public static final String SERIALIZED_NAME_FALLBACK_CYBERARK_VAULT_QUERY_STRING = "fallback_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_FALLBACK_CYBERARK_VAULT_QUERY_STRING)
  private String fallbackCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_OPS_PRE_LOG_SYNC = "ops_pre_log_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_LOG_SYNC)
  private List<SourceOperation> opsPreLogSync = null;


  public OracleDSourceLinkSourceParametersAllOf environmentUserId(String environmentUserId) {
    
    this.environmentUserId = environmentUserId;
    return this;
  }

   /**
   * Id of the environment user to use for linking.
   * @return environmentUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the environment user to use for linking.")

  public String getEnvironmentUserId() {
    return environmentUserId;
  }


  public void setEnvironmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
  }


  public OracleDSourceLinkSourceParametersAllOf backupLevelEnabled(Boolean backupLevelEnabled) {
    
    this.backupLevelEnabled = backupLevelEnabled;
    return this;
  }

   /**
   * Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.
   * @return backupLevelEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.")

  public Boolean getBackupLevelEnabled() {
    return backupLevelEnabled;
  }


  public void setBackupLevelEnabled(Boolean backupLevelEnabled) {
    this.backupLevelEnabled = backupLevelEnabled;
  }


  public OracleDSourceLinkSourceParametersAllOf rmanChannels(Integer rmanChannels) {
    
    this.rmanChannels = rmanChannels;
    return this;
  }

   /**
   * Number of parallel channels to use.
   * minimum: 1
   * maximum: 32
   * @return rmanChannels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of parallel channels to use.")

  public Integer getRmanChannels() {
    return rmanChannels;
  }


  public void setRmanChannels(Integer rmanChannels) {
    this.rmanChannels = rmanChannels;
  }


  public OracleDSourceLinkSourceParametersAllOf filesPerSet(Integer filesPerSet) {
    
    this.filesPerSet = filesPerSet;
    return this;
  }

   /**
   * Number of data files to include in each RMAN backup set.
   * minimum: 1
   * maximum: 64
   * @return filesPerSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of data files to include in each RMAN backup set.")

  public Integer getFilesPerSet() {
    return filesPerSet;
  }


  public void setFilesPerSet(Integer filesPerSet) {
    this.filesPerSet = filesPerSet;
  }


  public OracleDSourceLinkSourceParametersAllOf checkLogical(Boolean checkLogical) {
    
    this.checkLogical = checkLogical;
    return this;
  }

   /**
   * True if extended block checking should be used for this linked database.
   * @return checkLogical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if extended block checking should be used for this linked database.")

  public Boolean getCheckLogical() {
    return checkLogical;
  }


  public void setCheckLogical(Boolean checkLogical) {
    this.checkLogical = checkLogical;
  }


  public OracleDSourceLinkSourceParametersAllOf encryptedLinkingEnabled(Boolean encryptedLinkingEnabled) {
    
    this.encryptedLinkingEnabled = encryptedLinkingEnabled;
    return this;
  }

   /**
   * True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.
   * @return encryptedLinkingEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.")

  public Boolean getEncryptedLinkingEnabled() {
    return encryptedLinkingEnabled;
  }


  public void setEncryptedLinkingEnabled(Boolean encryptedLinkingEnabled) {
    this.encryptedLinkingEnabled = encryptedLinkingEnabled;
  }


  public OracleDSourceLinkSourceParametersAllOf compressedLinkingEnabled(Boolean compressedLinkingEnabled) {
    
    this.compressedLinkingEnabled = compressedLinkingEnabled;
    return this;
  }

   /**
   * True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.
   * @return compressedLinkingEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.")

  public Boolean getCompressedLinkingEnabled() {
    return compressedLinkingEnabled;
  }


  public void setCompressedLinkingEnabled(Boolean compressedLinkingEnabled) {
    this.compressedLinkingEnabled = compressedLinkingEnabled;
  }


  public OracleDSourceLinkSourceParametersAllOf bandwidthLimit(Integer bandwidthLimit) {
    
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.
   * @return bandwidthLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.")

  public Integer getBandwidthLimit() {
    return bandwidthLimit;
  }


  public void setBandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public OracleDSourceLinkSourceParametersAllOf numberOfConnections(Integer numberOfConnections) {
    
    this.numberOfConnections = numberOfConnections;
    return this;
  }

   /**
   * Total number of transport connections to use during SnapSync.
   * @return numberOfConnections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of transport connections to use during SnapSync.")

  public Integer getNumberOfConnections() {
    return numberOfConnections;
  }


  public void setNumberOfConnections(Integer numberOfConnections) {
    this.numberOfConnections = numberOfConnections;
  }


  public OracleDSourceLinkSourceParametersAllOf diagnoseNoLoggingFaults(Boolean diagnoseNoLoggingFaults) {
    
    this.diagnoseNoLoggingFaults = diagnoseNoLoggingFaults;
    return this;
  }

   /**
   * If true, NOLOGGING operations on this container are treated as faults and cannot be resolved manually.
   * @return diagnoseNoLoggingFaults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, NOLOGGING operations on this container are treated as faults and cannot be resolved manually.")

  public Boolean getDiagnoseNoLoggingFaults() {
    return diagnoseNoLoggingFaults;
  }


  public void setDiagnoseNoLoggingFaults(Boolean diagnoseNoLoggingFaults) {
    this.diagnoseNoLoggingFaults = diagnoseNoLoggingFaults;
  }


  public OracleDSourceLinkSourceParametersAllOf preProvisioningEnabled(Boolean preProvisioningEnabled) {
    
    this.preProvisioningEnabled = preProvisioningEnabled;
    return this;
  }

   /**
   * If true, pre-provisioning will be performed after every sync.
   * @return preProvisioningEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If true, pre-provisioning will be performed after every sync.")

  public Boolean getPreProvisioningEnabled() {
    return preProvisioningEnabled;
  }


  public void setPreProvisioningEnabled(Boolean preProvisioningEnabled) {
    this.preProvisioningEnabled = preProvisioningEnabled;
  }


  public OracleDSourceLinkSourceParametersAllOf linkNow(Boolean linkNow) {
    
    this.linkNow = linkNow;
    return this;
  }

   /**
   * True if initial load should be done immediately.
   * @return linkNow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if initial load should be done immediately.")

  public Boolean getLinkNow() {
    return linkNow;
  }


  public void setLinkNow(Boolean linkNow) {
    this.linkNow = linkNow;
  }


  public OracleDSourceLinkSourceParametersAllOf forceFullBackup(Boolean forceFullBackup) {
    
    this.forceFullBackup = forceFullBackup;
    return this;
  }

   /**
   * Whether or not to take another full backup of the source database.
   * @return forceFullBackup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not to take another full backup of the source database.")

  public Boolean getForceFullBackup() {
    return forceFullBackup;
  }


  public void setForceFullBackup(Boolean forceFullBackup) {
    this.forceFullBackup = forceFullBackup;
  }


  public OracleDSourceLinkSourceParametersAllOf doubleSync(Boolean doubleSync) {
    
    this.doubleSync = doubleSync;
    return this;
  }

   /**
   * True if two SnapSyncs should be performed in immediate succession to reduce the number of logs required to provision the snapshot. This may significantly reduce the time necessary to provision from a snapshot.
   * @return doubleSync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "True if two SnapSyncs should be performed in immediate succession to reduce the number of logs required to provision the snapshot. This may significantly reduce the time necessary to provision from a snapshot.")

  public Boolean getDoubleSync() {
    return doubleSync;
  }


  public void setDoubleSync(Boolean doubleSync) {
    this.doubleSync = doubleSync;
  }


  public OracleDSourceLinkSourceParametersAllOf skipSpaceCheck(Boolean skipSpaceCheck) {
    
    this.skipSpaceCheck = skipSpaceCheck;
    return this;
  }

   /**
   * Skip check that tests if there is enough space available to store the database in the Delphix Engine. The Delphix Engine estimates how much space a database will occupy after compression and prevents SnapSync if insufficient space is available. This safeguard can be overridden using this option. This may be useful when linking highly compressible databases.
   * @return skipSpaceCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Skip check that tests if there is enough space available to store the database in the Delphix Engine. The Delphix Engine estimates how much space a database will occupy after compression and prevents SnapSync if insufficient space is available. This safeguard can be overridden using this option. This may be useful when linking highly compressible databases.")

  public Boolean getSkipSpaceCheck() {
    return skipSpaceCheck;
  }


  public void setSkipSpaceCheck(Boolean skipSpaceCheck) {
    this.skipSpaceCheck = skipSpaceCheck;
  }


  public OracleDSourceLinkSourceParametersAllOf doNotResume(Boolean doNotResume) {
    
    this.doNotResume = doNotResume;
    return this;
  }

   /**
   * Indicates whether a fresh SnapSync must be started regardless if it was possible to resume the current SnapSync. If true, we will not resume but instead ignore previous progress and backup all datafiles even if already completed from previous failed SnapSync. This does not force a full backup, if an incremental was in progress this will start a new incremental snapshot.
   * @return doNotResume
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether a fresh SnapSync must be started regardless if it was possible to resume the current SnapSync. If true, we will not resume but instead ignore previous progress and backup all datafiles even if already completed from previous failed SnapSync. This does not force a full backup, if an incremental was in progress this will start a new incremental snapshot.")

  public Boolean getDoNotResume() {
    return doNotResume;
  }


  public void setDoNotResume(Boolean doNotResume) {
    this.doNotResume = doNotResume;
  }


  public OracleDSourceLinkSourceParametersAllOf filesForFullBackup(List<Integer> filesForFullBackup) {
    
    this.filesForFullBackup = filesForFullBackup;
    return this;
  }

  public OracleDSourceLinkSourceParametersAllOf addFilesForFullBackupItem(Integer filesForFullBackupItem) {
    if (this.filesForFullBackup == null) {
      this.filesForFullBackup = new ArrayList<Integer>();
    }
    this.filesForFullBackup.add(filesForFullBackupItem);
    return this;
  }

   /**
   * List of datafiles to take a full backup of. This would be useful in situations where certain datafiles could not be backed up during previous SnapSync due to corruption or because they went offline.
   * @return filesForFullBackup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of datafiles to take a full backup of. This would be useful in situations where certain datafiles could not be backed up during previous SnapSync due to corruption or because they went offline.")

  public List<Integer> getFilesForFullBackup() {
    return filesForFullBackup;
  }


  public void setFilesForFullBackup(List<Integer> filesForFullBackup) {
    this.filesForFullBackup = filesForFullBackup;
  }


  public OracleDSourceLinkSourceParametersAllOf logSyncMode(LogSyncModeEnum logSyncMode) {
    
    this.logSyncMode = logSyncMode;
    return this;
  }

   /**
   * LogSync operation mode for this database.
   * @return logSyncMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "LogSync operation mode for this database.")

  public LogSyncModeEnum getLogSyncMode() {
    return logSyncMode;
  }


  public void setLogSyncMode(LogSyncModeEnum logSyncMode) {
    this.logSyncMode = logSyncMode;
  }


  public OracleDSourceLinkSourceParametersAllOf logSyncInterval(Integer logSyncInterval) {
    
    this.logSyncInterval = logSyncInterval;
    return this;
  }

   /**
   * Interval between LogSync requests, in seconds.
   * @return logSyncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interval between LogSync requests, in seconds.")

  public Integer getLogSyncInterval() {
    return logSyncInterval;
  }


  public void setLogSyncInterval(Integer logSyncInterval) {
    this.logSyncInterval = logSyncInterval;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysUsername(String nonSysUsername) {
    
    this.nonSysUsername = nonSysUsername;
    return this;
  }

   /**
   * Non-SYS database user to access this database. Only required for username-password auth (Single tenant only).
   * @return nonSysUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle", value = "Non-SYS database user to access this database. Only required for username-password auth (Single tenant only).")

  public String getNonSysUsername() {
    return nonSysUsername;
  }


  public void setNonSysUsername(String nonSysUsername) {
    this.nonSysUsername = nonSysUsername;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysPassword(String nonSysPassword) {
    
    this.nonSysPassword = nonSysPassword;
    return this;
  }

   /**
   * Password for non sys user authentication (Single tenant only).
   * @return nonSysPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle", value = "Password for non sys user authentication (Single tenant only).")

  public String getNonSysPassword() {
    return nonSysPassword;
  }


  public void setNonSysPassword(String nonSysPassword) {
    this.nonSysPassword = nonSysPassword;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysVault(String nonSysVault) {
    
    this.nonSysVault = nonSysVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the database credentials (Single tenant only).
   * @return nonSysVault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-vault", value = "The name or reference of the vault from which to read the database credentials (Single tenant only).")

  public String getNonSysVault() {
    return nonSysVault;
  }


  public void setNonSysVault(String nonSysVault) {
    this.nonSysVault = nonSysVault;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysHashicorpVaultEngine(String nonSysHashicorpVaultEngine) {
    
    this.nonSysHashicorpVaultEngine = nonSysHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored (Single tenant only).
   * @return nonSysHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "kv", value = "Vault engine name where the credential is stored (Single tenant only).")

  public String getNonSysHashicorpVaultEngine() {
    return nonSysHashicorpVaultEngine;
  }


  public void setNonSysHashicorpVaultEngine(String nonSysHashicorpVaultEngine) {
    this.nonSysHashicorpVaultEngine = nonSysHashicorpVaultEngine;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysHashicorpVaultSecretPath(String nonSysHashicorpVaultSecretPath) {
    
    this.nonSysHashicorpVaultSecretPath = nonSysHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored (Single tenant only).
   * @return nonSysHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle-env", value = "Path in the vault engine where the credential is stored (Single tenant only).")

  public String getNonSysHashicorpVaultSecretPath() {
    return nonSysHashicorpVaultSecretPath;
  }


  public void setNonSysHashicorpVaultSecretPath(String nonSysHashicorpVaultSecretPath) {
    this.nonSysHashicorpVaultSecretPath = nonSysHashicorpVaultSecretPath;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysHashicorpVaultUsernameKey(String nonSysHashicorpVaultUsernameKey) {
    
    this.nonSysHashicorpVaultUsernameKey = nonSysHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Hashicorp vault key for the username in the key-value store (Single tenant only).
   * @return nonSysHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "Hashicorp vault key for the username in the key-value store (Single tenant only).")

  public String getNonSysHashicorpVaultUsernameKey() {
    return nonSysHashicorpVaultUsernameKey;
  }


  public void setNonSysHashicorpVaultUsernameKey(String nonSysHashicorpVaultUsernameKey) {
    this.nonSysHashicorpVaultUsernameKey = nonSysHashicorpVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysHashicorpVaultSecretKey(String nonSysHashicorpVaultSecretKey) {
    
    this.nonSysHashicorpVaultSecretKey = nonSysHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Hashicorp vault key for the password in the key-value store (Single tenant only).
   * @return nonSysHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "secret", value = "Hashicorp vault key for the password in the key-value store (Single tenant only).")

  public String getNonSysHashicorpVaultSecretKey() {
    return nonSysHashicorpVaultSecretKey;
  }


  public void setNonSysHashicorpVaultSecretKey(String nonSysHashicorpVaultSecretKey) {
    this.nonSysHashicorpVaultSecretKey = nonSysHashicorpVaultSecretKey;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysAzureVaultName(String nonSysAzureVaultName) {
    
    this.nonSysAzureVaultName = nonSysAzureVaultName;
    return this;
  }

   /**
   * Azure key vault name (Single tenant only).
   * @return nonSysAzureVaultName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "azure_vault", value = "Azure key vault name (Single tenant only).")

  public String getNonSysAzureVaultName() {
    return nonSysAzureVaultName;
  }


  public void setNonSysAzureVaultName(String nonSysAzureVaultName) {
    this.nonSysAzureVaultName = nonSysAzureVaultName;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysAzureVaultUsernameKey(String nonSysAzureVaultUsernameKey) {
    
    this.nonSysAzureVaultUsernameKey = nonSysAzureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store (Single tenant only).
   * @return nonSysAzureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "Azure vault key for the username in the key-value store (Single tenant only).")

  public String getNonSysAzureVaultUsernameKey() {
    return nonSysAzureVaultUsernameKey;
  }


  public void setNonSysAzureVaultUsernameKey(String nonSysAzureVaultUsernameKey) {
    this.nonSysAzureVaultUsernameKey = nonSysAzureVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysAzureVaultSecretKey(String nonSysAzureVaultSecretKey) {
    
    this.nonSysAzureVaultSecretKey = nonSysAzureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store (Single tenant only).
   * @return nonSysAzureVaultSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "secret", value = "Azure vault key for the password in the key-value store (Single tenant only).")

  public String getNonSysAzureVaultSecretKey() {
    return nonSysAzureVaultSecretKey;
  }


  public void setNonSysAzureVaultSecretKey(String nonSysAzureVaultSecretKey) {
    this.nonSysAzureVaultSecretKey = nonSysAzureVaultSecretKey;
  }


  public OracleDSourceLinkSourceParametersAllOf nonSysCyberarkVaultQueryString(String nonSysCyberarkVaultQueryString) {
    
    this.nonSysCyberarkVaultQueryString = nonSysCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault (Single tenant only).
   * @return nonSysCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Safe=Test;Folder=Test;Object=Test", value = "Query to find a credential in the CyberArk vault (Single tenant only).")

  public String getNonSysCyberarkVaultQueryString() {
    return nonSysCyberarkVaultQueryString;
  }


  public void setNonSysCyberarkVaultQueryString(String nonSysCyberarkVaultQueryString) {
    this.nonSysCyberarkVaultQueryString = nonSysCyberarkVaultQueryString;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackUsername(String fallbackUsername) {
    
    this.fallbackUsername = fallbackUsername;
    return this;
  }

   /**
   * The database fallback username. Optional if bequeath connections are enabled (to be used in case of bequeath connection failures). Only required for username-password auth.
   * @return fallbackUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle", value = "The database fallback username. Optional if bequeath connections are enabled (to be used in case of bequeath connection failures). Only required for username-password auth.")

  public String getFallbackUsername() {
    return fallbackUsername;
  }


  public void setFallbackUsername(String fallbackUsername) {
    this.fallbackUsername = fallbackUsername;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackPassword(String fallbackPassword) {
    
    this.fallbackPassword = fallbackPassword;
    return this;
  }

   /**
   * Password for fallback username.
   * @return fallbackPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle", value = "Password for fallback username.")

  public String getFallbackPassword() {
    return fallbackPassword;
  }


  public void setFallbackPassword(String fallbackPassword) {
    this.fallbackPassword = fallbackPassword;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackVault(String fallbackVault) {
    
    this.fallbackVault = fallbackVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the database credentials.
   * @return fallbackVault
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "my-vault", value = "The name or reference of the vault from which to read the database credentials.")

  public String getFallbackVault() {
    return fallbackVault;
  }


  public void setFallbackVault(String fallbackVault) {
    this.fallbackVault = fallbackVault;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackHashicorpVaultEngine(String fallbackHashicorpVaultEngine) {
    
    this.fallbackHashicorpVaultEngine = fallbackHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return fallbackHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "kv", value = "Vault engine name where the credential is stored.")

  public String getFallbackHashicorpVaultEngine() {
    return fallbackHashicorpVaultEngine;
  }


  public void setFallbackHashicorpVaultEngine(String fallbackHashicorpVaultEngine) {
    this.fallbackHashicorpVaultEngine = fallbackHashicorpVaultEngine;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackHashicorpVaultSecretPath(String fallbackHashicorpVaultSecretPath) {
    
    this.fallbackHashicorpVaultSecretPath = fallbackHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return fallbackHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "oracle-env", value = "Path in the vault engine where the credential is stored.")

  public String getFallbackHashicorpVaultSecretPath() {
    return fallbackHashicorpVaultSecretPath;
  }


  public void setFallbackHashicorpVaultSecretPath(String fallbackHashicorpVaultSecretPath) {
    this.fallbackHashicorpVaultSecretPath = fallbackHashicorpVaultSecretPath;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackHashicorpVaultUsernameKey(String fallbackHashicorpVaultUsernameKey) {
    
    this.fallbackHashicorpVaultUsernameKey = fallbackHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Hashicorp vault key for the username in the key-value store.
   * @return fallbackHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "Hashicorp vault key for the username in the key-value store.")

  public String getFallbackHashicorpVaultUsernameKey() {
    return fallbackHashicorpVaultUsernameKey;
  }


  public void setFallbackHashicorpVaultUsernameKey(String fallbackHashicorpVaultUsernameKey) {
    this.fallbackHashicorpVaultUsernameKey = fallbackHashicorpVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackHashicorpVaultSecretKey(String fallbackHashicorpVaultSecretKey) {
    
    this.fallbackHashicorpVaultSecretKey = fallbackHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Hashicorp vault key for the password in the key-value store.
   * @return fallbackHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "secret", value = "Hashicorp vault key for the password in the key-value store.")

  public String getFallbackHashicorpVaultSecretKey() {
    return fallbackHashicorpVaultSecretKey;
  }


  public void setFallbackHashicorpVaultSecretKey(String fallbackHashicorpVaultSecretKey) {
    this.fallbackHashicorpVaultSecretKey = fallbackHashicorpVaultSecretKey;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackAzureVaultName(String fallbackAzureVaultName) {
    
    this.fallbackAzureVaultName = fallbackAzureVaultName;
    return this;
  }

   /**
   * Azure key vault name.
   * @return fallbackAzureVaultName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "azure_vault", value = "Azure key vault name.")

  public String getFallbackAzureVaultName() {
    return fallbackAzureVaultName;
  }


  public void setFallbackAzureVaultName(String fallbackAzureVaultName) {
    this.fallbackAzureVaultName = fallbackAzureVaultName;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackAzureVaultUsernameKey(String fallbackAzureVaultUsernameKey) {
    
    this.fallbackAzureVaultUsernameKey = fallbackAzureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store.
   * @return fallbackAzureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "username", value = "Azure vault key for the username in the key-value store.")

  public String getFallbackAzureVaultUsernameKey() {
    return fallbackAzureVaultUsernameKey;
  }


  public void setFallbackAzureVaultUsernameKey(String fallbackAzureVaultUsernameKey) {
    this.fallbackAzureVaultUsernameKey = fallbackAzureVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackAzureVaultSecretKey(String fallbackAzureVaultSecretKey) {
    
    this.fallbackAzureVaultSecretKey = fallbackAzureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store.
   * @return fallbackAzureVaultSecretKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "secret", value = "Azure vault key for the password in the key-value store.")

  public String getFallbackAzureVaultSecretKey() {
    return fallbackAzureVaultSecretKey;
  }


  public void setFallbackAzureVaultSecretKey(String fallbackAzureVaultSecretKey) {
    this.fallbackAzureVaultSecretKey = fallbackAzureVaultSecretKey;
  }


  public OracleDSourceLinkSourceParametersAllOf fallbackCyberarkVaultQueryString(String fallbackCyberarkVaultQueryString) {
    
    this.fallbackCyberarkVaultQueryString = fallbackCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return fallbackCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Safe=Test;Folder=Test;Object=Test", value = "Query to find a credential in the CyberArk vault.")

  public String getFallbackCyberarkVaultQueryString() {
    return fallbackCyberarkVaultQueryString;
  }


  public void setFallbackCyberarkVaultQueryString(String fallbackCyberarkVaultQueryString) {
    this.fallbackCyberarkVaultQueryString = fallbackCyberarkVaultQueryString;
  }


  public OracleDSourceLinkSourceParametersAllOf opsPreLogSync(List<SourceOperation> opsPreLogSync) {
    
    this.opsPreLogSync = opsPreLogSync;
    return this;
  }

  public OracleDSourceLinkSourceParametersAllOf addOpsPreLogSyncItem(SourceOperation opsPreLogSyncItem) {
    if (this.opsPreLogSync == null) {
      this.opsPreLogSync = new ArrayList<SourceOperation>();
    }
    this.opsPreLogSync.add(opsPreLogSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource and before running the LogSync.
   * @return opsPreLogSync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Operations to perform after syncing a created dSource and before running the LogSync.")

  public List<SourceOperation> getOpsPreLogSync() {
    return opsPreLogSync;
  }


  public void setOpsPreLogSync(List<SourceOperation> opsPreLogSync) {
    this.opsPreLogSync = opsPreLogSync;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OracleDSourceLinkSourceParametersAllOf oracleDSourceLinkSourceParametersAllOf = (OracleDSourceLinkSourceParametersAllOf) o;
    return Objects.equals(this.environmentUserId, oracleDSourceLinkSourceParametersAllOf.environmentUserId) &&
        Objects.equals(this.backupLevelEnabled, oracleDSourceLinkSourceParametersAllOf.backupLevelEnabled) &&
        Objects.equals(this.rmanChannels, oracleDSourceLinkSourceParametersAllOf.rmanChannels) &&
        Objects.equals(this.filesPerSet, oracleDSourceLinkSourceParametersAllOf.filesPerSet) &&
        Objects.equals(this.checkLogical, oracleDSourceLinkSourceParametersAllOf.checkLogical) &&
        Objects.equals(this.encryptedLinkingEnabled, oracleDSourceLinkSourceParametersAllOf.encryptedLinkingEnabled) &&
        Objects.equals(this.compressedLinkingEnabled, oracleDSourceLinkSourceParametersAllOf.compressedLinkingEnabled) &&
        Objects.equals(this.bandwidthLimit, oracleDSourceLinkSourceParametersAllOf.bandwidthLimit) &&
        Objects.equals(this.numberOfConnections, oracleDSourceLinkSourceParametersAllOf.numberOfConnections) &&
        Objects.equals(this.diagnoseNoLoggingFaults, oracleDSourceLinkSourceParametersAllOf.diagnoseNoLoggingFaults) &&
        Objects.equals(this.preProvisioningEnabled, oracleDSourceLinkSourceParametersAllOf.preProvisioningEnabled) &&
        Objects.equals(this.linkNow, oracleDSourceLinkSourceParametersAllOf.linkNow) &&
        Objects.equals(this.forceFullBackup, oracleDSourceLinkSourceParametersAllOf.forceFullBackup) &&
        Objects.equals(this.doubleSync, oracleDSourceLinkSourceParametersAllOf.doubleSync) &&
        Objects.equals(this.skipSpaceCheck, oracleDSourceLinkSourceParametersAllOf.skipSpaceCheck) &&
        Objects.equals(this.doNotResume, oracleDSourceLinkSourceParametersAllOf.doNotResume) &&
        Objects.equals(this.filesForFullBackup, oracleDSourceLinkSourceParametersAllOf.filesForFullBackup) &&
        Objects.equals(this.logSyncMode, oracleDSourceLinkSourceParametersAllOf.logSyncMode) &&
        Objects.equals(this.logSyncInterval, oracleDSourceLinkSourceParametersAllOf.logSyncInterval) &&
        Objects.equals(this.nonSysUsername, oracleDSourceLinkSourceParametersAllOf.nonSysUsername) &&
        Objects.equals(this.nonSysPassword, oracleDSourceLinkSourceParametersAllOf.nonSysPassword) &&
        Objects.equals(this.nonSysVault, oracleDSourceLinkSourceParametersAllOf.nonSysVault) &&
        Objects.equals(this.nonSysHashicorpVaultEngine, oracleDSourceLinkSourceParametersAllOf.nonSysHashicorpVaultEngine) &&
        Objects.equals(this.nonSysHashicorpVaultSecretPath, oracleDSourceLinkSourceParametersAllOf.nonSysHashicorpVaultSecretPath) &&
        Objects.equals(this.nonSysHashicorpVaultUsernameKey, oracleDSourceLinkSourceParametersAllOf.nonSysHashicorpVaultUsernameKey) &&
        Objects.equals(this.nonSysHashicorpVaultSecretKey, oracleDSourceLinkSourceParametersAllOf.nonSysHashicorpVaultSecretKey) &&
        Objects.equals(this.nonSysAzureVaultName, oracleDSourceLinkSourceParametersAllOf.nonSysAzureVaultName) &&
        Objects.equals(this.nonSysAzureVaultUsernameKey, oracleDSourceLinkSourceParametersAllOf.nonSysAzureVaultUsernameKey) &&
        Objects.equals(this.nonSysAzureVaultSecretKey, oracleDSourceLinkSourceParametersAllOf.nonSysAzureVaultSecretKey) &&
        Objects.equals(this.nonSysCyberarkVaultQueryString, oracleDSourceLinkSourceParametersAllOf.nonSysCyberarkVaultQueryString) &&
        Objects.equals(this.fallbackUsername, oracleDSourceLinkSourceParametersAllOf.fallbackUsername) &&
        Objects.equals(this.fallbackPassword, oracleDSourceLinkSourceParametersAllOf.fallbackPassword) &&
        Objects.equals(this.fallbackVault, oracleDSourceLinkSourceParametersAllOf.fallbackVault) &&
        Objects.equals(this.fallbackHashicorpVaultEngine, oracleDSourceLinkSourceParametersAllOf.fallbackHashicorpVaultEngine) &&
        Objects.equals(this.fallbackHashicorpVaultSecretPath, oracleDSourceLinkSourceParametersAllOf.fallbackHashicorpVaultSecretPath) &&
        Objects.equals(this.fallbackHashicorpVaultUsernameKey, oracleDSourceLinkSourceParametersAllOf.fallbackHashicorpVaultUsernameKey) &&
        Objects.equals(this.fallbackHashicorpVaultSecretKey, oracleDSourceLinkSourceParametersAllOf.fallbackHashicorpVaultSecretKey) &&
        Objects.equals(this.fallbackAzureVaultName, oracleDSourceLinkSourceParametersAllOf.fallbackAzureVaultName) &&
        Objects.equals(this.fallbackAzureVaultUsernameKey, oracleDSourceLinkSourceParametersAllOf.fallbackAzureVaultUsernameKey) &&
        Objects.equals(this.fallbackAzureVaultSecretKey, oracleDSourceLinkSourceParametersAllOf.fallbackAzureVaultSecretKey) &&
        Objects.equals(this.fallbackCyberarkVaultQueryString, oracleDSourceLinkSourceParametersAllOf.fallbackCyberarkVaultQueryString) &&
        Objects.equals(this.opsPreLogSync, oracleDSourceLinkSourceParametersAllOf.opsPreLogSync);
  }

  @Override
  public int hashCode() {
    return Objects.hash(environmentUserId, backupLevelEnabled, rmanChannels, filesPerSet, checkLogical, encryptedLinkingEnabled, compressedLinkingEnabled, bandwidthLimit, numberOfConnections, diagnoseNoLoggingFaults, preProvisioningEnabled, linkNow, forceFullBackup, doubleSync, skipSpaceCheck, doNotResume, filesForFullBackup, logSyncMode, logSyncInterval, nonSysUsername, nonSysPassword, nonSysVault, nonSysHashicorpVaultEngine, nonSysHashicorpVaultSecretPath, nonSysHashicorpVaultUsernameKey, nonSysHashicorpVaultSecretKey, nonSysAzureVaultName, nonSysAzureVaultUsernameKey, nonSysAzureVaultSecretKey, nonSysCyberarkVaultQueryString, fallbackUsername, fallbackPassword, fallbackVault, fallbackHashicorpVaultEngine, fallbackHashicorpVaultSecretPath, fallbackHashicorpVaultUsernameKey, fallbackHashicorpVaultSecretKey, fallbackAzureVaultName, fallbackAzureVaultUsernameKey, fallbackAzureVaultSecretKey, fallbackCyberarkVaultQueryString, opsPreLogSync);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OracleDSourceLinkSourceParametersAllOf {\n");
    sb.append("    environmentUserId: ").append(toIndentedString(environmentUserId)).append("\n");
    sb.append("    backupLevelEnabled: ").append(toIndentedString(backupLevelEnabled)).append("\n");
    sb.append("    rmanChannels: ").append(toIndentedString(rmanChannels)).append("\n");
    sb.append("    filesPerSet: ").append(toIndentedString(filesPerSet)).append("\n");
    sb.append("    checkLogical: ").append(toIndentedString(checkLogical)).append("\n");
    sb.append("    encryptedLinkingEnabled: ").append(toIndentedString(encryptedLinkingEnabled)).append("\n");
    sb.append("    compressedLinkingEnabled: ").append(toIndentedString(compressedLinkingEnabled)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    numberOfConnections: ").append(toIndentedString(numberOfConnections)).append("\n");
    sb.append("    diagnoseNoLoggingFaults: ").append(toIndentedString(diagnoseNoLoggingFaults)).append("\n");
    sb.append("    preProvisioningEnabled: ").append(toIndentedString(preProvisioningEnabled)).append("\n");
    sb.append("    linkNow: ").append(toIndentedString(linkNow)).append("\n");
    sb.append("    forceFullBackup: ").append(toIndentedString(forceFullBackup)).append("\n");
    sb.append("    doubleSync: ").append(toIndentedString(doubleSync)).append("\n");
    sb.append("    skipSpaceCheck: ").append(toIndentedString(skipSpaceCheck)).append("\n");
    sb.append("    doNotResume: ").append(toIndentedString(doNotResume)).append("\n");
    sb.append("    filesForFullBackup: ").append(toIndentedString(filesForFullBackup)).append("\n");
    sb.append("    logSyncMode: ").append(toIndentedString(logSyncMode)).append("\n");
    sb.append("    logSyncInterval: ").append(toIndentedString(logSyncInterval)).append("\n");
    sb.append("    nonSysUsername: ").append(toIndentedString(nonSysUsername)).append("\n");
    sb.append("    nonSysPassword: ").append(toIndentedString(nonSysPassword)).append("\n");
    sb.append("    nonSysVault: ").append(toIndentedString(nonSysVault)).append("\n");
    sb.append("    nonSysHashicorpVaultEngine: ").append(toIndentedString(nonSysHashicorpVaultEngine)).append("\n");
    sb.append("    nonSysHashicorpVaultSecretPath: ").append(toIndentedString(nonSysHashicorpVaultSecretPath)).append("\n");
    sb.append("    nonSysHashicorpVaultUsernameKey: ").append(toIndentedString(nonSysHashicorpVaultUsernameKey)).append("\n");
    sb.append("    nonSysHashicorpVaultSecretKey: ").append(toIndentedString(nonSysHashicorpVaultSecretKey)).append("\n");
    sb.append("    nonSysAzureVaultName: ").append(toIndentedString(nonSysAzureVaultName)).append("\n");
    sb.append("    nonSysAzureVaultUsernameKey: ").append(toIndentedString(nonSysAzureVaultUsernameKey)).append("\n");
    sb.append("    nonSysAzureVaultSecretKey: ").append(toIndentedString(nonSysAzureVaultSecretKey)).append("\n");
    sb.append("    nonSysCyberarkVaultQueryString: ").append(toIndentedString(nonSysCyberarkVaultQueryString)).append("\n");
    sb.append("    fallbackUsername: ").append(toIndentedString(fallbackUsername)).append("\n");
    sb.append("    fallbackPassword: ").append(toIndentedString(fallbackPassword)).append("\n");
    sb.append("    fallbackVault: ").append(toIndentedString(fallbackVault)).append("\n");
    sb.append("    fallbackHashicorpVaultEngine: ").append(toIndentedString(fallbackHashicorpVaultEngine)).append("\n");
    sb.append("    fallbackHashicorpVaultSecretPath: ").append(toIndentedString(fallbackHashicorpVaultSecretPath)).append("\n");
    sb.append("    fallbackHashicorpVaultUsernameKey: ").append(toIndentedString(fallbackHashicorpVaultUsernameKey)).append("\n");
    sb.append("    fallbackHashicorpVaultSecretKey: ").append(toIndentedString(fallbackHashicorpVaultSecretKey)).append("\n");
    sb.append("    fallbackAzureVaultName: ").append(toIndentedString(fallbackAzureVaultName)).append("\n");
    sb.append("    fallbackAzureVaultUsernameKey: ").append(toIndentedString(fallbackAzureVaultUsernameKey)).append("\n");
    sb.append("    fallbackAzureVaultSecretKey: ").append(toIndentedString(fallbackAzureVaultSecretKey)).append("\n");
    sb.append("    fallbackCyberarkVaultQueryString: ").append(toIndentedString(fallbackCyberarkVaultQueryString)).append("\n");
    sb.append("    opsPreLogSync: ").append(toIndentedString(opsPreLogSync)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

