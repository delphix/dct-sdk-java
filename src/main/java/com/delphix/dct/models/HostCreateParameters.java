/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.OracleVirtualIP;
import com.delphix.dct.models.SSHVerificationStrategy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * HostCreateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T18:53:50.335381+05:30[Asia/Kolkata]")
public class HostCreateParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_NFS_ADDRESSES = "nfs_addresses";
  @SerializedName(SERIALIZED_NAME_NFS_ADDRESSES)
  private List<String> nfsAddresses = null;

  public static final String SERIALIZED_NAME_SSH_PORT = "ssh_port";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Integer sshPort = 22;

  public static final String SERIALIZED_NAME_PRIVILEGE_ELEVATION_PROFILE_REFERENCE = "privilege_elevation_profile_reference";
  @SerializedName(SERIALIZED_NAME_PRIVILEGE_ELEVATION_PROFILE_REFERENCE)
  private String privilegeElevationProfileReference;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_ALIAS = "dsp_keystore_alias";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_ALIAS)
  private String dspKeystoreAlias;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_PASSWORD = "dsp_keystore_password";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_PASSWORD)
  private String dspKeystorePassword;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_PATH = "dsp_keystore_path";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_PATH)
  private String dspKeystorePath;

  public static final String SERIALIZED_NAME_DSP_TRUSTSTORE_PASSWORD = "dsp_truststore_password";
  @SerializedName(SERIALIZED_NAME_DSP_TRUSTSTORE_PASSWORD)
  private String dspTruststorePassword;

  public static final String SERIALIZED_NAME_DSP_TRUSTSTORE_PATH = "dsp_truststore_path";
  @SerializedName(SERIALIZED_NAME_DSP_TRUSTSTORE_PATH)
  private String dspTruststorePath;

  public static final String SERIALIZED_NAME_JAVA_HOME = "java_home";
  @SerializedName(SERIALIZED_NAME_JAVA_HOME)
  private String javaHome;

  public static final String SERIALIZED_NAME_TOOLKIT_PATH = "toolkit_path";
  @SerializedName(SERIALIZED_NAME_TOOLKIT_PATH)
  private String toolkitPath;

  public static final String SERIALIZED_NAME_ORACLE_JDBC_KEYSTORE_PASSWORD = "oracle_jdbc_keystore_password";
  @SerializedName(SERIALIZED_NAME_ORACLE_JDBC_KEYSTORE_PASSWORD)
  private String oracleJdbcKeystorePassword;

  public static final String SERIALIZED_NAME_ORACLE_TDE_KEYSTORES_ROOT_PATH = "oracle_tde_keystores_root_path";
  @SerializedName(SERIALIZED_NAME_ORACLE_TDE_KEYSTORES_ROOT_PATH)
  private String oracleTdeKeystoresRootPath;

  public static final String SERIALIZED_NAME_SSH_VERIFICATION_STRATEGY = "ssh_verification_strategy";
  @SerializedName(SERIALIZED_NAME_SSH_VERIFICATION_STRATEGY)
  private SSHVerificationStrategy sshVerificationStrategy;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_VIRTUAL_IPS = "oracle_cluster_node_virtual_ips";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_VIRTUAL_IPS)
  private List<OracleVirtualIP> oracleClusterNodeVirtualIps = null;


  public HostCreateParameters name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name to associate with the host.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name to associate with the host.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public HostCreateParameters hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname or IP address of this host.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "db1.host.com", value = "The hostname or IP address of this host.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public HostCreateParameters nfsAddresses(List<String> nfsAddresses) {
    
    this.nfsAddresses = nfsAddresses;
    return this;
  }

  public HostCreateParameters addNfsAddressesItem(String nfsAddressesItem) {
    if (this.nfsAddresses == null) {
      this.nfsAddresses = new ArrayList<String>();
    }
    this.nfsAddresses.add(nfsAddressesItem);
    return this;
  }

   /**
   * The list of host/IP addresses to use for NFS export.
   * @return nfsAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"192.168.10.2\"]", value = "The list of host/IP addresses to use for NFS export.")

  public List<String> getNfsAddresses() {
    return nfsAddresses;
  }


  public void setNfsAddresses(List<String> nfsAddresses) {
    this.nfsAddresses = nfsAddresses;
  }


  public HostCreateParameters sshPort(Integer sshPort) {
    
    this.sshPort = sshPort;
    return this;
  }

   /**
   * The port number used to connect to the host via SSH.
   * @return sshPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "22", value = "The port number used to connect to the host via SSH.")

  public Integer getSshPort() {
    return sshPort;
  }


  public void setSshPort(Integer sshPort) {
    this.sshPort = sshPort;
  }


  public HostCreateParameters privilegeElevationProfileReference(String privilegeElevationProfileReference) {
    
    this.privilegeElevationProfileReference = privilegeElevationProfileReference;
    return this;
  }

   /**
   * Reference to a profile for escalating user privileges.
   * @return privilegeElevationProfileReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Reference to a profile for escalating user privileges.")

  public String getPrivilegeElevationProfileReference() {
    return privilegeElevationProfileReference;
  }


  public void setPrivilegeElevationProfileReference(String privilegeElevationProfileReference) {
    this.privilegeElevationProfileReference = privilegeElevationProfileReference;
  }


  public HostCreateParameters dspKeystoreAlias(String dspKeystoreAlias) {
    
    this.dspKeystoreAlias = dspKeystoreAlias;
    return this;
  }

   /**
   * The lowercase alias to use inside the user managed DSP keystore.
   * @return dspKeystoreAlias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The lowercase alias to use inside the user managed DSP keystore.")

  public String getDspKeystoreAlias() {
    return dspKeystoreAlias;
  }


  public void setDspKeystoreAlias(String dspKeystoreAlias) {
    this.dspKeystoreAlias = dspKeystoreAlias;
  }


  public HostCreateParameters dspKeystorePassword(String dspKeystorePassword) {
    
    this.dspKeystorePassword = dspKeystorePassword;
    return this;
  }

   /**
   * The password for the user managed DSP keystore.
   * @return dspKeystorePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password for the user managed DSP keystore.")

  public String getDspKeystorePassword() {
    return dspKeystorePassword;
  }


  public void setDspKeystorePassword(String dspKeystorePassword) {
    this.dspKeystorePassword = dspKeystorePassword;
  }


  public HostCreateParameters dspKeystorePath(String dspKeystorePath) {
    
    this.dspKeystorePath = dspKeystorePath;
    return this;
  }

   /**
   * The path to the user managed DSP keystore.
   * @return dspKeystorePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the user managed DSP keystore.")

  public String getDspKeystorePath() {
    return dspKeystorePath;
  }


  public void setDspKeystorePath(String dspKeystorePath) {
    this.dspKeystorePath = dspKeystorePath;
  }


  public HostCreateParameters dspTruststorePassword(String dspTruststorePassword) {
    
    this.dspTruststorePassword = dspTruststorePassword;
    return this;
  }

   /**
   * The password for the user managed DSP truststore.
   * @return dspTruststorePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password for the user managed DSP truststore.")

  public String getDspTruststorePassword() {
    return dspTruststorePassword;
  }


  public void setDspTruststorePassword(String dspTruststorePassword) {
    this.dspTruststorePassword = dspTruststorePassword;
  }


  public HostCreateParameters dspTruststorePath(String dspTruststorePath) {
    
    this.dspTruststorePath = dspTruststorePath;
    return this;
  }

   /**
   * The path to the user managed DSP truststore.
   * @return dspTruststorePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the user managed DSP truststore.")

  public String getDspTruststorePath() {
    return dspTruststorePath;
  }


  public void setDspTruststorePath(String dspTruststorePath) {
    this.dspTruststorePath = dspTruststorePath;
  }


  public HostCreateParameters javaHome(String javaHome) {
    
    this.javaHome = javaHome;
    return this;
  }

   /**
   * The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used.
   * @return javaHome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used.")

  public String getJavaHome() {
    return javaHome;
  }


  public void setJavaHome(String javaHome) {
    this.javaHome = javaHome;
  }


  public HostCreateParameters toolkitPath(String toolkitPath) {
    
    this.toolkitPath = toolkitPath;
    return this;
  }

   /**
   * The path for the toolkit that resides on the host.
   * @return toolkitPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path for the toolkit that resides on the host.")

  public String getToolkitPath() {
    return toolkitPath;
  }


  public void setToolkitPath(String toolkitPath) {
    this.toolkitPath = toolkitPath;
  }


  public HostCreateParameters oracleJdbcKeystorePassword(String oracleJdbcKeystorePassword) {
    
    this.oracleJdbcKeystorePassword = oracleJdbcKeystorePassword;
    return this;
  }

   /**
   * The password for the user managed Oracle JDBC keystore.
   * @return oracleJdbcKeystorePassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The password for the user managed Oracle JDBC keystore.")

  public String getOracleJdbcKeystorePassword() {
    return oracleJdbcKeystorePassword;
  }


  public void setOracleJdbcKeystorePassword(String oracleJdbcKeystorePassword) {
    this.oracleJdbcKeystorePassword = oracleJdbcKeystorePassword;
  }


  public HostCreateParameters oracleTdeKeystoresRootPath(String oracleTdeKeystoresRootPath) {
    
    this.oracleTdeKeystoresRootPath = oracleTdeKeystoresRootPath;
    return this;
  }

   /**
   * The path to the root of the Oracle TDE keystores artifact directories.
   * @return oracleTdeKeystoresRootPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the root of the Oracle TDE keystores artifact directories.")

  public String getOracleTdeKeystoresRootPath() {
    return oracleTdeKeystoresRootPath;
  }


  public void setOracleTdeKeystoresRootPath(String oracleTdeKeystoresRootPath) {
    this.oracleTdeKeystoresRootPath = oracleTdeKeystoresRootPath;
  }


  public HostCreateParameters sshVerificationStrategy(SSHVerificationStrategy sshVerificationStrategy) {
    
    this.sshVerificationStrategy = sshVerificationStrategy;
    return this;
  }

   /**
   * Get sshVerificationStrategy
   * @return sshVerificationStrategy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SSHVerificationStrategy getSshVerificationStrategy() {
    return sshVerificationStrategy;
  }


  public void setSshVerificationStrategy(SSHVerificationStrategy sshVerificationStrategy) {
    this.sshVerificationStrategy = sshVerificationStrategy;
  }


  public HostCreateParameters oracleClusterNodeVirtualIps(List<OracleVirtualIP> oracleClusterNodeVirtualIps) {
    
    this.oracleClusterNodeVirtualIps = oracleClusterNodeVirtualIps;
    return this;
  }

  public HostCreateParameters addOracleClusterNodeVirtualIpsItem(OracleVirtualIP oracleClusterNodeVirtualIpsItem) {
    if (this.oracleClusterNodeVirtualIps == null) {
      this.oracleClusterNodeVirtualIps = new ArrayList<OracleVirtualIP>();
    }
    this.oracleClusterNodeVirtualIps.add(oracleClusterNodeVirtualIpsItem);
    return this;
  }

   /**
   * The Virtual IP addresses associated with the OracleClusterNode.
   * @return oracleClusterNodeVirtualIps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Virtual IP addresses associated with the OracleClusterNode.")

  public List<OracleVirtualIP> getOracleClusterNodeVirtualIps() {
    return oracleClusterNodeVirtualIps;
  }


  public void setOracleClusterNodeVirtualIps(List<OracleVirtualIP> oracleClusterNodeVirtualIps) {
    this.oracleClusterNodeVirtualIps = oracleClusterNodeVirtualIps;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostCreateParameters hostCreateParameters = (HostCreateParameters) o;
    return Objects.equals(this.name, hostCreateParameters.name) &&
        Objects.equals(this.hostname, hostCreateParameters.hostname) &&
        Objects.equals(this.nfsAddresses, hostCreateParameters.nfsAddresses) &&
        Objects.equals(this.sshPort, hostCreateParameters.sshPort) &&
        Objects.equals(this.privilegeElevationProfileReference, hostCreateParameters.privilegeElevationProfileReference) &&
        Objects.equals(this.dspKeystoreAlias, hostCreateParameters.dspKeystoreAlias) &&
        Objects.equals(this.dspKeystorePassword, hostCreateParameters.dspKeystorePassword) &&
        Objects.equals(this.dspKeystorePath, hostCreateParameters.dspKeystorePath) &&
        Objects.equals(this.dspTruststorePassword, hostCreateParameters.dspTruststorePassword) &&
        Objects.equals(this.dspTruststorePath, hostCreateParameters.dspTruststorePath) &&
        Objects.equals(this.javaHome, hostCreateParameters.javaHome) &&
        Objects.equals(this.toolkitPath, hostCreateParameters.toolkitPath) &&
        Objects.equals(this.oracleJdbcKeystorePassword, hostCreateParameters.oracleJdbcKeystorePassword) &&
        Objects.equals(this.oracleTdeKeystoresRootPath, hostCreateParameters.oracleTdeKeystoresRootPath) &&
        Objects.equals(this.sshVerificationStrategy, hostCreateParameters.sshVerificationStrategy) &&
        Objects.equals(this.oracleClusterNodeVirtualIps, hostCreateParameters.oracleClusterNodeVirtualIps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, hostname, nfsAddresses, sshPort, privilegeElevationProfileReference, dspKeystoreAlias, dspKeystorePassword, dspKeystorePath, dspTruststorePassword, dspTruststorePath, javaHome, toolkitPath, oracleJdbcKeystorePassword, oracleTdeKeystoresRootPath, sshVerificationStrategy, oracleClusterNodeVirtualIps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostCreateParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    nfsAddresses: ").append(toIndentedString(nfsAddresses)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    privilegeElevationProfileReference: ").append(toIndentedString(privilegeElevationProfileReference)).append("\n");
    sb.append("    dspKeystoreAlias: ").append(toIndentedString(dspKeystoreAlias)).append("\n");
    sb.append("    dspKeystorePassword: ").append(toIndentedString(dspKeystorePassword)).append("\n");
    sb.append("    dspKeystorePath: ").append(toIndentedString(dspKeystorePath)).append("\n");
    sb.append("    dspTruststorePassword: ").append(toIndentedString(dspTruststorePassword)).append("\n");
    sb.append("    dspTruststorePath: ").append(toIndentedString(dspTruststorePath)).append("\n");
    sb.append("    javaHome: ").append(toIndentedString(javaHome)).append("\n");
    sb.append("    toolkitPath: ").append(toIndentedString(toolkitPath)).append("\n");
    sb.append("    oracleJdbcKeystorePassword: ").append(toIndentedString(oracleJdbcKeystorePassword)).append("\n");
    sb.append("    oracleTdeKeystoresRootPath: ").append(toIndentedString(oracleTdeKeystoresRootPath)).append("\n");
    sb.append("    sshVerificationStrategy: ").append(toIndentedString(sshVerificationStrategy)).append("\n");
    sb.append("    oracleClusterNodeVirtualIps: ").append(toIndentedString(oracleClusterNodeVirtualIps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

