/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Configuration required to connect and authenticate with an Hashicorp Vault which stores engines username and passwords.
 */
@ApiModel(description = "Configuration required to connect and authenticate with an Hashicorp Vault which stores engines username and passwords.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class HashicorpVault {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_ENV_VARIABLES = "env_variables";
  @SerializedName(SERIALIZED_NAME_ENV_VARIABLES)
  private Map<String, String> envVariables = null;

  public static final String SERIALIZED_NAME_LOGIN_COMMAND_ARGS = "login_command_args";
  @SerializedName(SERIALIZED_NAME_LOGIN_COMMAND_ARGS)
  private List<String> loginCommandArgs = null;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = null;


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }




  public HashicorpVault envVariables(Map<String, String> envVariables) {
    
    this.envVariables = envVariables;
    return this;
  }

  public HashicorpVault putEnvVariablesItem(String key, String envVariablesItem) {
    if (this.envVariables == null) {
      this.envVariables = new HashMap<String, String>();
    }
    this.envVariables.put(key, envVariablesItem);
    return this;
  }

   /**
   * Environment variables to set when invoking the Vault CLI tool. The environment variables will be used both to login to the vault (if this step is required) and to retrieve engine username and passwords. 
   * @return envVariables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"VAULT_ADDR\":\"https://vault.company.co:8200\",\"VAULT_TOKEN\":\"token-to-retrieve-secrets\"}", value = "Environment variables to set when invoking the Vault CLI tool. The environment variables will be used both to login to the vault (if this step is required) and to retrieve engine username and passwords. ")

  public Map<String, String> getEnvVariables() {
    return envVariables;
  }


  public void setEnvVariables(Map<String, String> envVariables) {
    this.envVariables = envVariables;
  }


  public HashicorpVault loginCommandArgs(List<String> loginCommandArgs) {
    
    this.loginCommandArgs = loginCommandArgs;
    return this;
  }

  public HashicorpVault addLoginCommandArgsItem(String loginCommandArgsItem) {
    if (this.loginCommandArgs == null) {
      this.loginCommandArgs = new ArrayList<String>();
    }
    this.loginCommandArgs.add(loginCommandArgsItem);
    return this;
  }

   /**
   * Arguments to the \&quot;vault\&quot; CLI tool to be used to fetch a client token (or \&quot;login\&quot;). If supporting files, such as TLS certificates, must be used to authenticate, they can be mounted to the /etc/config directory. This property must not be set when using the TOKEN authentication method as login is not required. 
   * @return loginCommandArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"login\",\"-method=cert\",\"-client-cert=/etc/config/cert.pem\",\"-client-key=/etc/config/key.pem\",\"write\",\"auth/approle/login\",\"role_id=123\",\"secret_id=456\"]", value = "Arguments to the \"vault\" CLI tool to be used to fetch a client token (or \"login\"). If supporting files, such as TLS certificates, must be used to authenticate, they can be mounted to the /etc/config directory. This property must not be set when using the TOKEN authentication method as login is not required. ")

  public List<String> getLoginCommandArgs() {
    return loginCommandArgs;
  }


  public void setLoginCommandArgs(List<String> loginCommandArgs) {
    this.loginCommandArgs = loginCommandArgs;
  }


  public HashicorpVault tags(List<Tag> tags) {
    
    this.tags = tags;
    return this;
  }

  public HashicorpVault addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Tag> getTags() {
    return tags;
  }


  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HashicorpVault hashicorpVault = (HashicorpVault) o;
    return Objects.equals(this.id, hashicorpVault.id) &&
        Objects.equals(this.envVariables, hashicorpVault.envVariables) &&
        Objects.equals(this.loginCommandArgs, hashicorpVault.loginCommandArgs) &&
        Objects.equals(this.tags, hashicorpVault.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, envVariables, loginCommandArgs, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HashicorpVault {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    envVariables: ").append(toIndentedString(envVariables)).append("\n");
    sb.append("    loginCommandArgs: ").append(toIndentedString(loginCommandArgs)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

