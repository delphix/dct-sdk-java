/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Parameters to validate java path for the remote host.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ValidateJavaParameters {
  public static final String SERIALIZED_NAME_JAVA_HOME = "java_home";
  @SerializedName(SERIALIZED_NAME_JAVA_HOME)
  private String javaHome;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_HOST_NAME = "host_name";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY = "use_engine_public_key";
  @SerializedName(SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY)
  private Boolean useEnginePublicKey;

  public static final String SERIALIZED_NAME_VAULT_ID = "vault_id";
  @SerializedName(SERIALIZED_NAME_VAULT_ID)
  private String vaultId;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_ENGINE = "hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_ENGINE)
  private String hashicorpVaultEngine;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_SECRET_PATH = "hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_SECRET_PATH)
  private String hashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_KEY = "hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_KEY)
  private String hashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_SECRET_KEY = "hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_SECRET_KEY)
  private String hashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_AZURE_VAULT_NAME = "azure_vault_name";
  @SerializedName(SERIALIZED_NAME_AZURE_VAULT_NAME)
  private String azureVaultName;

  public static final String SERIALIZED_NAME_AZURE_VAULT_USERNAME_KEY = "azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_AZURE_VAULT_USERNAME_KEY)
  private String azureVaultUsernameKey;

  public static final String SERIALIZED_NAME_AZURE_VAULT_SECRET_KEY = "azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_AZURE_VAULT_SECRET_KEY)
  private String azureVaultSecretKey;

  public static final String SERIALIZED_NAME_CYBERARK_VAULT_QUERY_STRING = "cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_CYBERARK_VAULT_QUERY_STRING)
  private String cyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_USE_KERBEROS_AUTHENTICATION = "use_kerberos_authentication";
  @SerializedName(SERIALIZED_NAME_USE_KERBEROS_AUTHENTICATION)
  private Boolean useKerberosAuthentication;

  public ValidateJavaParameters() {
  }

  public ValidateJavaParameters javaHome(String javaHome) {
    this.javaHome = javaHome;
    return this;
  }

   /**
   * Path pointing to java home on the remote machine.
   * @return javaHome
  **/
  @javax.annotation.Nonnull
  public String getJavaHome() {
    return javaHome;
  }

  public void setJavaHome(String javaHome) {
    this.javaHome = javaHome;
  }


  public ValidateJavaParameters port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * SSH port of the remote host machine that will be used to establish SSH connection.
   * minimum: 0
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ValidateJavaParameters username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username of the user that will be used to connect to the remote host machine.
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public ValidateJavaParameters password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password of the user that will be used to connect to the remote host machine.
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ValidateJavaParameters hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

   /**
   * Hostname of the remote host machine that will be used to establish connection.
   * @return hostName
  **/
  @javax.annotation.Nonnull
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public ValidateJavaParameters useEnginePublicKey(Boolean useEnginePublicKey) {
    this.useEnginePublicKey = useEnginePublicKey;
    return this;
  }

   /**
   * Whether to use public key authentication.
   * @return useEnginePublicKey
  **/
  @javax.annotation.Nullable
  public Boolean getUseEnginePublicKey() {
    return useEnginePublicKey;
  }

  public void setUseEnginePublicKey(Boolean useEnginePublicKey) {
    this.useEnginePublicKey = useEnginePublicKey;
  }


  public ValidateJavaParameters vaultId(String vaultId) {
    this.vaultId = vaultId;
    return this;
  }

   /**
   * The DCT id or name of the vault from which to read the host credentials.
   * @return vaultId
  **/
  @javax.annotation.Nullable
  public String getVaultId() {
    return vaultId;
  }

  public void setVaultId(String vaultId) {
    this.vaultId = vaultId;
  }


  public ValidateJavaParameters hashicorpVaultEngine(String hashicorpVaultEngine) {
    this.hashicorpVaultEngine = hashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return hashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultEngine() {
    return hashicorpVaultEngine;
  }

  public void setHashicorpVaultEngine(String hashicorpVaultEngine) {
    this.hashicorpVaultEngine = hashicorpVaultEngine;
  }


  public ValidateJavaParameters hashicorpVaultSecretPath(String hashicorpVaultSecretPath) {
    this.hashicorpVaultSecretPath = hashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return hashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultSecretPath() {
    return hashicorpVaultSecretPath;
  }

  public void setHashicorpVaultSecretPath(String hashicorpVaultSecretPath) {
    this.hashicorpVaultSecretPath = hashicorpVaultSecretPath;
  }


  public ValidateJavaParameters hashicorpVaultUsernameKey(String hashicorpVaultUsernameKey) {
    this.hashicorpVaultUsernameKey = hashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Key for the username in the key-value store.
   * @return hashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultUsernameKey() {
    return hashicorpVaultUsernameKey;
  }

  public void setHashicorpVaultUsernameKey(String hashicorpVaultUsernameKey) {
    this.hashicorpVaultUsernameKey = hashicorpVaultUsernameKey;
  }


  public ValidateJavaParameters hashicorpVaultSecretKey(String hashicorpVaultSecretKey) {
    this.hashicorpVaultSecretKey = hashicorpVaultSecretKey;
    return this;
  }

   /**
   * Key for the password in the key-value store.
   * @return hashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultSecretKey() {
    return hashicorpVaultSecretKey;
  }

  public void setHashicorpVaultSecretKey(String hashicorpVaultSecretKey) {
    this.hashicorpVaultSecretKey = hashicorpVaultSecretKey;
  }


  public ValidateJavaParameters azureVaultName(String azureVaultName) {
    this.azureVaultName = azureVaultName;
    return this;
  }

   /**
   * Azure key vault name (ORACLE, ASE and MSSQL_DOMAIN_USER only).
   * @return azureVaultName
  **/
  @javax.annotation.Nullable
  public String getAzureVaultName() {
    return azureVaultName;
  }

  public void setAzureVaultName(String azureVaultName) {
    this.azureVaultName = azureVaultName;
  }


  public ValidateJavaParameters azureVaultUsernameKey(String azureVaultUsernameKey) {
    this.azureVaultUsernameKey = azureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
   * @return azureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getAzureVaultUsernameKey() {
    return azureVaultUsernameKey;
  }

  public void setAzureVaultUsernameKey(String azureVaultUsernameKey) {
    this.azureVaultUsernameKey = azureVaultUsernameKey;
  }


  public ValidateJavaParameters azureVaultSecretKey(String azureVaultSecretKey) {
    this.azureVaultSecretKey = azureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store (ORACLE, ASE and MSSQL_DOMAIN_USER only).
   * @return azureVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getAzureVaultSecretKey() {
    return azureVaultSecretKey;
  }

  public void setAzureVaultSecretKey(String azureVaultSecretKey) {
    this.azureVaultSecretKey = azureVaultSecretKey;
  }


  public ValidateJavaParameters cyberarkVaultQueryString(String cyberarkVaultQueryString) {
    this.cyberarkVaultQueryString = cyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return cyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getCyberarkVaultQueryString() {
    return cyberarkVaultQueryString;
  }

  public void setCyberarkVaultQueryString(String cyberarkVaultQueryString) {
    this.cyberarkVaultQueryString = cyberarkVaultQueryString;
  }


  public ValidateJavaParameters useKerberosAuthentication(Boolean useKerberosAuthentication) {
    this.useKerberosAuthentication = useKerberosAuthentication;
    return this;
  }

   /**
   * Whether to use kerberos authentication.
   * @return useKerberosAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getUseKerberosAuthentication() {
    return useKerberosAuthentication;
  }

  public void setUseKerberosAuthentication(Boolean useKerberosAuthentication) {
    this.useKerberosAuthentication = useKerberosAuthentication;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateJavaParameters validateJavaParameters = (ValidateJavaParameters) o;
    return Objects.equals(this.javaHome, validateJavaParameters.javaHome) &&
        Objects.equals(this.port, validateJavaParameters.port) &&
        Objects.equals(this.username, validateJavaParameters.username) &&
        Objects.equals(this.password, validateJavaParameters.password) &&
        Objects.equals(this.hostName, validateJavaParameters.hostName) &&
        Objects.equals(this.useEnginePublicKey, validateJavaParameters.useEnginePublicKey) &&
        Objects.equals(this.vaultId, validateJavaParameters.vaultId) &&
        Objects.equals(this.hashicorpVaultEngine, validateJavaParameters.hashicorpVaultEngine) &&
        Objects.equals(this.hashicorpVaultSecretPath, validateJavaParameters.hashicorpVaultSecretPath) &&
        Objects.equals(this.hashicorpVaultUsernameKey, validateJavaParameters.hashicorpVaultUsernameKey) &&
        Objects.equals(this.hashicorpVaultSecretKey, validateJavaParameters.hashicorpVaultSecretKey) &&
        Objects.equals(this.azureVaultName, validateJavaParameters.azureVaultName) &&
        Objects.equals(this.azureVaultUsernameKey, validateJavaParameters.azureVaultUsernameKey) &&
        Objects.equals(this.azureVaultSecretKey, validateJavaParameters.azureVaultSecretKey) &&
        Objects.equals(this.cyberarkVaultQueryString, validateJavaParameters.cyberarkVaultQueryString) &&
        Objects.equals(this.useKerberosAuthentication, validateJavaParameters.useKerberosAuthentication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(javaHome, port, username, password, hostName, useEnginePublicKey, vaultId, hashicorpVaultEngine, hashicorpVaultSecretPath, hashicorpVaultUsernameKey, hashicorpVaultSecretKey, azureVaultName, azureVaultUsernameKey, azureVaultSecretKey, cyberarkVaultQueryString, useKerberosAuthentication);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateJavaParameters {\n");
    sb.append("    javaHome: ").append(toIndentedString(javaHome)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    useEnginePublicKey: ").append(toIndentedString(useEnginePublicKey)).append("\n");
    sb.append("    vaultId: ").append(toIndentedString(vaultId)).append("\n");
    sb.append("    hashicorpVaultEngine: ").append(toIndentedString(hashicorpVaultEngine)).append("\n");
    sb.append("    hashicorpVaultSecretPath: ").append(toIndentedString(hashicorpVaultSecretPath)).append("\n");
    sb.append("    hashicorpVaultUsernameKey: ").append(toIndentedString(hashicorpVaultUsernameKey)).append("\n");
    sb.append("    hashicorpVaultSecretKey: ").append(toIndentedString(hashicorpVaultSecretKey)).append("\n");
    sb.append("    azureVaultName: ").append(toIndentedString(azureVaultName)).append("\n");
    sb.append("    azureVaultUsernameKey: ").append(toIndentedString(azureVaultUsernameKey)).append("\n");
    sb.append("    azureVaultSecretKey: ").append(toIndentedString(azureVaultSecretKey)).append("\n");
    sb.append("    cyberarkVaultQueryString: ").append(toIndentedString(cyberarkVaultQueryString)).append("\n");
    sb.append("    useKerberosAuthentication: ").append(toIndentedString(useKerberosAuthentication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("java_home");
    openapiFields.add("port");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("host_name");
    openapiFields.add("use_engine_public_key");
    openapiFields.add("vault_id");
    openapiFields.add("hashicorp_vault_engine");
    openapiFields.add("hashicorp_vault_secret_path");
    openapiFields.add("hashicorp_vault_username_key");
    openapiFields.add("hashicorp_vault_secret_key");
    openapiFields.add("azure_vault_name");
    openapiFields.add("azure_vault_username_key");
    openapiFields.add("azure_vault_secret_key");
    openapiFields.add("cyberark_vault_query_string");
    openapiFields.add("use_kerberos_authentication");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("java_home");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("host_name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ValidateJavaParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateJavaParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateJavaParameters is not found in the empty JSON string", ValidateJavaParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateJavaParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateJavaParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidateJavaParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("java_home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `java_home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("java_home").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("host_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_name").toString()));
      }
      if ((jsonObj.get("vault_id") != null && !jsonObj.get("vault_id").isJsonNull()) && !jsonObj.get("vault_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault_id").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_engine") != null && !jsonObj.get("hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_secret_path") != null && !jsonObj.get("hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_username_key") != null && !jsonObj.get("hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_secret_key") != null && !jsonObj.get("hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("azure_vault_name") != null && !jsonObj.get("azure_vault_name").isJsonNull()) && !jsonObj.get("azure_vault_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_vault_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_vault_name").toString()));
      }
      if ((jsonObj.get("azure_vault_username_key") != null && !jsonObj.get("azure_vault_username_key").isJsonNull()) && !jsonObj.get("azure_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_vault_username_key").toString()));
      }
      if ((jsonObj.get("azure_vault_secret_key") != null && !jsonObj.get("azure_vault_secret_key").isJsonNull()) && !jsonObj.get("azure_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_vault_secret_key").toString()));
      }
      if ((jsonObj.get("cyberark_vault_query_string") != null && !jsonObj.get("cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cyberark_vault_query_string").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateJavaParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateJavaParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateJavaParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateJavaParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateJavaParameters>() {
           @Override
           public void write(JsonWriter out, ValidateJavaParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateJavaParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValidateJavaParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValidateJavaParameters
  * @throws IOException if the JSON string is invalid with respect to ValidateJavaParameters
  */
  public static ValidateJavaParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateJavaParameters.class);
  }

 /**
  * Convert an instance of ValidateJavaParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

