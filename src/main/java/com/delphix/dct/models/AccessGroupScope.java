/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.delphix.dct.models.AlwaysAllowedPermission;
import com.delphix.dct.models.ScopeTag;
import com.delphix.dct.models.ScopedObjectItem;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * An Access group scope allows a role to be granted to accounts in the Access group.
 */
@ApiModel(description = "An Access group scope allows a role to be granted to accounts in the Access group.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class AccessGroupScope {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_ID = "role_id";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private String roleId;

  /**
   * Specifies the type of the scope. Scope of type SIMPLE would grant access to all DCT objects. Scope of type SCOPED would grant access to all objects based on objects and object-tags and permissions defined in linked role. Scope of type ADVANCED would grant access to DCT objects based on objects and object-tags and the individual permissions.
   */
  @JsonAdapter(ScopeTypeEnum.Adapter.class)
  public enum ScopeTypeEnum {
    SIMPLE("SIMPLE"),
    
    SCOPED("SCOPED"),
    
    ADVANCED("ADVANCED");

    private String value;

    ScopeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeTypeEnum fromValue(String value) {
      for (ScopeTypeEnum b : ScopeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPE_TYPE = "scope_type";
  @SerializedName(SERIALIZED_NAME_SCOPE_TYPE)
  private ScopeTypeEnum scopeType;

  public static final String SERIALIZED_NAME_OBJECT_TAGS = "object_tags";
  @SerializedName(SERIALIZED_NAME_OBJECT_TAGS)
  private List<ScopeTag> objectTags = null;

  public static final String SERIALIZED_NAME_OBJECTS = "objects";
  @SerializedName(SERIALIZED_NAME_OBJECTS)
  private List<ScopedObjectItem> objects = null;

  public static final String SERIALIZED_NAME_ALWAYS_ALLOWED_PERMISSIONS = "always_allowed_permissions";
  @SerializedName(SERIALIZED_NAME_ALWAYS_ALLOWED_PERMISSIONS)
  private List<AlwaysAllowedPermission> alwaysAllowedPermissions = null;


   /**
   * The Access group scope ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Access group scope ID.")

  public String getId() {
    return id;
  }




  public AccessGroupScope name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The Access group scope name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Access group scope name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AccessGroupScope roleId(String roleId) {
    
    this.roleId = roleId;
    return this;
  }

   /**
   * The Access group role id.
   * @return roleId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Access group role id.")

  public String getRoleId() {
    return roleId;
  }


  public void setRoleId(String roleId) {
    this.roleId = roleId;
  }


  public AccessGroupScope scopeType(ScopeTypeEnum scopeType) {
    
    this.scopeType = scopeType;
    return this;
  }

   /**
   * Specifies the type of the scope. Scope of type SIMPLE would grant access to all DCT objects. Scope of type SCOPED would grant access to all objects based on objects and object-tags and permissions defined in linked role. Scope of type ADVANCED would grant access to DCT objects based on objects and object-tags and the individual permissions.
   * @return scopeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SCOPED", value = "Specifies the type of the scope. Scope of type SIMPLE would grant access to all DCT objects. Scope of type SCOPED would grant access to all objects based on objects and object-tags and permissions defined in linked role. Scope of type ADVANCED would grant access to DCT objects based on objects and object-tags and the individual permissions.")

  public ScopeTypeEnum getScopeType() {
    return scopeType;
  }


  public void setScopeType(ScopeTypeEnum scopeType) {
    this.scopeType = scopeType;
  }


  public AccessGroupScope objectTags(List<ScopeTag> objectTags) {
    
    this.objectTags = objectTags;
    return this;
  }

  public AccessGroupScope addObjectTagsItem(ScopeTag objectTagsItem) {
    if (this.objectTags == null) {
      this.objectTags = new ArrayList<ScopeTag>();
    }
    this.objectTags.add(objectTagsItem);
    return this;
  }

   /**
   * The permissions in this access group scope will be granted to all DCT objects tagged with tags matching this property. This is cumulative with objects defined in the &#39;objects&#39; property, and mutually exclusive with scope_type &#39;SIMPLE&#39;.
   * @return objectTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The permissions in this access group scope will be granted to all DCT objects tagged with tags matching this property. This is cumulative with objects defined in the 'objects' property, and mutually exclusive with scope_type 'SIMPLE'.")

  public List<ScopeTag> getObjectTags() {
    return objectTags;
  }


  public void setObjectTags(List<ScopeTag> objectTags) {
    this.objectTags = objectTags;
  }


  public AccessGroupScope objects(List<ScopedObjectItem> objects) {
    
    this.objects = objects;
    return this;
  }

  public AccessGroupScope addObjectsItem(ScopedObjectItem objectsItem) {
    if (this.objects == null) {
      this.objects = new ArrayList<ScopedObjectItem>();
    }
    this.objects.add(objectsItem);
    return this;
  }

   /**
   * The permissions in this access group scope will be granted to all DCT objects with matching object id and object type, mutually exclusive with  scope_type &#39;SIMPLE&#39;.
   * @return objects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The permissions in this access group scope will be granted to all DCT objects with matching object id and object type, mutually exclusive with  scope_type 'SIMPLE'.")

  public List<ScopedObjectItem> getObjects() {
    return objects;
  }


  public void setObjects(List<ScopedObjectItem> objects) {
    this.objects = objects;
  }


  public AccessGroupScope alwaysAllowedPermissions(List<AlwaysAllowedPermission> alwaysAllowedPermissions) {
    
    this.alwaysAllowedPermissions = alwaysAllowedPermissions;
    return this;
  }

  public AccessGroupScope addAlwaysAllowedPermissionsItem(AlwaysAllowedPermission alwaysAllowedPermissionsItem) {
    if (this.alwaysAllowedPermissions == null) {
      this.alwaysAllowedPermissions = new ArrayList<AlwaysAllowedPermission>();
    }
    this.alwaysAllowedPermissions.add(alwaysAllowedPermissionsItem);
    return this;
  }

   /**
   * An array of always allowed permissions which can be used to specify object type and permission. An object with same object type and permission can not be added in &#39;objects&#39; array.
   * @return alwaysAllowedPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of always allowed permissions which can be used to specify object type and permission. An object with same object type and permission can not be added in 'objects' array.")

  public List<AlwaysAllowedPermission> getAlwaysAllowedPermissions() {
    return alwaysAllowedPermissions;
  }


  public void setAlwaysAllowedPermissions(List<AlwaysAllowedPermission> alwaysAllowedPermissions) {
    this.alwaysAllowedPermissions = alwaysAllowedPermissions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessGroupScope accessGroupScope = (AccessGroupScope) o;
    return Objects.equals(this.id, accessGroupScope.id) &&
        Objects.equals(this.name, accessGroupScope.name) &&
        Objects.equals(this.roleId, accessGroupScope.roleId) &&
        Objects.equals(this.scopeType, accessGroupScope.scopeType) &&
        Objects.equals(this.objectTags, accessGroupScope.objectTags) &&
        Objects.equals(this.objects, accessGroupScope.objects) &&
        Objects.equals(this.alwaysAllowedPermissions, accessGroupScope.alwaysAllowedPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, roleId, scopeType, objectTags, objects, alwaysAllowedPermissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessGroupScope {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    scopeType: ").append(toIndentedString(scopeType)).append("\n");
    sb.append("    objectTags: ").append(toIndentedString(objectTags)).append("\n");
    sb.append("    objects: ").append(toIndentedString(objects)).append("\n");
    sb.append("    alwaysAllowedPermissions: ").append(toIndentedString(alwaysAllowedPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

