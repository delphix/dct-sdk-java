/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A Data Control Tower object that references points in time for one or more datasets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class BookmarkCreateParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VDB_IDS = "vdb_ids";
  @SerializedName(SERIALIZED_NAME_VDB_IDS)
  private Set<String> vdbIds;

  public static final String SERIALIZED_NAME_SNAPSHOT_IDS = "snapshot_ids";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDS)
  private Set<String> snapshotIds;

  public static final String SERIALIZED_NAME_TIMEFLOW_IDS = "timeflow_ids";
  @SerializedName(SERIALIZED_NAME_TIMEFLOW_IDS)
  private Set<String> timeflowIds;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TIMESTAMP_IN_DATABASE_TIMEZONE = "timestamp_in_database_timezone";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_IN_DATABASE_TIMEZONE)
  private String timestampInDatabaseTimezone;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private Long retention;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private LocalDate expiration;

  public static final String SERIALIZED_NAME_RETAIN_FOREVER = "retain_forever";
  @SerializedName(SERIALIZED_NAME_RETAIN_FOREVER)
  private Boolean retainForever;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public static final String SERIALIZED_NAME_INHERIT_PARENT_VDB_TAGS = "inherit_parent_vdb_tags";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INHERIT_PARENT_VDB_TAGS)
  private Boolean inheritParentVdbTags = false;

  public static final String SERIALIZED_NAME_INHERIT_PARENT_TAGS = "inherit_parent_tags";
  @SerializedName(SERIALIZED_NAME_INHERIT_PARENT_TAGS)
  private Boolean inheritParentTags = false;

  public BookmarkCreateParameters() {
  }

  public BookmarkCreateParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The user-defined name of this bookmark.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BookmarkCreateParameters vdbIds(Set<String> vdbIds) {
    this.vdbIds = vdbIds;
    return this;
  }

  public BookmarkCreateParameters addVdbIdsItem(String vdbIdsItem) {
    if (this.vdbIds == null) {
      this.vdbIds = new LinkedHashSet<>();
    }
    this.vdbIds.add(vdbIdsItem);
    return this;
  }

   /**
   * The IDs of the VDBs to create the Bookmark on. This parameter is mutually exclusive with snapshot_ids and timeflow_ids.
   * @return vdbIds
  **/
  @javax.annotation.Nullable
  public Set<String> getVdbIds() {
    return vdbIds;
  }

  public void setVdbIds(Set<String> vdbIds) {
    this.vdbIds = vdbIds;
  }


  public BookmarkCreateParameters snapshotIds(Set<String> snapshotIds) {
    this.snapshotIds = snapshotIds;
    return this;
  }

  public BookmarkCreateParameters addSnapshotIdsItem(String snapshotIdsItem) {
    if (this.snapshotIds == null) {
      this.snapshotIds = new LinkedHashSet<>();
    }
    this.snapshotIds.add(snapshotIdsItem);
    return this;
  }

   /**
   * The IDs of the snapshots that will be part of the Bookmark. This parameter is mutually exclusive with vdb_ids, timestamp, timestamp_in_database_timezone, location and timeflow_ids. 
   * @return snapshotIds
  **/
  @javax.annotation.Nullable
  public Set<String> getSnapshotIds() {
    return snapshotIds;
  }

  public void setSnapshotIds(Set<String> snapshotIds) {
    this.snapshotIds = snapshotIds;
  }


  public BookmarkCreateParameters timeflowIds(Set<String> timeflowIds) {
    this.timeflowIds = timeflowIds;
    return this;
  }

  public BookmarkCreateParameters addTimeflowIdsItem(String timeflowIdsItem) {
    if (this.timeflowIds == null) {
      this.timeflowIds = new LinkedHashSet<>();
    }
    this.timeflowIds.add(timeflowIdsItem);
    return this;
  }

   /**
   * The array of timeflow Id. Only allowed to set when timestamp, timestamp_in_database_timezone or location is provided.
   * @return timeflowIds
  **/
  @javax.annotation.Nullable
  public Set<String> getTimeflowIds() {
    return timeflowIds;
  }

  public void setTimeflowIds(Set<String> timeflowIds) {
    this.timeflowIds = timeflowIds;
  }


  public BookmarkCreateParameters timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The point in time from which to execute the operation. Mutually exclusive with snapshot_ids, timestamp_in_database_timezone and location.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public BookmarkCreateParameters timestampInDatabaseTimezone(String timestampInDatabaseTimezone) {
    this.timestampInDatabaseTimezone = timestampInDatabaseTimezone;
    return this;
  }

   /**
   * The point in time from which to execute the operation, expressed as a date-time in the timezone of the source database. Mutually exclusive with snapshot_ids, timestamp and location.
   * @return timestampInDatabaseTimezone
  **/
  @javax.annotation.Nullable
  public String getTimestampInDatabaseTimezone() {
    return timestampInDatabaseTimezone;
  }

  public void setTimestampInDatabaseTimezone(String timestampInDatabaseTimezone) {
    this.timestampInDatabaseTimezone = timestampInDatabaseTimezone;
  }


  public BookmarkCreateParameters location(String location) {
    this.location = location;
    return this;
  }

   /**
   * The location to create bookmark from. Mutually exclusive with snapshot_ids, timestamp, and timestamp_in_database_timezone.
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  @Deprecated
  public BookmarkCreateParameters retention(Long retention) {
    this.retention = retention;
    return this;
  }

   /**
   * The retention policy for this bookmark, in days. A value of -1 indicates the bookmark should be kept forever. Deprecated in favor of expiration and retain_forever.
   * @return retention
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Long getRetention() {
    return retention;
  }

  @Deprecated
  public void setRetention(Long retention) {
    this.retention = retention;
  }


  public BookmarkCreateParameters expiration(LocalDate expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * The expiration for this bookmark. Mutually exclusive with retention and retain_forever.
   * @return expiration
  **/
  @javax.annotation.Nullable
  public LocalDate getExpiration() {
    return expiration;
  }

  public void setExpiration(LocalDate expiration) {
    this.expiration = expiration;
  }


  public BookmarkCreateParameters retainForever(Boolean retainForever) {
    this.retainForever = retainForever;
    return this;
  }

   /**
   * Indicates that the bookmark should be retained forever.
   * @return retainForever
  **/
  @javax.annotation.Nullable
  public Boolean getRetainForever() {
    return retainForever;
  }

  public void setRetainForever(Boolean retainForever) {
    this.retainForever = retainForever;
  }


  public BookmarkCreateParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public BookmarkCreateParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for this Bookmark.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public BookmarkCreateParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this bookmark must be configured as owner of the bookmark.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }


  @Deprecated
  public BookmarkCreateParameters inheritParentVdbTags(Boolean inheritParentVdbTags) {
    this.inheritParentVdbTags = inheritParentVdbTags;
    return this;
  }

   /**
   * This field has been deprecated in favour of new field &#39;inherit_parent_tags&#39;.
   * @return inheritParentVdbTags
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getInheritParentVdbTags() {
    return inheritParentVdbTags;
  }

  @Deprecated
  public void setInheritParentVdbTags(Boolean inheritParentVdbTags) {
    this.inheritParentVdbTags = inheritParentVdbTags;
  }


  public BookmarkCreateParameters inheritParentTags(Boolean inheritParentTags) {
    this.inheritParentTags = inheritParentTags;
    return this;
  }

   /**
   * Whether this bookmark should inherit tags from the parent dataset.
   * @return inheritParentTags
  **/
  @javax.annotation.Nullable
  public Boolean getInheritParentTags() {
    return inheritParentTags;
  }

  public void setInheritParentTags(Boolean inheritParentTags) {
    this.inheritParentTags = inheritParentTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookmarkCreateParameters bookmarkCreateParameters = (BookmarkCreateParameters) o;
    return Objects.equals(this.name, bookmarkCreateParameters.name) &&
        Objects.equals(this.vdbIds, bookmarkCreateParameters.vdbIds) &&
        Objects.equals(this.snapshotIds, bookmarkCreateParameters.snapshotIds) &&
        Objects.equals(this.timeflowIds, bookmarkCreateParameters.timeflowIds) &&
        Objects.equals(this.timestamp, bookmarkCreateParameters.timestamp) &&
        Objects.equals(this.timestampInDatabaseTimezone, bookmarkCreateParameters.timestampInDatabaseTimezone) &&
        Objects.equals(this.location, bookmarkCreateParameters.location) &&
        Objects.equals(this.retention, bookmarkCreateParameters.retention) &&
        Objects.equals(this.expiration, bookmarkCreateParameters.expiration) &&
        Objects.equals(this.retainForever, bookmarkCreateParameters.retainForever) &&
        Objects.equals(this.tags, bookmarkCreateParameters.tags) &&
        Objects.equals(this.makeCurrentAccountOwner, bookmarkCreateParameters.makeCurrentAccountOwner) &&
        Objects.equals(this.inheritParentVdbTags, bookmarkCreateParameters.inheritParentVdbTags) &&
        Objects.equals(this.inheritParentTags, bookmarkCreateParameters.inheritParentTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, vdbIds, snapshotIds, timeflowIds, timestamp, timestampInDatabaseTimezone, location, retention, expiration, retainForever, tags, makeCurrentAccountOwner, inheritParentVdbTags, inheritParentTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookmarkCreateParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    vdbIds: ").append(toIndentedString(vdbIds)).append("\n");
    sb.append("    snapshotIds: ").append(toIndentedString(snapshotIds)).append("\n");
    sb.append("    timeflowIds: ").append(toIndentedString(timeflowIds)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    timestampInDatabaseTimezone: ").append(toIndentedString(timestampInDatabaseTimezone)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    retainForever: ").append(toIndentedString(retainForever)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("    inheritParentVdbTags: ").append(toIndentedString(inheritParentVdbTags)).append("\n");
    sb.append("    inheritParentTags: ").append(toIndentedString(inheritParentTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("vdb_ids");
    openapiFields.add("snapshot_ids");
    openapiFields.add("timeflow_ids");
    openapiFields.add("timestamp");
    openapiFields.add("timestamp_in_database_timezone");
    openapiFields.add("location");
    openapiFields.add("retention");
    openapiFields.add("expiration");
    openapiFields.add("retain_forever");
    openapiFields.add("tags");
    openapiFields.add("make_current_account_owner");
    openapiFields.add("inherit_parent_vdb_tags");
    openapiFields.add("inherit_parent_tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BookmarkCreateParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookmarkCreateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookmarkCreateParameters is not found in the empty JSON string", BookmarkCreateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookmarkCreateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookmarkCreateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BookmarkCreateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vdb_ids") != null && !jsonObj.get("vdb_ids").isJsonNull() && !jsonObj.get("vdb_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdb_ids` to be an array in the JSON string but got `%s`", jsonObj.get("vdb_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("snapshot_ids") != null && !jsonObj.get("snapshot_ids").isJsonNull() && !jsonObj.get("snapshot_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot_ids` to be an array in the JSON string but got `%s`", jsonObj.get("snapshot_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("timeflow_ids") != null && !jsonObj.get("timeflow_ids").isJsonNull() && !jsonObj.get("timeflow_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeflow_ids` to be an array in the JSON string but got `%s`", jsonObj.get("timeflow_ids").toString()));
      }
      if ((jsonObj.get("timestamp_in_database_timezone") != null && !jsonObj.get("timestamp_in_database_timezone").isJsonNull()) && !jsonObj.get("timestamp_in_database_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_in_database_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_in_database_timezone").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookmarkCreateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookmarkCreateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookmarkCreateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookmarkCreateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<BookmarkCreateParameters>() {
           @Override
           public void write(JsonWriter out, BookmarkCreateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookmarkCreateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BookmarkCreateParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BookmarkCreateParameters
  * @throws IOException if the JSON string is invalid with respect to BookmarkCreateParameters
  */
  public static BookmarkCreateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookmarkCreateParameters.class);
  }

 /**
  * Convert an instance of BookmarkCreateParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

