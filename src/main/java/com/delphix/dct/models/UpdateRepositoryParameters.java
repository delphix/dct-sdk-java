/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateRepositoryParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class UpdateRepositoryParameters {
  /**
   * The database type of this repository.
   */
  @JsonAdapter(DatabaseTypeEnum.Adapter.class)
  public enum DatabaseTypeEnum {
    ORACLE("ORACLE"),
    
    MSSQL("MSSQL"),
    
    ASE("ASE"),
    
    APPDATA("APPDATA");

    private String value;

    DatabaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseTypeEnum fromValue(String value) {
      for (DatabaseTypeEnum b : DatabaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private DatabaseTypeEnum databaseType;

  public static final String SERIALIZED_NAME_ALLOW_PROVISIONING = "allow_provisioning";
  @SerializedName(SERIALIZED_NAME_ALLOW_PROVISIONING)
  private Boolean allowProvisioning;

  public static final String SERIALIZED_NAME_IS_STAGING = "is_staging";
  @SerializedName(SERIALIZED_NAME_IS_STAGING)
  private Boolean isStaging;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;


  public UpdateRepositoryParameters databaseType(DatabaseTypeEnum databaseType) {
    
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The database type of this repository.
   * @return databaseType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The database type of this repository.")

  public DatabaseTypeEnum getDatabaseType() {
    return databaseType;
  }


  public void setDatabaseType(DatabaseTypeEnum databaseType) {
    this.databaseType = databaseType;
  }


  public UpdateRepositoryParameters allowProvisioning(Boolean allowProvisioning) {
    
    this.allowProvisioning = allowProvisioning;
    return this;
  }

   /**
   * Flag indicating whether the repository should be used for provisioning.
   * @return allowProvisioning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating whether the repository should be used for provisioning.")

  public Boolean getAllowProvisioning() {
    return allowProvisioning;
  }


  public void setAllowProvisioning(Boolean allowProvisioning) {
    this.allowProvisioning = allowProvisioning;
  }


  public UpdateRepositoryParameters isStaging(Boolean isStaging) {
    
    this.isStaging = isStaging;
    return this;
  }

   /**
   * Flag indicating whether this repository can be used by the Delphix Engine for internal processing.
   * @return isStaging
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating whether this repository can be used by the Delphix Engine for internal processing.")

  public Boolean getIsStaging() {
    return isStaging;
  }


  public void setIsStaging(Boolean isStaging) {
    this.isStaging = isStaging;
  }


  public UpdateRepositoryParameters version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of the repository.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the repository.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRepositoryParameters updateRepositoryParameters = (UpdateRepositoryParameters) o;
    return Objects.equals(this.databaseType, updateRepositoryParameters.databaseType) &&
        Objects.equals(this.allowProvisioning, updateRepositoryParameters.allowProvisioning) &&
        Objects.equals(this.isStaging, updateRepositoryParameters.isStaging) &&
        Objects.equals(this.version, updateRepositoryParameters.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseType, allowProvisioning, isStaging, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRepositoryParameters {\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    allowProvisioning: ").append(toIndentedString(allowProvisioning)).append("\n");
    sb.append("    isStaging: ").append(toIndentedString(isStaging)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

