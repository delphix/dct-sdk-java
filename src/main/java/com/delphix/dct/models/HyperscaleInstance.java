/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.HyperscaleDataTypeEnum;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A registered Hyperscale instance&#39;s connection and authentication settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class HyperscaleInstance {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_DATA_TYPE = "data_type";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private HyperscaleDataTypeEnum dataType;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_INSECURE_SSL = "insecure_ssl";
  @SerializedName(SERIALIZED_NAME_INSECURE_SSL)
  private Boolean insecureSsl = false;

  public static final String SERIALIZED_NAME_UNSAFE_SSL_HOSTNAME_CHECK = "unsafe_ssl_hostname_check";
  @SerializedName(SERIALIZED_NAME_UNSAFE_SSL_HOSTNAME_CHECK)
  private Boolean unsafeSslHostnameCheck = false;

  public static final String SERIALIZED_NAME_TRUSTSTORE_FILENAME = "truststore_filename";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_FILENAME)
  private String truststoreFilename;

  public static final String SERIALIZED_NAME_TRUSTSTORE_PASSWORD = "truststore_password";
  @SerializedName(SERIALIZED_NAME_TRUSTSTORE_PASSWORD)
  private String truststorePassword;

  /**
   * The status of this hyperscale instance.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    DELETING("DELETING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The status of the connection to the hyperscale instance.
   */
  @JsonAdapter(ConnectionStatusEnum.Adapter.class)
  public enum ConnectionStatusEnum {
    ONLINE("ONLINE"),
    
    CONNECTION_ERROR("CONNECTION_ERROR"),
    
    BAD_CREDENTIALS("BAD_CREDENTIALS");

    private String value;

    ConnectionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionStatusEnum fromValue(String value) {
      for (ConnectionStatusEnum b : ConnectionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ConnectionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "connection_status";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatusEnum connectionStatus;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS_DETAILS = "connection_status_details";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS_DETAILS)
  private String connectionStatusDetails;

  public HyperscaleInstance() {
  }

  public HyperscaleInstance(
     String id, 
     StatusEnum status, 
     ConnectionStatusEnum connectionStatus, 
     String connectionStatusDetails
  ) {
    this();
    this.id = id;
    this.status = status;
    this.connectionStatus = connectionStatus;
    this.connectionStatusDetails = connectionStatusDetails;
  }

   /**
   * The Hyperscale instance entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public HyperscaleInstance name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this hyperscale instance.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HyperscaleInstance hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname of this hyperscale instance.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public HyperscaleInstance dataType(HyperscaleDataTypeEnum dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @javax.annotation.Nullable
  public HyperscaleDataTypeEnum getDataType() {
    return dataType;
  }

  public void setDataType(HyperscaleDataTypeEnum dataType) {
    this.dataType = dataType;
  }


  public HyperscaleInstance creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date this hyperscale instance was registered.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public HyperscaleInstance tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public HyperscaleInstance addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for this hyperscale instance.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public HyperscaleInstance apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

   /**
   * API key to connect to the hyperscale instance.
   * @return apiKey
  **/
  @javax.annotation.Nonnull
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public HyperscaleInstance insecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
    return this;
  }

   /**
   * Allow connections to the hyperscale instance over HTTPs without validating the TLS certificate. Even though the connection to the hyperscale instance might be performed over HTTPs, setting this property eliminates the protection against a man-in-the-middle attach for connections to this engine. Instead, consider creating a truststore with a Certificate Authority to validate the hyperscale instance&#39;s certificate, and set the truststore_filename property. 
   * @return insecureSsl
  **/
  @javax.annotation.Nullable
  public Boolean getInsecureSsl() {
    return insecureSsl;
  }

  public void setInsecureSsl(Boolean insecureSsl) {
    this.insecureSsl = insecureSsl;
  }


  public HyperscaleInstance unsafeSslHostnameCheck(Boolean unsafeSslHostnameCheck) {
    this.unsafeSslHostnameCheck = unsafeSslHostnameCheck;
    return this;
  }

   /**
   * Ignore validation of the name associated to the TLS certificate when connecting to the hyperscale instance over HTTPs. Setting this value must only be done if the TLS certificate of the hyperscale instance does not match the hostname, and the TLS configuration of the hyperscale instance cannot be fixed. Setting this property reduces the protection against a man-in-the-middle attack for connections to this hyperscale instance. This is ignored if insecure_ssl is set. 
   * @return unsafeSslHostnameCheck
  **/
  @javax.annotation.Nullable
  public Boolean getUnsafeSslHostnameCheck() {
    return unsafeSslHostnameCheck;
  }

  public void setUnsafeSslHostnameCheck(Boolean unsafeSslHostnameCheck) {
    this.unsafeSslHostnameCheck = unsafeSslHostnameCheck;
  }


  public HyperscaleInstance truststoreFilename(String truststoreFilename) {
    this.truststoreFilename = truststoreFilename;
    return this;
  }

   /**
   * File name of a truststore which can be used to validate the TLS certificate of the hyperscale instance. The truststore must be available at /etc/config/certs/&lt;truststore_filename&gt; 
   * @return truststoreFilename
  **/
  @javax.annotation.Nullable
  public String getTruststoreFilename() {
    return truststoreFilename;
  }

  public void setTruststoreFilename(String truststoreFilename) {
    this.truststoreFilename = truststoreFilename;
  }


  public HyperscaleInstance truststorePassword(String truststorePassword) {
    this.truststorePassword = truststorePassword;
    return this;
  }

   /**
   * Password to read the truststore. 
   * @return truststorePassword
  **/
  @javax.annotation.Nullable
  public String getTruststorePassword() {
    return truststorePassword;
  }

  public void setTruststorePassword(String truststorePassword) {
    this.truststorePassword = truststorePassword;
  }


   /**
   * The status of this hyperscale instance.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



   /**
   * The status of the connection to the hyperscale instance.
   * @return connectionStatus
  **/
  @javax.annotation.Nullable
  public ConnectionStatusEnum getConnectionStatus() {
    return connectionStatus;
  }



   /**
   * If set, details about the status of the connection to the hyperscale instance.
   * @return connectionStatusDetails
  **/
  @javax.annotation.Nullable
  public String getConnectionStatusDetails() {
    return connectionStatusDetails;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleInstance hyperscaleInstance = (HyperscaleInstance) o;
    return Objects.equals(this.id, hyperscaleInstance.id) &&
        Objects.equals(this.name, hyperscaleInstance.name) &&
        Objects.equals(this.hostname, hyperscaleInstance.hostname) &&
        Objects.equals(this.dataType, hyperscaleInstance.dataType) &&
        Objects.equals(this.creationDate, hyperscaleInstance.creationDate) &&
        Objects.equals(this.tags, hyperscaleInstance.tags) &&
        Objects.equals(this.apiKey, hyperscaleInstance.apiKey) &&
        Objects.equals(this.insecureSsl, hyperscaleInstance.insecureSsl) &&
        Objects.equals(this.unsafeSslHostnameCheck, hyperscaleInstance.unsafeSslHostnameCheck) &&
        Objects.equals(this.truststoreFilename, hyperscaleInstance.truststoreFilename) &&
        Objects.equals(this.truststorePassword, hyperscaleInstance.truststorePassword) &&
        Objects.equals(this.status, hyperscaleInstance.status) &&
        Objects.equals(this.connectionStatus, hyperscaleInstance.connectionStatus) &&
        Objects.equals(this.connectionStatusDetails, hyperscaleInstance.connectionStatusDetails);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, hostname, dataType, creationDate, tags, apiKey, insecureSsl, unsafeSslHostnameCheck, truststoreFilename, truststorePassword, status, connectionStatus, connectionStatusDetails);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleInstance {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    insecureSsl: ").append(toIndentedString(insecureSsl)).append("\n");
    sb.append("    unsafeSslHostnameCheck: ").append(toIndentedString(unsafeSslHostnameCheck)).append("\n");
    sb.append("    truststoreFilename: ").append(toIndentedString(truststoreFilename)).append("\n");
    sb.append("    truststorePassword: ").append(toIndentedString(truststorePassword)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    connectionStatusDetails: ").append(toIndentedString(connectionStatusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("hostname");
    openapiFields.add("data_type");
    openapiFields.add("creation_date");
    openapiFields.add("tags");
    openapiFields.add("api_key");
    openapiFields.add("insecure_ssl");
    openapiFields.add("unsafe_ssl_hostname_check");
    openapiFields.add("truststore_filename");
    openapiFields.add("truststore_password");
    openapiFields.add("status");
    openapiFields.add("connection_status");
    openapiFields.add("connection_status_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("api_key");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperscaleInstance
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperscaleInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperscaleInstance is not found in the empty JSON string", HyperscaleInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperscaleInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperscaleInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HyperscaleInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      // validate the optional field `data_type`
      if (jsonObj.get("data_type") != null && !jsonObj.get("data_type").isJsonNull()) {
        HyperscaleDataTypeEnum.validateJsonElement(jsonObj.get("data_type"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (!jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if ((jsonObj.get("truststore_filename") != null && !jsonObj.get("truststore_filename").isJsonNull()) && !jsonObj.get("truststore_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `truststore_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("truststore_filename").toString()));
      }
      if ((jsonObj.get("truststore_password") != null && !jsonObj.get("truststore_password").isJsonNull()) && !jsonObj.get("truststore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `truststore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("truststore_password").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonNull()) && !jsonObj.get("connection_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_status").toString()));
      }
      // validate the optional field `connection_status`
      if (jsonObj.get("connection_status") != null && !jsonObj.get("connection_status").isJsonNull()) {
        ConnectionStatusEnum.validateJsonElement(jsonObj.get("connection_status"));
      }
      if ((jsonObj.get("connection_status_details") != null && !jsonObj.get("connection_status_details").isJsonNull()) && !jsonObj.get("connection_status_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_status_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_status_details").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperscaleInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperscaleInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperscaleInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperscaleInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperscaleInstance>() {
           @Override
           public void write(JsonWriter out, HyperscaleInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperscaleInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperscaleInstance given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperscaleInstance
  * @throws IOException if the JSON string is invalid with respect to HyperscaleInstance
  */
  public static HyperscaleInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperscaleInstance.class);
  }

 /**
  * Convert an instance of HyperscaleInstance to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

