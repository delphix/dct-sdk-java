/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.BaseProvisionVDBParameters;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * ProvisionVDBGroupFromBookmarkParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ProvisionVDBGroupFromBookmarkParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_BOOKMARK_ID = "bookmark_id";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_ID)
  private String bookmarkId;

  public static final String SERIALIZED_NAME_PROVISION_PARAMETERS = "provision_parameters";
  @SerializedName(SERIALIZED_NAME_PROVISION_PARAMETERS)
  private Map<String, BaseProvisionVDBParameters> provisionParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public ProvisionVDBGroupFromBookmarkParameters() {
  }

  public ProvisionVDBGroupFromBookmarkParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the created VDB group name.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProvisionVDBGroupFromBookmarkParameters bookmarkId(String bookmarkId) {
    this.bookmarkId = bookmarkId;
    return this;
  }

   /**
   * ID of a bookmark to provision this VDB Group from.
   * @return bookmarkId
  **/
  @javax.annotation.Nonnull
  public String getBookmarkId() {
    return bookmarkId;
  }

  public void setBookmarkId(String bookmarkId) {
    this.bookmarkId = bookmarkId;
  }


  public ProvisionVDBGroupFromBookmarkParameters provisionParameters(Map<String, BaseProvisionVDBParameters> provisionParameters) {
    this.provisionParameters = provisionParameters;
    return this;
  }

  public ProvisionVDBGroupFromBookmarkParameters putProvisionParametersItem(String key, BaseProvisionVDBParameters provisionParametersItem) {
    if (this.provisionParameters == null) {
      this.provisionParameters = new HashMap<>();
    }
    this.provisionParameters.put(key, provisionParametersItem);
    return this;
  }

   /**
   * Provision parameters for each of the VDBs which will need to be provisioned. The key must be the vdb_id of the corresponding entry from the bookmark, and the value the provision parameters for the VDB which will be cloned from the bookmark.
   * @return provisionParameters
  **/
  @javax.annotation.Nonnull
  public Map<String, BaseProvisionVDBParameters> getProvisionParameters() {
    return provisionParameters;
  }

  public void setProvisionParameters(Map<String, BaseProvisionVDBParameters> provisionParameters) {
    this.provisionParameters = provisionParameters;
  }


  public ProvisionVDBGroupFromBookmarkParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public ProvisionVDBGroupFromBookmarkParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for VDB Group.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public ProvisionVDBGroupFromBookmarkParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account provisioning this VDB group must be configured as owner of the VDB group.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisionVDBGroupFromBookmarkParameters provisionVDBGroupFromBookmarkParameters = (ProvisionVDBGroupFromBookmarkParameters) o;
    return Objects.equals(this.name, provisionVDBGroupFromBookmarkParameters.name) &&
        Objects.equals(this.bookmarkId, provisionVDBGroupFromBookmarkParameters.bookmarkId) &&
        Objects.equals(this.provisionParameters, provisionVDBGroupFromBookmarkParameters.provisionParameters) &&
        Objects.equals(this.tags, provisionVDBGroupFromBookmarkParameters.tags) &&
        Objects.equals(this.makeCurrentAccountOwner, provisionVDBGroupFromBookmarkParameters.makeCurrentAccountOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, bookmarkId, provisionParameters, tags, makeCurrentAccountOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisionVDBGroupFromBookmarkParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    bookmarkId: ").append(toIndentedString(bookmarkId)).append("\n");
    sb.append("    provisionParameters: ").append(toIndentedString(provisionParameters)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("bookmark_id");
    openapiFields.add("provision_parameters");
    openapiFields.add("tags");
    openapiFields.add("make_current_account_owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("bookmark_id");
    openapiRequiredFields.add("provision_parameters");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProvisionVDBGroupFromBookmarkParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisionVDBGroupFromBookmarkParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisionVDBGroupFromBookmarkParameters is not found in the empty JSON string", ProvisionVDBGroupFromBookmarkParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisionVDBGroupFromBookmarkParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisionVDBGroupFromBookmarkParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisionVDBGroupFromBookmarkParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("bookmark_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookmark_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookmark_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisionVDBGroupFromBookmarkParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisionVDBGroupFromBookmarkParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisionVDBGroupFromBookmarkParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisionVDBGroupFromBookmarkParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisionVDBGroupFromBookmarkParameters>() {
           @Override
           public void write(JsonWriter out, ProvisionVDBGroupFromBookmarkParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisionVDBGroupFromBookmarkParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProvisionVDBGroupFromBookmarkParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProvisionVDBGroupFromBookmarkParameters
  * @throws IOException if the JSON string is invalid with respect to ProvisionVDBGroupFromBookmarkParameters
  */
  public static ProvisionVDBGroupFromBookmarkParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisionVDBGroupFromBookmarkParameters.class);
  }

 /**
  * Convert an instance of ProvisionVDBGroupFromBookmarkParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

