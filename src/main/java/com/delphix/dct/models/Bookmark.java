/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.BookmarkDSources;
import com.delphix.dct.models.BookmarkVDBs;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A Data Control Tower object that references points in time for one or more datasets.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Bookmark {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_VDB_IDS = "vdb_ids";
  @SerializedName(SERIALIZED_NAME_VDB_IDS)
  private List<String> vdbIds;

  public static final String SERIALIZED_NAME_DSOURCE_IDS = "dsource_ids";
  @SerializedName(SERIALIZED_NAME_DSOURCE_IDS)
  private List<String> dsourceIds;

  public static final String SERIALIZED_NAME_VDBS = "vdbs";
  @SerializedName(SERIALIZED_NAME_VDBS)
  private List<BookmarkVDBs> vdbs;

  public static final String SERIALIZED_NAME_DSOURCES = "dsources";
  @SerializedName(SERIALIZED_NAME_DSOURCES)
  private List<BookmarkDSources> dsources;

  public static final String SERIALIZED_NAME_RETENTION = "retention";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RETENTION)
  private Long retention;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private LocalDate expiration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_REPLICATED_DATASET = "replicated_dataset";
  @SerializedName(SERIALIZED_NAME_REPLICATED_DATASET)
  private Boolean replicatedDataset;

  /**
   * Source of the bookmark, default is DCT. In case of self-service bookmarks, this value would be ENGINE.
   */
  @JsonAdapter(BookmarkSourceEnum.Adapter.class)
  public enum BookmarkSourceEnum {
    DCT("DCT"),
    
    ENGINE("ENGINE");

    private String value;

    BookmarkSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BookmarkSourceEnum fromValue(String value) {
      for (BookmarkSourceEnum b : BookmarkSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BookmarkSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BookmarkSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BookmarkSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BookmarkSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BookmarkSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOKMARK_SOURCE = "bookmark_source";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_SOURCE)
  private BookmarkSourceEnum bookmarkSource;

  /**
   * Status of the bookmark. It can have INACTIVE value for engine bookmarks only. If this value is INACTIVE then ss_bookmark_errors would have the list of associated errors.
   */
  @JsonAdapter(BookmarkStatusEnum.Adapter.class)
  public enum BookmarkStatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    BookmarkStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BookmarkStatusEnum fromValue(String value) {
      for (BookmarkStatusEnum b : BookmarkStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BookmarkStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BookmarkStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BookmarkStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BookmarkStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BookmarkStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOKMARK_STATUS = "bookmark_status";
  @SerializedName(SERIALIZED_NAME_BOOKMARK_STATUS)
  private BookmarkStatusEnum bookmarkStatus;

  public static final String SERIALIZED_NAME_SS_BOOKMARK_REFERENCE = "ss_bookmark_reference";
  @SerializedName(SERIALIZED_NAME_SS_BOOKMARK_REFERENCE)
  private String ssBookmarkReference;

  public static final String SERIALIZED_NAME_SS_BOOKMARK_ERRORS = "ss_bookmark_errors";
  @SerializedName(SERIALIZED_NAME_SS_BOOKMARK_ERRORS)
  private List<String> ssBookmarkErrors;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public Bookmark() {
  }

  public Bookmark(
     String id, 
     OffsetDateTime creationDate, 
     String status
  ) {
    this();
    this.id = id;
    this.creationDate = creationDate;
    this.status = status;
  }

   /**
   * The Bookmark object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Bookmark name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The user-defined name of this bookmark.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


   /**
   * The date and time that this bookmark was created.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  public Bookmark vdbIds(List<String> vdbIds) {
    this.vdbIds = vdbIds;
    return this;
  }

  public Bookmark addVdbIdsItem(String vdbIdsItem) {
    if (this.vdbIds == null) {
      this.vdbIds = new ArrayList<>();
    }
    this.vdbIds.add(vdbIdsItem);
    return this;
  }

   /**
   * The list of VDB IDs associated with this bookmark.
   * @return vdbIds
  **/
  @javax.annotation.Nullable
  public List<String> getVdbIds() {
    return vdbIds;
  }

  public void setVdbIds(List<String> vdbIds) {
    this.vdbIds = vdbIds;
  }


  public Bookmark dsourceIds(List<String> dsourceIds) {
    this.dsourceIds = dsourceIds;
    return this;
  }

  public Bookmark addDsourceIdsItem(String dsourceIdsItem) {
    if (this.dsourceIds == null) {
      this.dsourceIds = new ArrayList<>();
    }
    this.dsourceIds.add(dsourceIdsItem);
    return this;
  }

   /**
   * The list of dSource IDs associated with this bookmark.
   * @return dsourceIds
  **/
  @javax.annotation.Nullable
  public List<String> getDsourceIds() {
    return dsourceIds;
  }

  public void setDsourceIds(List<String> dsourceIds) {
    this.dsourceIds = dsourceIds;
  }


  public Bookmark vdbs(List<BookmarkVDBs> vdbs) {
    this.vdbs = vdbs;
    return this;
  }

  public Bookmark addVdbsItem(BookmarkVDBs vdbsItem) {
    if (this.vdbs == null) {
      this.vdbs = new ArrayList<>();
    }
    this.vdbs.add(vdbsItem);
    return this;
  }

   /**
   * The list of VDB IDs and VDB names associated with this bookmark.
   * @return vdbs
  **/
  @javax.annotation.Nullable
  public List<BookmarkVDBs> getVdbs() {
    return vdbs;
  }

  public void setVdbs(List<BookmarkVDBs> vdbs) {
    this.vdbs = vdbs;
  }


  public Bookmark dsources(List<BookmarkDSources> dsources) {
    this.dsources = dsources;
    return this;
  }

  public Bookmark addDsourcesItem(BookmarkDSources dsourcesItem) {
    if (this.dsources == null) {
      this.dsources = new ArrayList<>();
    }
    this.dsources.add(dsourcesItem);
    return this;
  }

   /**
   * The list of dSource IDs and dSource names associated with this bookmark.
   * @return dsources
  **/
  @javax.annotation.Nullable
  public List<BookmarkDSources> getDsources() {
    return dsources;
  }

  public void setDsources(List<BookmarkDSources> dsources) {
    this.dsources = dsources;
  }


  @Deprecated
  public Bookmark retention(Long retention) {
    this.retention = retention;
    return this;
  }

   /**
   * The retention policy for this bookmark, in days. A value of -1 indicates the bookmark should be kept forever. Deprecated in favor of expiration.
   * @return retention
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  public Long getRetention() {
    return retention;
  }

  @Deprecated
  public void setRetention(Long retention) {
    this.retention = retention;
  }


  public Bookmark expiration(LocalDate expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * The expiration for this bookmark. When unset, indicates the bookmark is kept forever except for bookmarks of replicated datasets. Expiration cannot be set for bookmarks of replicated datasets.
   * @return expiration
  **/
  @javax.annotation.Nullable
  public LocalDate getExpiration() {
    return expiration;
  }

  public void setExpiration(LocalDate expiration) {
    this.expiration = expiration;
  }


   /**
   * A message with details about operation progress or state of this bookmark.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public Bookmark replicatedDataset(Boolean replicatedDataset) {
    this.replicatedDataset = replicatedDataset;
    return this;
  }

   /**
   * Whether this bookmark is created from a replicated dataset or not.
   * @return replicatedDataset
  **/
  @javax.annotation.Nullable
  public Boolean getReplicatedDataset() {
    return replicatedDataset;
  }

  public void setReplicatedDataset(Boolean replicatedDataset) {
    this.replicatedDataset = replicatedDataset;
  }


  public Bookmark bookmarkSource(BookmarkSourceEnum bookmarkSource) {
    this.bookmarkSource = bookmarkSource;
    return this;
  }

   /**
   * Source of the bookmark, default is DCT. In case of self-service bookmarks, this value would be ENGINE.
   * @return bookmarkSource
  **/
  @javax.annotation.Nullable
  public BookmarkSourceEnum getBookmarkSource() {
    return bookmarkSource;
  }

  public void setBookmarkSource(BookmarkSourceEnum bookmarkSource) {
    this.bookmarkSource = bookmarkSource;
  }


  public Bookmark bookmarkStatus(BookmarkStatusEnum bookmarkStatus) {
    this.bookmarkStatus = bookmarkStatus;
    return this;
  }

   /**
   * Status of the bookmark. It can have INACTIVE value for engine bookmarks only. If this value is INACTIVE then ss_bookmark_errors would have the list of associated errors.
   * @return bookmarkStatus
  **/
  @javax.annotation.Nullable
  public BookmarkStatusEnum getBookmarkStatus() {
    return bookmarkStatus;
  }

  public void setBookmarkStatus(BookmarkStatusEnum bookmarkStatus) {
    this.bookmarkStatus = bookmarkStatus;
  }


  public Bookmark ssBookmarkReference(String ssBookmarkReference) {
    this.ssBookmarkReference = ssBookmarkReference;
    return this;
  }

   /**
   * Engine reference of the self-service bookmark.
   * @return ssBookmarkReference
  **/
  @javax.annotation.Nullable
  public String getSsBookmarkReference() {
    return ssBookmarkReference;
  }

  public void setSsBookmarkReference(String ssBookmarkReference) {
    this.ssBookmarkReference = ssBookmarkReference;
  }


  public Bookmark ssBookmarkErrors(List<String> ssBookmarkErrors) {
    this.ssBookmarkErrors = ssBookmarkErrors;
    return this;
  }

  public Bookmark addSsBookmarkErrorsItem(String ssBookmarkErrorsItem) {
    if (this.ssBookmarkErrors == null) {
      this.ssBookmarkErrors = new ArrayList<>();
    }
    this.ssBookmarkErrors.add(ssBookmarkErrorsItem);
    return this;
  }

   /**
   * List of errors if any, during bookmark creation in DCT from self-service.
   * @return ssBookmarkErrors
  **/
  @javax.annotation.Nullable
  public List<String> getSsBookmarkErrors() {
    return ssBookmarkErrors;
  }

  public void setSsBookmarkErrors(List<String> ssBookmarkErrors) {
    this.ssBookmarkErrors = ssBookmarkErrors;
  }


  public Bookmark tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Bookmark addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for this Bookmark.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bookmark bookmark = (Bookmark) o;
    return Objects.equals(this.id, bookmark.id) &&
        Objects.equals(this.name, bookmark.name) &&
        Objects.equals(this.creationDate, bookmark.creationDate) &&
        Objects.equals(this.vdbIds, bookmark.vdbIds) &&
        Objects.equals(this.dsourceIds, bookmark.dsourceIds) &&
        Objects.equals(this.vdbs, bookmark.vdbs) &&
        Objects.equals(this.dsources, bookmark.dsources) &&
        Objects.equals(this.retention, bookmark.retention) &&
        Objects.equals(this.expiration, bookmark.expiration) &&
        Objects.equals(this.status, bookmark.status) &&
        Objects.equals(this.replicatedDataset, bookmark.replicatedDataset) &&
        Objects.equals(this.bookmarkSource, bookmark.bookmarkSource) &&
        Objects.equals(this.bookmarkStatus, bookmark.bookmarkStatus) &&
        Objects.equals(this.ssBookmarkReference, bookmark.ssBookmarkReference) &&
        Objects.equals(this.ssBookmarkErrors, bookmark.ssBookmarkErrors) &&
        Objects.equals(this.tags, bookmark.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, creationDate, vdbIds, dsourceIds, vdbs, dsources, retention, expiration, status, replicatedDataset, bookmarkSource, bookmarkStatus, ssBookmarkReference, ssBookmarkErrors, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bookmark {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    vdbIds: ").append(toIndentedString(vdbIds)).append("\n");
    sb.append("    dsourceIds: ").append(toIndentedString(dsourceIds)).append("\n");
    sb.append("    vdbs: ").append(toIndentedString(vdbs)).append("\n");
    sb.append("    dsources: ").append(toIndentedString(dsources)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    replicatedDataset: ").append(toIndentedString(replicatedDataset)).append("\n");
    sb.append("    bookmarkSource: ").append(toIndentedString(bookmarkSource)).append("\n");
    sb.append("    bookmarkStatus: ").append(toIndentedString(bookmarkStatus)).append("\n");
    sb.append("    ssBookmarkReference: ").append(toIndentedString(ssBookmarkReference)).append("\n");
    sb.append("    ssBookmarkErrors: ").append(toIndentedString(ssBookmarkErrors)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("creation_date");
    openapiFields.add("vdb_ids");
    openapiFields.add("dsource_ids");
    openapiFields.add("vdbs");
    openapiFields.add("dsources");
    openapiFields.add("retention");
    openapiFields.add("expiration");
    openapiFields.add("status");
    openapiFields.add("replicated_dataset");
    openapiFields.add("bookmark_source");
    openapiFields.add("bookmark_status");
    openapiFields.add("ss_bookmark_reference");
    openapiFields.add("ss_bookmark_errors");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Bookmark
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bookmark.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bookmark is not found in the empty JSON string", Bookmark.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bookmark.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bookmark` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vdb_ids") != null && !jsonObj.get("vdb_ids").isJsonNull() && !jsonObj.get("vdb_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vdb_ids` to be an array in the JSON string but got `%s`", jsonObj.get("vdb_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dsource_ids") != null && !jsonObj.get("dsource_ids").isJsonNull() && !jsonObj.get("dsource_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsource_ids` to be an array in the JSON string but got `%s`", jsonObj.get("dsource_ids").toString()));
      }
      if (jsonObj.get("vdbs") != null && !jsonObj.get("vdbs").isJsonNull()) {
        JsonArray jsonArrayvdbs = jsonObj.getAsJsonArray("vdbs");
        if (jsonArrayvdbs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vdbs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vdbs` to be an array in the JSON string but got `%s`", jsonObj.get("vdbs").toString()));
          }

          // validate the optional field `vdbs` (array)
          for (int i = 0; i < jsonArrayvdbs.size(); i++) {
            BookmarkVDBs.validateJsonElement(jsonArrayvdbs.get(i));
          };
        }
      }
      if (jsonObj.get("dsources") != null && !jsonObj.get("dsources").isJsonNull()) {
        JsonArray jsonArraydsources = jsonObj.getAsJsonArray("dsources");
        if (jsonArraydsources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dsources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dsources` to be an array in the JSON string but got `%s`", jsonObj.get("dsources").toString()));
          }

          // validate the optional field `dsources` (array)
          for (int i = 0; i < jsonArraydsources.size(); i++) {
            BookmarkDSources.validateJsonElement(jsonArraydsources.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("bookmark_source") != null && !jsonObj.get("bookmark_source").isJsonNull()) && !jsonObj.get("bookmark_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookmark_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookmark_source").toString()));
      }
      // validate the optional field `bookmark_source`
      if (jsonObj.get("bookmark_source") != null && !jsonObj.get("bookmark_source").isJsonNull()) {
        BookmarkSourceEnum.validateJsonElement(jsonObj.get("bookmark_source"));
      }
      if ((jsonObj.get("bookmark_status") != null && !jsonObj.get("bookmark_status").isJsonNull()) && !jsonObj.get("bookmark_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookmark_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookmark_status").toString()));
      }
      // validate the optional field `bookmark_status`
      if (jsonObj.get("bookmark_status") != null && !jsonObj.get("bookmark_status").isJsonNull()) {
        BookmarkStatusEnum.validateJsonElement(jsonObj.get("bookmark_status"));
      }
      if ((jsonObj.get("ss_bookmark_reference") != null && !jsonObj.get("ss_bookmark_reference").isJsonNull()) && !jsonObj.get("ss_bookmark_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ss_bookmark_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ss_bookmark_reference").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ss_bookmark_errors") != null && !jsonObj.get("ss_bookmark_errors").isJsonNull() && !jsonObj.get("ss_bookmark_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ss_bookmark_errors` to be an array in the JSON string but got `%s`", jsonObj.get("ss_bookmark_errors").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bookmark.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bookmark' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bookmark> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bookmark.class));

       return (TypeAdapter<T>) new TypeAdapter<Bookmark>() {
           @Override
           public void write(JsonWriter out, Bookmark value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bookmark read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Bookmark given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Bookmark
  * @throws IOException if the JSON string is invalid with respect to Bookmark
  */
  public static Bookmark fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bookmark.class);
  }

 /**
  * Convert an instance of Bookmark to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

