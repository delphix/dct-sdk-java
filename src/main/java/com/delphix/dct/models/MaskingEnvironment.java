/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MaskingEnvironment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class MaskingEnvironment {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The purpose of this MaskingEnvironment. MaskingEnvironments with a &#39;MASK&#39; purpose will have access to Masking and Profiling jobs, whereas Environments with a &#39;TOKENIZE&#39; purpose will have access to Tokenization and Re-Identification jobs. Note that any custom purposes created through the UI will be represented as &#39;MASK&#39; purposes, due to the jobs that they have access to.
   */
  @JsonAdapter(PurposeEnum.Adapter.class)
  public enum PurposeEnum {
    MASK("MASK"),
    
    TOKENIZE("TOKENIZE");

    private String value;

    PurposeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PurposeEnum fromValue(String value) {
      for (PurposeEnum b : PurposeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PurposeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PurposeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PurposeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PurposeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private PurposeEnum purpose;

  public static final String SERIALIZED_NAME_IS_WORKFLOW_ENABLED = "is_workflow_enabled";
  @SerializedName(SERIALIZED_NAME_IS_WORKFLOW_ENABLED)
  private Boolean isWorkflowEnabled;


  public MaskingEnvironment id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The MaskingEnvironment entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "masking-environment-1", value = "The MaskingEnvironment entity ID.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public MaskingEnvironment engineId(String engineId) {
    
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the Engine where this MaskingEnvironment resides.
   * @return engineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "engine-123", value = "The ID of the Engine where this MaskingEnvironment resides.")

  public String getEngineId() {
    return engineId;
  }


  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public MaskingEnvironment engineName(String engineName) {
    
    this.engineName = engineName;
    return this;
  }

   /**
   * The name of the Engine where this MaskingEnvironment resides.
   * @return engineName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "engine-xyz", value = "The name of the Engine where this MaskingEnvironment resides.")

  public String getEngineName() {
    return engineName;
  }


  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public MaskingEnvironment name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of this MaskingEnvironment.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MyAppEnvironment", value = "The name of this MaskingEnvironment.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public MaskingEnvironment purpose(PurposeEnum purpose) {
    
    this.purpose = purpose;
    return this;
  }

   /**
   * The purpose of this MaskingEnvironment. MaskingEnvironments with a &#39;MASK&#39; purpose will have access to Masking and Profiling jobs, whereas Environments with a &#39;TOKENIZE&#39; purpose will have access to Tokenization and Re-Identification jobs. Note that any custom purposes created through the UI will be represented as &#39;MASK&#39; purposes, due to the jobs that they have access to.
   * @return purpose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The purpose of this MaskingEnvironment. MaskingEnvironments with a 'MASK' purpose will have access to Masking and Profiling jobs, whereas Environments with a 'TOKENIZE' purpose will have access to Tokenization and Re-Identification jobs. Note that any custom purposes created through the UI will be represented as 'MASK' purposes, due to the jobs that they have access to.")

  public PurposeEnum getPurpose() {
    return purpose;
  }


  public void setPurpose(PurposeEnum purpose) {
    this.purpose = purpose;
  }


  public MaskingEnvironment isWorkflowEnabled(Boolean isWorkflowEnabled) {
    
    this.isWorkflowEnabled = isWorkflowEnabled;
    return this;
  }

   /**
   * Get isWorkflowEnabled
   * @return isWorkflowEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsWorkflowEnabled() {
    return isWorkflowEnabled;
  }


  public void setIsWorkflowEnabled(Boolean isWorkflowEnabled) {
    this.isWorkflowEnabled = isWorkflowEnabled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskingEnvironment maskingEnvironment = (MaskingEnvironment) o;
    return Objects.equals(this.id, maskingEnvironment.id) &&
        Objects.equals(this.engineId, maskingEnvironment.engineId) &&
        Objects.equals(this.engineName, maskingEnvironment.engineName) &&
        Objects.equals(this.name, maskingEnvironment.name) &&
        Objects.equals(this.purpose, maskingEnvironment.purpose) &&
        Objects.equals(this.isWorkflowEnabled, maskingEnvironment.isWorkflowEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, engineId, engineName, name, purpose, isWorkflowEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskingEnvironment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    isWorkflowEnabled: ").append(toIndentedString(isWorkflowEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

