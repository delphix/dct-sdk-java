/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Count of TimeFlow snapshots aggregated by day.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class SnapshotDayRange {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_START_OF_DAY = "start_of_day";
  @SerializedName(SERIALIZED_NAME_START_OF_DAY)
  private OffsetDateTime startOfDay;

  public static final String SERIALIZED_NAME_END_OF_DAY = "end_of_day";
  @SerializedName(SERIALIZED_NAME_END_OF_DAY)
  private OffsetDateTime endOfDay;

  public SnapshotDayRange() {
  }

  public SnapshotDayRange count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * Number of TimeFlow snapshots on that day.
   * @return count
  **/
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public SnapshotDayRange date(LocalDate date) {
    this.date = date;
    return this;
  }

   /**
   * Date for which TimeFlow snapshots have been aggregated.
   * @return date
  **/
  @javax.annotation.Nullable
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }


  public SnapshotDayRange startOfDay(OffsetDateTime startOfDay) {
    this.startOfDay = startOfDay;
    return this;
  }

   /**
   * Start of day of this range in the time zone used for computation.
   * @return startOfDay
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartOfDay() {
    return startOfDay;
  }

  public void setStartOfDay(OffsetDateTime startOfDay) {
    this.startOfDay = startOfDay;
  }


  public SnapshotDayRange endOfDay(OffsetDateTime endOfDay) {
    this.endOfDay = endOfDay;
    return this;
  }

   /**
   * End of day of this range in the time zone used for computation.
   * @return endOfDay
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndOfDay() {
    return endOfDay;
  }

  public void setEndOfDay(OffsetDateTime endOfDay) {
    this.endOfDay = endOfDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotDayRange snapshotDayRange = (SnapshotDayRange) o;
    return Objects.equals(this.count, snapshotDayRange.count) &&
        Objects.equals(this.date, snapshotDayRange.date) &&
        Objects.equals(this.startOfDay, snapshotDayRange.startOfDay) &&
        Objects.equals(this.endOfDay, snapshotDayRange.endOfDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, date, startOfDay, endOfDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotDayRange {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    startOfDay: ").append(toIndentedString(startOfDay)).append("\n");
    sb.append("    endOfDay: ").append(toIndentedString(endOfDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("date");
    openapiFields.add("start_of_day");
    openapiFields.add("end_of_day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SnapshotDayRange
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotDayRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotDayRange is not found in the empty JSON string", SnapshotDayRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotDayRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotDayRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotDayRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotDayRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotDayRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotDayRange.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotDayRange>() {
           @Override
           public void write(JsonWriter out, SnapshotDayRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotDayRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SnapshotDayRange given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SnapshotDayRange
  * @throws IOException if the JSON string is invalid with respect to SnapshotDayRange
  */
  public static SnapshotDayRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotDayRange.class);
  }

 /**
  * Convert an instance of SnapshotDayRange to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

