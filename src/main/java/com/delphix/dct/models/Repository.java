/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Repository
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class Repository {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_ALLOW_PROVISIONING = "allow_provisioning";
  @SerializedName(SERIALIZED_NAME_ALLOW_PROVISIONING)
  private Boolean allowProvisioning;

  public static final String SERIALIZED_NAME_IS_STAGING = "is_staging";
  @SerializedName(SERIALIZED_NAME_IS_STAGING)
  private Boolean isStaging;

  public static final String SERIALIZED_NAME_ORACLE_BASE = "oracle_base";
  @SerializedName(SERIALIZED_NAME_ORACLE_BASE)
  private String oracleBase;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_BITS = "bits";
  @SerializedName(SERIALIZED_NAME_BITS)
  private Integer bits;

  public static final String SERIALIZED_NAME_INSTALL_GROUP = "install_group";
  @SerializedName(SERIALIZED_NAME_INSTALL_GROUP)
  private String installGroup;

  public static final String SERIALIZED_NAME_INSTALL_USER = "install_user";
  @SerializedName(SERIALIZED_NAME_INSTALL_USER)
  private String installUser;

  public static final String SERIALIZED_NAME_RAC = "rac";
  @SerializedName(SERIALIZED_NAME_RAC)
  private Boolean rac;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<Long> ports = null;

  public static final String SERIALIZED_NAME_DUMP_HISTORY_FILE = "dump_history_file";
  @SerializedName(SERIALIZED_NAME_DUMP_HISTORY_FILE)
  private String dumpHistoryFile;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "page_size";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Long pageSize;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_INSTALLATION_PATH = "installation_path";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_PATH)
  private String installationPath;

  public static final String SERIALIZED_NAME_FULLTEXT_INSTALLED = "fulltext_installed";
  @SerializedName(SERIALIZED_NAME_FULLTEXT_INSTALLED)
  private Boolean fulltextInstalled;

  public static final String SERIALIZED_NAME_INTERNAL_VERSION = "internal_version";
  @SerializedName(SERIALIZED_NAME_INTERNAL_VERSION)
  private Long internalVersion;

  public static final String SERIALIZED_NAME_MSSQL_CLUSTER_INSTANCES_NAME = "mssql_cluster_instances_name";
  @SerializedName(SERIALIZED_NAME_MSSQL_CLUSTER_INSTANCES_NAME)
  private List<String> mssqlClusterInstancesName = null;

  public static final String SERIALIZED_NAME_MSSQL_CLUSTER_INSTANCES_VERSION = "mssql_cluster_instances_version";
  @SerializedName(SERIALIZED_NAME_MSSQL_CLUSTER_INSTANCES_VERSION)
  private List<String> mssqlClusterInstancesVersion = null;

  public static final String SERIALIZED_NAME_INSTALLATION_HOME = "installation_home";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_HOME)
  private String installationHome;


  public Repository id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Entity id of the repository.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entity id of the repository.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Repository name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the repository.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the repository.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Repository databaseType(String databaseType) {
    
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The database type of this repository.
   * @return databaseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The database type of this repository.")

  public String getDatabaseType() {
    return databaseType;
  }


  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public Repository allowProvisioning(Boolean allowProvisioning) {
    
    this.allowProvisioning = allowProvisioning;
    return this;
  }

   /**
   * Flag indicating whether the repository should be used for provisioning.
   * @return allowProvisioning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating whether the repository should be used for provisioning.")

  public Boolean getAllowProvisioning() {
    return allowProvisioning;
  }


  public void setAllowProvisioning(Boolean allowProvisioning) {
    this.allowProvisioning = allowProvisioning;
  }


  public Repository isStaging(Boolean isStaging) {
    
    this.isStaging = isStaging;
    return this;
  }

   /**
   * Flag indicating whether this repository can be used by the Delphix Engine for internal processing.
   * @return isStaging
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating whether this repository can be used by the Delphix Engine for internal processing.")

  public Boolean getIsStaging() {
    return isStaging;
  }


  public void setIsStaging(Boolean isStaging) {
    this.isStaging = isStaging;
  }


  public Repository oracleBase(String oracleBase) {
    
    this.oracleBase = oracleBase;
    return this;
  }

   /**
   * The Oracle base where database binaries are located.
   * @return oracleBase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Oracle base where database binaries are located.")

  public String getOracleBase() {
    return oracleBase;
  }


  public void setOracleBase(String oracleBase) {
    this.oracleBase = oracleBase;
  }


  public Repository version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version of the repository.
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Version of the repository.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public Repository bits(Integer bits) {
    
    this.bits = bits;
    return this;
  }

   /**
   * 32 or 64 bits.
   * @return bits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "32 or 64 bits.")

  public Integer getBits() {
    return bits;
  }


  public void setBits(Integer bits) {
    this.bits = bits;
  }


  public Repository installGroup(String installGroup) {
    
    this.installGroup = installGroup;
    return this;
  }

   /**
   * Group name of the user that owns the install.
   * @return installGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Group name of the user that owns the install.")

  public String getInstallGroup() {
    return installGroup;
  }


  public void setInstallGroup(String installGroup) {
    this.installGroup = installGroup;
  }


  public Repository installUser(String installUser) {
    
    this.installUser = installUser;
    return this;
  }

   /**
   * User name of the user that owns the install.
   * @return installUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User name of the user that owns the install.")

  public String getInstallUser() {
    return installUser;
  }


  public void setInstallUser(String installUser) {
    this.installUser = installUser;
  }


  public Repository rac(Boolean rac) {
    
    this.rac = rac;
    return this;
  }

   /**
   * Flag indicating whether the install supports Oracle RAC.
   * @return rac
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag indicating whether the install supports Oracle RAC.")

  public Boolean getRac() {
    return rac;
  }


  public void setRac(Boolean rac) {
    this.rac = rac;
  }


  public Repository ports(List<Long> ports) {
    
    this.ports = ports;
    return this;
  }

  public Repository addPortsItem(Long portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<Long>();
    }
    this.ports.add(portsItem);
    return this;
  }

   /**
   * The network ports for connecting to the database instance.
   * @return ports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The network ports for connecting to the database instance.")

  public List<Long> getPorts() {
    return ports;
  }


  public void setPorts(List<Long> ports) {
    this.ports = ports;
  }


  public Repository dumpHistoryFile(String dumpHistoryFile) {
    
    this.dumpHistoryFile = dumpHistoryFile;
    return this;
  }

   /**
   * Fully qualified name of the dump history file.
   * @return dumpHistoryFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fully qualified name of the dump history file.")

  public String getDumpHistoryFile() {
    return dumpHistoryFile;
  }


  public void setDumpHistoryFile(String dumpHistoryFile) {
    this.dumpHistoryFile = dumpHistoryFile;
  }


  public Repository pageSize(Long pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Database page size for the SAP ASE instance.
   * @return pageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Database page size for the SAP ASE instance.")

  public Long getPageSize() {
    return pageSize;
  }


  public void setPageSize(Long pageSize) {
    this.pageSize = pageSize;
  }


  public Repository owner(String owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Account the database server instance is running as.
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account the database server instance is running as.")

  public String getOwner() {
    return owner;
  }


  public void setOwner(String owner) {
    this.owner = owner;
  }


  public Repository installationPath(String installationPath) {
    
    this.installationPath = installationPath;
    return this;
  }

   /**
   * Directory path where the installation is located.
   * @return installationPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Directory path where the installation is located.")

  public String getInstallationPath() {
    return installationPath;
  }


  public void setInstallationPath(String installationPath) {
    this.installationPath = installationPath;
  }


  public Repository fulltextInstalled(Boolean fulltextInstalled) {
    
    this.fulltextInstalled = fulltextInstalled;
    return this;
  }

   /**
   * This property determines if the full-text search and semantic search is installed or not.
   * @return fulltextInstalled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This property determines if the full-text search and semantic search is installed or not.")

  public Boolean getFulltextInstalled() {
    return fulltextInstalled;
  }


  public void setFulltextInstalled(Boolean fulltextInstalled) {
    this.fulltextInstalled = fulltextInstalled;
  }


  public Repository internalVersion(Long internalVersion) {
    
    this.internalVersion = internalVersion;
    return this;
  }

   /**
   * The internal version is tied to the data format of a database and is used to detect compatibility.
   * @return internalVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The internal version is tied to the data format of a database and is used to detect compatibility.")

  public Long getInternalVersion() {
    return internalVersion;
  }


  public void setInternalVersion(Long internalVersion) {
    this.internalVersion = internalVersion;
  }


  public Repository mssqlClusterInstancesName(List<String> mssqlClusterInstancesName) {
    
    this.mssqlClusterInstancesName = mssqlClusterInstancesName;
    return this;
  }

  public Repository addMssqlClusterInstancesNameItem(String mssqlClusterInstancesNameItem) {
    if (this.mssqlClusterInstancesName == null) {
      this.mssqlClusterInstancesName = new ArrayList<String>();
    }
    this.mssqlClusterInstancesName.add(mssqlClusterInstancesNameItem);
    return this;
  }

   /**
   * MSSQL cluster instances name.
   * @return mssqlClusterInstancesName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MSSQL cluster instances name.")

  public List<String> getMssqlClusterInstancesName() {
    return mssqlClusterInstancesName;
  }


  public void setMssqlClusterInstancesName(List<String> mssqlClusterInstancesName) {
    this.mssqlClusterInstancesName = mssqlClusterInstancesName;
  }


  public Repository mssqlClusterInstancesVersion(List<String> mssqlClusterInstancesVersion) {
    
    this.mssqlClusterInstancesVersion = mssqlClusterInstancesVersion;
    return this;
  }

  public Repository addMssqlClusterInstancesVersionItem(String mssqlClusterInstancesVersionItem) {
    if (this.mssqlClusterInstancesVersion == null) {
      this.mssqlClusterInstancesVersion = new ArrayList<String>();
    }
    this.mssqlClusterInstancesVersion.add(mssqlClusterInstancesVersionItem);
    return this;
  }

   /**
   * MSSQL cluster instances version.
   * @return mssqlClusterInstancesVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MSSQL cluster instances version.")

  public List<String> getMssqlClusterInstancesVersion() {
    return mssqlClusterInstancesVersion;
  }


  public void setMssqlClusterInstancesVersion(List<String> mssqlClusterInstancesVersion) {
    this.mssqlClusterInstancesVersion = mssqlClusterInstancesVersion;
  }


  public Repository installationHome(String installationHome) {
    
    this.installationHome = installationHome;
    return this;
  }

   /**
   * Directory where the installation home is located.
   * @return installationHome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Directory where the installation home is located.")

  public String getInstallationHome() {
    return installationHome;
  }


  public void setInstallationHome(String installationHome) {
    this.installationHome = installationHome;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.id, repository.id) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.databaseType, repository.databaseType) &&
        Objects.equals(this.allowProvisioning, repository.allowProvisioning) &&
        Objects.equals(this.isStaging, repository.isStaging) &&
        Objects.equals(this.oracleBase, repository.oracleBase) &&
        Objects.equals(this.version, repository.version) &&
        Objects.equals(this.bits, repository.bits) &&
        Objects.equals(this.installGroup, repository.installGroup) &&
        Objects.equals(this.installUser, repository.installUser) &&
        Objects.equals(this.rac, repository.rac) &&
        Objects.equals(this.ports, repository.ports) &&
        Objects.equals(this.dumpHistoryFile, repository.dumpHistoryFile) &&
        Objects.equals(this.pageSize, repository.pageSize) &&
        Objects.equals(this.owner, repository.owner) &&
        Objects.equals(this.installationPath, repository.installationPath) &&
        Objects.equals(this.fulltextInstalled, repository.fulltextInstalled) &&
        Objects.equals(this.internalVersion, repository.internalVersion) &&
        Objects.equals(this.mssqlClusterInstancesName, repository.mssqlClusterInstancesName) &&
        Objects.equals(this.mssqlClusterInstancesVersion, repository.mssqlClusterInstancesVersion) &&
        Objects.equals(this.installationHome, repository.installationHome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, databaseType, allowProvisioning, isStaging, oracleBase, version, bits, installGroup, installUser, rac, ports, dumpHistoryFile, pageSize, owner, installationPath, fulltextInstalled, internalVersion, mssqlClusterInstancesName, mssqlClusterInstancesVersion, installationHome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    allowProvisioning: ").append(toIndentedString(allowProvisioning)).append("\n");
    sb.append("    isStaging: ").append(toIndentedString(isStaging)).append("\n");
    sb.append("    oracleBase: ").append(toIndentedString(oracleBase)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    bits: ").append(toIndentedString(bits)).append("\n");
    sb.append("    installGroup: ").append(toIndentedString(installGroup)).append("\n");
    sb.append("    installUser: ").append(toIndentedString(installUser)).append("\n");
    sb.append("    rac: ").append(toIndentedString(rac)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    dumpHistoryFile: ").append(toIndentedString(dumpHistoryFile)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    installationPath: ").append(toIndentedString(installationPath)).append("\n");
    sb.append("    fulltextInstalled: ").append(toIndentedString(fulltextInstalled)).append("\n");
    sb.append("    internalVersion: ").append(toIndentedString(internalVersion)).append("\n");
    sb.append("    mssqlClusterInstancesName: ").append(toIndentedString(mssqlClusterInstancesName)).append("\n");
    sb.append("    mssqlClusterInstancesVersion: ").append(toIndentedString(mssqlClusterInstancesVersion)).append("\n");
    sb.append("    installationHome: ").append(toIndentedString(installationHome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

