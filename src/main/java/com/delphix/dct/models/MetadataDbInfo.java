/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Information about the product&#39;s metadata database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class MetadataDbInfo {
  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private Boolean external;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DATABASE_PRODUCT_NAME = "database_product_name";
  @SerializedName(SERIALIZED_NAME_DATABASE_PRODUCT_NAME)
  private String databaseProductName;

  public static final String SERIALIZED_NAME_MAJOR_VERSION = "major_version";
  @SerializedName(SERIALIZED_NAME_MAJOR_VERSION)
  private Integer majorVersion;

  public static final String SERIALIZED_NAME_MINOR_VERSION = "minor_version";
  @SerializedName(SERIALIZED_NAME_MINOR_VERSION)
  private Integer minorVersion;

  public static final String SERIALIZED_NAME_MIN_SUPPORTED_MAJOR_VERSION = "min_supported_major_version";
  @SerializedName(SERIALIZED_NAME_MIN_SUPPORTED_MAJOR_VERSION)
  private Integer minSupportedMajorVersion;

  public static final String SERIALIZED_NAME_MIN_SUPPORTED_MINOR_VERSION = "min_supported_minor_version";
  @SerializedName(SERIALIZED_NAME_MIN_SUPPORTED_MINOR_VERSION)
  private Integer minSupportedMinorVersion;

  public static final String SERIALIZED_NAME_MAX_SUPPORTED_MAJOR_VERSION = "max_supported_major_version";
  @SerializedName(SERIALIZED_NAME_MAX_SUPPORTED_MAJOR_VERSION)
  private Integer maxSupportedMajorVersion;

  public static final String SERIALIZED_NAME_MAX_SUPPORTED_MINOR_VERSION = "max_supported_minor_version";
  @SerializedName(SERIALIZED_NAME_MAX_SUPPORTED_MINOR_VERSION)
  private Integer maxSupportedMinorVersion;

  public static final String SERIALIZED_NAME_COMPATIBLE = "compatible";
  @SerializedName(SERIALIZED_NAME_COMPATIBLE)
  private Boolean compatible;

  public MetadataDbInfo() {
  }

  public MetadataDbInfo external(Boolean external) {
    this.external = external;
    return this;
  }

   /**
   * True if an external database, i.e a database running outside of the application cluster, is in use.
   * @return external
  **/
  @javax.annotation.Nullable
  public Boolean getExternal() {
    return external;
  }

  public void setExternal(Boolean external) {
    this.external = external;
  }


  public MetadataDbInfo version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The full database version in String format
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public MetadataDbInfo databaseProductName(String databaseProductName) {
    this.databaseProductName = databaseProductName;
    return this;
  }

   /**
   * The database product name as reported by the database itself.
   * @return databaseProductName
  **/
  @javax.annotation.Nullable
  public String getDatabaseProductName() {
    return databaseProductName;
  }

  public void setDatabaseProductName(String databaseProductName) {
    this.databaseProductName = databaseProductName;
  }


  public MetadataDbInfo majorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
    return this;
  }

   /**
   * The database major version.
   * @return majorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMajorVersion() {
    return majorVersion;
  }

  public void setMajorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
  }


  public MetadataDbInfo minorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

   /**
   * The database minor version
   * @return minorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMinorVersion() {
    return minorVersion;
  }

  public void setMinorVersion(Integer minorVersion) {
    this.minorVersion = minorVersion;
  }


  public MetadataDbInfo minSupportedMajorVersion(Integer minSupportedMajorVersion) {
    this.minSupportedMajorVersion = minSupportedMajorVersion;
    return this;
  }

   /**
   * The minimum supported major version of PostgreSQL.
   * @return minSupportedMajorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMinSupportedMajorVersion() {
    return minSupportedMajorVersion;
  }

  public void setMinSupportedMajorVersion(Integer minSupportedMajorVersion) {
    this.minSupportedMajorVersion = minSupportedMajorVersion;
  }


  public MetadataDbInfo minSupportedMinorVersion(Integer minSupportedMinorVersion) {
    this.minSupportedMinorVersion = minSupportedMinorVersion;
    return this;
  }

   /**
   * The minimum supported minor version of PostgreSQL.
   * @return minSupportedMinorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMinSupportedMinorVersion() {
    return minSupportedMinorVersion;
  }

  public void setMinSupportedMinorVersion(Integer minSupportedMinorVersion) {
    this.minSupportedMinorVersion = minSupportedMinorVersion;
  }


  public MetadataDbInfo maxSupportedMajorVersion(Integer maxSupportedMajorVersion) {
    this.maxSupportedMajorVersion = maxSupportedMajorVersion;
    return this;
  }

   /**
   * The maximum supported major version of PostgreSQL.
   * @return maxSupportedMajorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMaxSupportedMajorVersion() {
    return maxSupportedMajorVersion;
  }

  public void setMaxSupportedMajorVersion(Integer maxSupportedMajorVersion) {
    this.maxSupportedMajorVersion = maxSupportedMajorVersion;
  }


  public MetadataDbInfo maxSupportedMinorVersion(Integer maxSupportedMinorVersion) {
    this.maxSupportedMinorVersion = maxSupportedMinorVersion;
    return this;
  }

   /**
   * The maximum supported minor version of PostgreSQL.
   * @return maxSupportedMinorVersion
  **/
  @javax.annotation.Nullable
  public Integer getMaxSupportedMinorVersion() {
    return maxSupportedMinorVersion;
  }

  public void setMaxSupportedMinorVersion(Integer maxSupportedMinorVersion) {
    this.maxSupportedMinorVersion = maxSupportedMinorVersion;
  }


  public MetadataDbInfo compatible(Boolean compatible) {
    this.compatible = compatible;
    return this;
  }

   /**
   * Whether the database is recognized as valid for this product. In order to be compatible, the database product name must be a recognized PostgreSQL and the database version must be greater than or equal to the minimum minor version and smaller than or equal to the maximum support version.
   * @return compatible
  **/
  @javax.annotation.Nullable
  public Boolean getCompatible() {
    return compatible;
  }

  public void setCompatible(Boolean compatible) {
    this.compatible = compatible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataDbInfo metadataDbInfo = (MetadataDbInfo) o;
    return Objects.equals(this.external, metadataDbInfo.external) &&
        Objects.equals(this.version, metadataDbInfo.version) &&
        Objects.equals(this.databaseProductName, metadataDbInfo.databaseProductName) &&
        Objects.equals(this.majorVersion, metadataDbInfo.majorVersion) &&
        Objects.equals(this.minorVersion, metadataDbInfo.minorVersion) &&
        Objects.equals(this.minSupportedMajorVersion, metadataDbInfo.minSupportedMajorVersion) &&
        Objects.equals(this.minSupportedMinorVersion, metadataDbInfo.minSupportedMinorVersion) &&
        Objects.equals(this.maxSupportedMajorVersion, metadataDbInfo.maxSupportedMajorVersion) &&
        Objects.equals(this.maxSupportedMinorVersion, metadataDbInfo.maxSupportedMinorVersion) &&
        Objects.equals(this.compatible, metadataDbInfo.compatible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(external, version, databaseProductName, majorVersion, minorVersion, minSupportedMajorVersion, minSupportedMinorVersion, maxSupportedMajorVersion, maxSupportedMinorVersion, compatible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataDbInfo {\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    databaseProductName: ").append(toIndentedString(databaseProductName)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("    minorVersion: ").append(toIndentedString(minorVersion)).append("\n");
    sb.append("    minSupportedMajorVersion: ").append(toIndentedString(minSupportedMajorVersion)).append("\n");
    sb.append("    minSupportedMinorVersion: ").append(toIndentedString(minSupportedMinorVersion)).append("\n");
    sb.append("    maxSupportedMajorVersion: ").append(toIndentedString(maxSupportedMajorVersion)).append("\n");
    sb.append("    maxSupportedMinorVersion: ").append(toIndentedString(maxSupportedMinorVersion)).append("\n");
    sb.append("    compatible: ").append(toIndentedString(compatible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("external");
    openapiFields.add("version");
    openapiFields.add("database_product_name");
    openapiFields.add("major_version");
    openapiFields.add("minor_version");
    openapiFields.add("min_supported_major_version");
    openapiFields.add("min_supported_minor_version");
    openapiFields.add("max_supported_major_version");
    openapiFields.add("max_supported_minor_version");
    openapiFields.add("compatible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MetadataDbInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetadataDbInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataDbInfo is not found in the empty JSON string", MetadataDbInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetadataDbInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetadataDbInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("database_product_name") != null && !jsonObj.get("database_product_name").isJsonNull()) && !jsonObj.get("database_product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_product_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataDbInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataDbInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataDbInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataDbInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataDbInfo>() {
           @Override
           public void write(JsonWriter out, MetadataDbInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataDbInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetadataDbInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetadataDbInfo
  * @throws IOException if the JSON string is invalid with respect to MetadataDbInfo
  */
  public static MetadataDbInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataDbInfo.class);
  }

 /**
  * Convert an instance of MetadataDbInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

