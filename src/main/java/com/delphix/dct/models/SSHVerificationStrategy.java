/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Mechanism to use for ssh host verification.
 */
@ApiModel(description = "Mechanism to use for ssh host verification.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-19T17:08:49.349376+05:30[Asia/Kolkata]")
public class SSHVerificationStrategy {
  /**
   * The name of the verification strategy.
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    RAW_KEY("RAW_KEY"),
    
    FINGERPRINT("FINGERPRINT"),
    
    ACCEPT_ALWAYS("ACCEPT_ALWAYS");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  /**
   * The type of SSH key.
   */
  @JsonAdapter(KeyTypeEnum.Adapter.class)
  public enum KeyTypeEnum {
    RSA("RSA"),
    
    DSA("DSA"),
    
    ECDSA("ECDSA"),
    
    ED25519("ED25519");

    private String value;

    KeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyTypeEnum fromValue(String value) {
      for (KeyTypeEnum b : KeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_KEY_TYPE = "key_type";
  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  private KeyTypeEnum keyType;

  public static final String SERIALIZED_NAME_RAW_KEY = "raw_key";
  @SerializedName(SERIALIZED_NAME_RAW_KEY)
  private String rawKey;

  /**
   * Hash function for the fingerprint for FINGERPRINT verification.
   */
  @JsonAdapter(FingerprintTypeEnum.Adapter.class)
  public enum FingerprintTypeEnum {
    SHA256("SHA256"),
    
    SHA512("SHA512");

    private String value;

    FingerprintTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FingerprintTypeEnum fromValue(String value) {
      for (FingerprintTypeEnum b : FingerprintTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FingerprintTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FingerprintTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FingerprintTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FingerprintTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FINGERPRINT_TYPE = "fingerprint_type";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_TYPE)
  private FingerprintTypeEnum fingerprintType;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;


  public SSHVerificationStrategy name(NameEnum name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the verification strategy.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the verification strategy.")

  public NameEnum getName() {
    return name;
  }


  public void setName(NameEnum name) {
    this.name = name;
  }


  public SSHVerificationStrategy keyType(KeyTypeEnum keyType) {
    
    this.keyType = keyType;
    return this;
  }

   /**
   * The type of SSH key.
   * @return keyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of SSH key.")

  public KeyTypeEnum getKeyType() {
    return keyType;
  }


  public void setKeyType(KeyTypeEnum keyType) {
    this.keyType = keyType;
  }


  public SSHVerificationStrategy rawKey(String rawKey) {
    
    this.rawKey = rawKey;
    return this;
  }

   /**
   * Base64-encoded ssh key of the host for RAW_KEY verification.
   * @return rawKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base64-encoded ssh key of the host for RAW_KEY verification.")

  public String getRawKey() {
    return rawKey;
  }


  public void setRawKey(String rawKey) {
    this.rawKey = rawKey;
  }


  public SSHVerificationStrategy fingerprintType(FingerprintTypeEnum fingerprintType) {
    
    this.fingerprintType = fingerprintType;
    return this;
  }

   /**
   * Hash function for the fingerprint for FINGERPRINT verification.
   * @return fingerprintType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hash function for the fingerprint for FINGERPRINT verification.")

  public FingerprintTypeEnum getFingerprintType() {
    return fingerprintType;
  }


  public void setFingerprintType(FingerprintTypeEnum fingerprintType) {
    this.fingerprintType = fingerprintType;
  }


  public SSHVerificationStrategy fingerprint(String fingerprint) {
    
    this.fingerprint = fingerprint;
    return this;
  }

   /**
   * Base-64 encoded fingerprint of the ssh key of the host for FINGERPRINT verification.
   * @return fingerprint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base-64 encoded fingerprint of the ssh key of the host for FINGERPRINT verification.")

  public String getFingerprint() {
    return fingerprint;
  }


  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSHVerificationStrategy ssHVerificationStrategy = (SSHVerificationStrategy) o;
    return Objects.equals(this.name, ssHVerificationStrategy.name) &&
        Objects.equals(this.keyType, ssHVerificationStrategy.keyType) &&
        Objects.equals(this.rawKey, ssHVerificationStrategy.rawKey) &&
        Objects.equals(this.fingerprintType, ssHVerificationStrategy.fingerprintType) &&
        Objects.equals(this.fingerprint, ssHVerificationStrategy.fingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, keyType, rawKey, fingerprintType, fingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSHVerificationStrategy {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    rawKey: ").append(toIndentedString(rawKey)).append("\n");
    sb.append("    fingerprintType: ").append(toIndentedString(fingerprintType)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

