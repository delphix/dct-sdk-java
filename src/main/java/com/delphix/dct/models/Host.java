/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.OracleClusterNodeInstance;
import com.delphix.dct.models.OracleVirtualIP;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A physical/virtual server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Host {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_OS_NAME = "os_name";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "os_version";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_MEMORY_SIZE = "memory_size";
  @SerializedName(SERIALIZED_NAME_MEMORY_SIZE)
  private Long memorySize;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_AVAILABLE_TIMESTAMP = "available_timestamp";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_TIMESTAMP)
  private OffsetDateTime availableTimestamp;

  public static final String SERIALIZED_NAME_NOT_AVAILABLE_REASON = "not_available_reason";
  @SerializedName(SERIALIZED_NAME_NOT_AVAILABLE_REASON)
  private String notAvailableReason;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_REFERENCE = "oracle_cluster_node_reference";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_REFERENCE)
  private String oracleClusterNodeReference;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_NAME = "oracle_cluster_node_name";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_NAME)
  private String oracleClusterNodeName;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_ENABLED = "oracle_cluster_node_enabled";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_ENABLED)
  private Boolean oracleClusterNodeEnabled;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_DISCOVERED = "oracle_cluster_node_discovered";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_DISCOVERED)
  private Boolean oracleClusterNodeDiscovered;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_VIRTUAL_IPS = "oracle_cluster_node_virtual_ips";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_VIRTUAL_IPS)
  private List<OracleVirtualIP> oracleClusterNodeVirtualIps;

  public static final String SERIALIZED_NAME_ORACLE_CLUSTER_NODE_INSTANCES = "oracle_cluster_node_instances";
  @SerializedName(SERIALIZED_NAME_ORACLE_CLUSTER_NODE_INSTANCES)
  private List<OracleClusterNodeInstance> oracleClusterNodeInstances;

  public static final String SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_REFERENCE = "windows_cluster_node_reference";
  @SerializedName(SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_REFERENCE)
  private String windowsClusterNodeReference;

  public static final String SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_NAME = "windows_cluster_node_name";
  @SerializedName(SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_NAME)
  private String windowsClusterNodeName;

  public static final String SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_DISCOVERED = "windows_cluster_node_discovered";
  @SerializedName(SERIALIZED_NAME_WINDOWS_CLUSTER_NODE_DISCOVERED)
  private Boolean windowsClusterNodeDiscovered;

  public static final String SERIALIZED_NAME_NFS_ADDRESSES = "nfs_addresses";
  @SerializedName(SERIALIZED_NAME_NFS_ADDRESSES)
  private Set<String> nfsAddresses;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_ALIAS = "dsp_keystore_alias";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_ALIAS)
  private String dspKeystoreAlias;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_PATH = "dsp_keystore_path";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_PATH)
  private String dspKeystorePath;

  public static final String SERIALIZED_NAME_DSP_TRUSTSTORE_PATH = "dsp_truststore_path";
  @SerializedName(SERIALIZED_NAME_DSP_TRUSTSTORE_PATH)
  private String dspTruststorePath;

  public static final String SERIALIZED_NAME_JAVA_HOME = "java_home";
  @SerializedName(SERIALIZED_NAME_JAVA_HOME)
  private String javaHome;

  public static final String SERIALIZED_NAME_SSH_PORT = "ssh_port";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Integer sshPort;

  public static final String SERIALIZED_NAME_TOOLKIT_PATH = "toolkit_path";
  @SerializedName(SERIALIZED_NAME_TOOLKIT_PATH)
  private String toolkitPath;

  public static final String SERIALIZED_NAME_ORACLE_TDE_KEYSTORES_ROOT_PATH = "oracle_tde_keystores_root_path";
  @SerializedName(SERIALIZED_NAME_ORACLE_TDE_KEYSTORES_ROOT_PATH)
  private String oracleTdeKeystoresRootPath;

  public static final String SERIALIZED_NAME_PROCESSOR_TYPE = "processor_type";
  @SerializedName(SERIALIZED_NAME_PROCESSOR_TYPE)
  private String processorType;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public Host() {
  }

  public Host id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The entity ID of this Host.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Host hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname or IP address of this host.
   * @return hostname
  **/
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public Host osName(String osName) {
    this.osName = osName;
    return this;
  }

   /**
   * The name of the OS on this host.
   * @return osName
  **/
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public Host osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

   /**
   * The version of the OS on this host.
   * @return osVersion
  **/
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public Host memorySize(Long memorySize) {
    this.memorySize = memorySize;
    return this;
  }

   /**
   * The total amount of memory on this host in bytes.
   * @return memorySize
  **/
  @javax.annotation.Nullable
  public Long getMemorySize() {
    return memorySize;
  }

  public void setMemorySize(Long memorySize) {
    this.memorySize = memorySize;
  }


  public Host available(Boolean available) {
    this.available = available;
    return this;
  }

   /**
   * True if the host is up and a connection can be established from the engine.
   * @return available
  **/
  @javax.annotation.Nullable
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public Host availableTimestamp(OffsetDateTime availableTimestamp) {
    this.availableTimestamp = availableTimestamp;
    return this;
  }

   /**
   * The last time the available property was updated.
   * @return availableTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAvailableTimestamp() {
    return availableTimestamp;
  }

  public void setAvailableTimestamp(OffsetDateTime availableTimestamp) {
    this.availableTimestamp = availableTimestamp;
  }


  public Host notAvailableReason(String notAvailableReason) {
    this.notAvailableReason = notAvailableReason;
    return this;
  }

   /**
   * The reason why the host is not available.
   * @return notAvailableReason
  **/
  @javax.annotation.Nullable
  public String getNotAvailableReason() {
    return notAvailableReason;
  }

  public void setNotAvailableReason(String notAvailableReason) {
    this.notAvailableReason = notAvailableReason;
  }


  public Host oracleClusterNodeReference(String oracleClusterNodeReference) {
    this.oracleClusterNodeReference = oracleClusterNodeReference;
    return this;
  }

   /**
   * The reference to the associated OracleClusterNode.
   * @return oracleClusterNodeReference
  **/
  @javax.annotation.Nullable
  public String getOracleClusterNodeReference() {
    return oracleClusterNodeReference;
  }

  public void setOracleClusterNodeReference(String oracleClusterNodeReference) {
    this.oracleClusterNodeReference = oracleClusterNodeReference;
  }


  public Host oracleClusterNodeName(String oracleClusterNodeName) {
    this.oracleClusterNodeName = oracleClusterNodeName;
    return this;
  }

   /**
   * The name of the associated OracleClusterNode.
   * @return oracleClusterNodeName
  **/
  @javax.annotation.Nullable
  public String getOracleClusterNodeName() {
    return oracleClusterNodeName;
  }

  public void setOracleClusterNodeName(String oracleClusterNodeName) {
    this.oracleClusterNodeName = oracleClusterNodeName;
  }


  public Host oracleClusterNodeEnabled(Boolean oracleClusterNodeEnabled) {
    this.oracleClusterNodeEnabled = oracleClusterNodeEnabled;
    return this;
  }

   /**
   * Whether the associated OracleClusterNode is enabled.
   * @return oracleClusterNodeEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getOracleClusterNodeEnabled() {
    return oracleClusterNodeEnabled;
  }

  public void setOracleClusterNodeEnabled(Boolean oracleClusterNodeEnabled) {
    this.oracleClusterNodeEnabled = oracleClusterNodeEnabled;
  }


  public Host oracleClusterNodeDiscovered(Boolean oracleClusterNodeDiscovered) {
    this.oracleClusterNodeDiscovered = oracleClusterNodeDiscovered;
    return this;
  }

   /**
   * Whether the associated OracleClusterNode was discovered.
   * @return oracleClusterNodeDiscovered
  **/
  @javax.annotation.Nullable
  public Boolean getOracleClusterNodeDiscovered() {
    return oracleClusterNodeDiscovered;
  }

  public void setOracleClusterNodeDiscovered(Boolean oracleClusterNodeDiscovered) {
    this.oracleClusterNodeDiscovered = oracleClusterNodeDiscovered;
  }


  public Host oracleClusterNodeVirtualIps(List<OracleVirtualIP> oracleClusterNodeVirtualIps) {
    this.oracleClusterNodeVirtualIps = oracleClusterNodeVirtualIps;
    return this;
  }

  public Host addOracleClusterNodeVirtualIpsItem(OracleVirtualIP oracleClusterNodeVirtualIpsItem) {
    if (this.oracleClusterNodeVirtualIps == null) {
      this.oracleClusterNodeVirtualIps = new ArrayList<>();
    }
    this.oracleClusterNodeVirtualIps.add(oracleClusterNodeVirtualIpsItem);
    return this;
  }

   /**
   * The Virtual IP addresses associated with the OracleClusterNode.
   * @return oracleClusterNodeVirtualIps
  **/
  @javax.annotation.Nullable
  public List<OracleVirtualIP> getOracleClusterNodeVirtualIps() {
    return oracleClusterNodeVirtualIps;
  }

  public void setOracleClusterNodeVirtualIps(List<OracleVirtualIP> oracleClusterNodeVirtualIps) {
    this.oracleClusterNodeVirtualIps = oracleClusterNodeVirtualIps;
  }


  public Host oracleClusterNodeInstances(List<OracleClusterNodeInstance> oracleClusterNodeInstances) {
    this.oracleClusterNodeInstances = oracleClusterNodeInstances;
    return this;
  }

  public Host addOracleClusterNodeInstancesItem(OracleClusterNodeInstance oracleClusterNodeInstancesItem) {
    if (this.oracleClusterNodeInstances == null) {
      this.oracleClusterNodeInstances = new ArrayList<>();
    }
    this.oracleClusterNodeInstances.add(oracleClusterNodeInstancesItem);
    return this;
  }

   /**
   * The instances associated with the OracleClusterNode.
   * @return oracleClusterNodeInstances
  **/
  @javax.annotation.Nullable
  public List<OracleClusterNodeInstance> getOracleClusterNodeInstances() {
    return oracleClusterNodeInstances;
  }

  public void setOracleClusterNodeInstances(List<OracleClusterNodeInstance> oracleClusterNodeInstances) {
    this.oracleClusterNodeInstances = oracleClusterNodeInstances;
  }


  public Host windowsClusterNodeReference(String windowsClusterNodeReference) {
    this.windowsClusterNodeReference = windowsClusterNodeReference;
    return this;
  }

   /**
   * The reference to the associated WindowsClusterNode.
   * @return windowsClusterNodeReference
  **/
  @javax.annotation.Nullable
  public String getWindowsClusterNodeReference() {
    return windowsClusterNodeReference;
  }

  public void setWindowsClusterNodeReference(String windowsClusterNodeReference) {
    this.windowsClusterNodeReference = windowsClusterNodeReference;
  }


  public Host windowsClusterNodeName(String windowsClusterNodeName) {
    this.windowsClusterNodeName = windowsClusterNodeName;
    return this;
  }

   /**
   * The name of the associated WindowsClusterNode.
   * @return windowsClusterNodeName
  **/
  @javax.annotation.Nullable
  public String getWindowsClusterNodeName() {
    return windowsClusterNodeName;
  }

  public void setWindowsClusterNodeName(String windowsClusterNodeName) {
    this.windowsClusterNodeName = windowsClusterNodeName;
  }


  public Host windowsClusterNodeDiscovered(Boolean windowsClusterNodeDiscovered) {
    this.windowsClusterNodeDiscovered = windowsClusterNodeDiscovered;
    return this;
  }

   /**
   * Whether the associated Windows cluster node was discovered.
   * @return windowsClusterNodeDiscovered
  **/
  @javax.annotation.Nullable
  public Boolean getWindowsClusterNodeDiscovered() {
    return windowsClusterNodeDiscovered;
  }

  public void setWindowsClusterNodeDiscovered(Boolean windowsClusterNodeDiscovered) {
    this.windowsClusterNodeDiscovered = windowsClusterNodeDiscovered;
  }


  public Host nfsAddresses(Set<String> nfsAddresses) {
    this.nfsAddresses = nfsAddresses;
    return this;
  }

  public Host addNfsAddressesItem(String nfsAddressesItem) {
    if (this.nfsAddresses == null) {
      this.nfsAddresses = new LinkedHashSet<>();
    }
    this.nfsAddresses.add(nfsAddressesItem);
    return this;
  }

   /**
   * The list of host/IP addresses to use for NFS export.
   * @return nfsAddresses
  **/
  @javax.annotation.Nullable
  public Set<String> getNfsAddresses() {
    return nfsAddresses;
  }

  public void setNfsAddresses(Set<String> nfsAddresses) {
    this.nfsAddresses = nfsAddresses;
  }


  public Host dspKeystoreAlias(String dspKeystoreAlias) {
    this.dspKeystoreAlias = dspKeystoreAlias;
    return this;
  }

   /**
   * The lowercase alias to use inside the user managed DSP keystore.
   * @return dspKeystoreAlias
  **/
  @javax.annotation.Nullable
  public String getDspKeystoreAlias() {
    return dspKeystoreAlias;
  }

  public void setDspKeystoreAlias(String dspKeystoreAlias) {
    this.dspKeystoreAlias = dspKeystoreAlias;
  }


  public Host dspKeystorePath(String dspKeystorePath) {
    this.dspKeystorePath = dspKeystorePath;
    return this;
  }

   /**
   * The path to the user managed DSP keystore.
   * @return dspKeystorePath
  **/
  @javax.annotation.Nullable
  public String getDspKeystorePath() {
    return dspKeystorePath;
  }

  public void setDspKeystorePath(String dspKeystorePath) {
    this.dspKeystorePath = dspKeystorePath;
  }


  public Host dspTruststorePath(String dspTruststorePath) {
    this.dspTruststorePath = dspTruststorePath;
    return this;
  }

   /**
   * The path to the user managed DSP truststore.
   * @return dspTruststorePath
  **/
  @javax.annotation.Nullable
  public String getDspTruststorePath() {
    return dspTruststorePath;
  }

  public void setDspTruststorePath(String dspTruststorePath) {
    this.dspTruststorePath = dspTruststorePath;
  }


  public Host javaHome(String javaHome) {
    this.javaHome = javaHome;
    return this;
  }

   /**
   * The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used.
   * @return javaHome
  **/
  @javax.annotation.Nullable
  public String getJavaHome() {
    return javaHome;
  }

  public void setJavaHome(String javaHome) {
    this.javaHome = javaHome;
  }


  public Host sshPort(Integer sshPort) {
    this.sshPort = sshPort;
    return this;
  }

   /**
   * The port number used to connect to the host via SSH.
   * @return sshPort
  **/
  @javax.annotation.Nullable
  public Integer getSshPort() {
    return sshPort;
  }

  public void setSshPort(Integer sshPort) {
    this.sshPort = sshPort;
  }


  public Host toolkitPath(String toolkitPath) {
    this.toolkitPath = toolkitPath;
    return this;
  }

   /**
   * The path for the toolkit that resides on the host.
   * @return toolkitPath
  **/
  @javax.annotation.Nullable
  public String getToolkitPath() {
    return toolkitPath;
  }

  public void setToolkitPath(String toolkitPath) {
    this.toolkitPath = toolkitPath;
  }


  public Host oracleTdeKeystoresRootPath(String oracleTdeKeystoresRootPath) {
    this.oracleTdeKeystoresRootPath = oracleTdeKeystoresRootPath;
    return this;
  }

   /**
   * The path to the root of the Oracle TDE keystores artifact directories.
   * @return oracleTdeKeystoresRootPath
  **/
  @javax.annotation.Nullable
  public String getOracleTdeKeystoresRootPath() {
    return oracleTdeKeystoresRootPath;
  }

  public void setOracleTdeKeystoresRootPath(String oracleTdeKeystoresRootPath) {
    this.oracleTdeKeystoresRootPath = oracleTdeKeystoresRootPath;
  }


  public Host processorType(String processorType) {
    this.processorType = processorType;
    return this;
  }

   /**
   * The platform for the host machine.
   * @return processorType
  **/
  @javax.annotation.Nullable
  public String getProcessorType() {
    return processorType;
  }

  public void setProcessorType(String processorType) {
    this.processorType = processorType;
  }


  public Host timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * The OS timezone.
   * @return timezone
  **/
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Host host = (Host) o;
    return Objects.equals(this.id, host.id) &&
        Objects.equals(this.hostname, host.hostname) &&
        Objects.equals(this.osName, host.osName) &&
        Objects.equals(this.osVersion, host.osVersion) &&
        Objects.equals(this.memorySize, host.memorySize) &&
        Objects.equals(this.available, host.available) &&
        Objects.equals(this.availableTimestamp, host.availableTimestamp) &&
        Objects.equals(this.notAvailableReason, host.notAvailableReason) &&
        Objects.equals(this.oracleClusterNodeReference, host.oracleClusterNodeReference) &&
        Objects.equals(this.oracleClusterNodeName, host.oracleClusterNodeName) &&
        Objects.equals(this.oracleClusterNodeEnabled, host.oracleClusterNodeEnabled) &&
        Objects.equals(this.oracleClusterNodeDiscovered, host.oracleClusterNodeDiscovered) &&
        Objects.equals(this.oracleClusterNodeVirtualIps, host.oracleClusterNodeVirtualIps) &&
        Objects.equals(this.oracleClusterNodeInstances, host.oracleClusterNodeInstances) &&
        Objects.equals(this.windowsClusterNodeReference, host.windowsClusterNodeReference) &&
        Objects.equals(this.windowsClusterNodeName, host.windowsClusterNodeName) &&
        Objects.equals(this.windowsClusterNodeDiscovered, host.windowsClusterNodeDiscovered) &&
        Objects.equals(this.nfsAddresses, host.nfsAddresses) &&
        Objects.equals(this.dspKeystoreAlias, host.dspKeystoreAlias) &&
        Objects.equals(this.dspKeystorePath, host.dspKeystorePath) &&
        Objects.equals(this.dspTruststorePath, host.dspTruststorePath) &&
        Objects.equals(this.javaHome, host.javaHome) &&
        Objects.equals(this.sshPort, host.sshPort) &&
        Objects.equals(this.toolkitPath, host.toolkitPath) &&
        Objects.equals(this.oracleTdeKeystoresRootPath, host.oracleTdeKeystoresRootPath) &&
        Objects.equals(this.processorType, host.processorType) &&
        Objects.equals(this.timezone, host.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hostname, osName, osVersion, memorySize, available, availableTimestamp, notAvailableReason, oracleClusterNodeReference, oracleClusterNodeName, oracleClusterNodeEnabled, oracleClusterNodeDiscovered, oracleClusterNodeVirtualIps, oracleClusterNodeInstances, windowsClusterNodeReference, windowsClusterNodeName, windowsClusterNodeDiscovered, nfsAddresses, dspKeystoreAlias, dspKeystorePath, dspTruststorePath, javaHome, sshPort, toolkitPath, oracleTdeKeystoresRootPath, processorType, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Host {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    memorySize: ").append(toIndentedString(memorySize)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    availableTimestamp: ").append(toIndentedString(availableTimestamp)).append("\n");
    sb.append("    notAvailableReason: ").append(toIndentedString(notAvailableReason)).append("\n");
    sb.append("    oracleClusterNodeReference: ").append(toIndentedString(oracleClusterNodeReference)).append("\n");
    sb.append("    oracleClusterNodeName: ").append(toIndentedString(oracleClusterNodeName)).append("\n");
    sb.append("    oracleClusterNodeEnabled: ").append(toIndentedString(oracleClusterNodeEnabled)).append("\n");
    sb.append("    oracleClusterNodeDiscovered: ").append(toIndentedString(oracleClusterNodeDiscovered)).append("\n");
    sb.append("    oracleClusterNodeVirtualIps: ").append(toIndentedString(oracleClusterNodeVirtualIps)).append("\n");
    sb.append("    oracleClusterNodeInstances: ").append(toIndentedString(oracleClusterNodeInstances)).append("\n");
    sb.append("    windowsClusterNodeReference: ").append(toIndentedString(windowsClusterNodeReference)).append("\n");
    sb.append("    windowsClusterNodeName: ").append(toIndentedString(windowsClusterNodeName)).append("\n");
    sb.append("    windowsClusterNodeDiscovered: ").append(toIndentedString(windowsClusterNodeDiscovered)).append("\n");
    sb.append("    nfsAddresses: ").append(toIndentedString(nfsAddresses)).append("\n");
    sb.append("    dspKeystoreAlias: ").append(toIndentedString(dspKeystoreAlias)).append("\n");
    sb.append("    dspKeystorePath: ").append(toIndentedString(dspKeystorePath)).append("\n");
    sb.append("    dspTruststorePath: ").append(toIndentedString(dspTruststorePath)).append("\n");
    sb.append("    javaHome: ").append(toIndentedString(javaHome)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    toolkitPath: ").append(toIndentedString(toolkitPath)).append("\n");
    sb.append("    oracleTdeKeystoresRootPath: ").append(toIndentedString(oracleTdeKeystoresRootPath)).append("\n");
    sb.append("    processorType: ").append(toIndentedString(processorType)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("hostname");
    openapiFields.add("os_name");
    openapiFields.add("os_version");
    openapiFields.add("memory_size");
    openapiFields.add("available");
    openapiFields.add("available_timestamp");
    openapiFields.add("not_available_reason");
    openapiFields.add("oracle_cluster_node_reference");
    openapiFields.add("oracle_cluster_node_name");
    openapiFields.add("oracle_cluster_node_enabled");
    openapiFields.add("oracle_cluster_node_discovered");
    openapiFields.add("oracle_cluster_node_virtual_ips");
    openapiFields.add("oracle_cluster_node_instances");
    openapiFields.add("windows_cluster_node_reference");
    openapiFields.add("windows_cluster_node_name");
    openapiFields.add("windows_cluster_node_discovered");
    openapiFields.add("nfs_addresses");
    openapiFields.add("dsp_keystore_alias");
    openapiFields.add("dsp_keystore_path");
    openapiFields.add("dsp_truststore_path");
    openapiFields.add("java_home");
    openapiFields.add("ssh_port");
    openapiFields.add("toolkit_path");
    openapiFields.add("oracle_tde_keystores_root_path");
    openapiFields.add("processor_type");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Host
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Host.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Host is not found in the empty JSON string", Host.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Host.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Host` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("os_name") != null && !jsonObj.get("os_name").isJsonNull()) && !jsonObj.get("os_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_name").toString()));
      }
      if ((jsonObj.get("os_version") != null && !jsonObj.get("os_version").isJsonNull()) && !jsonObj.get("os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_version").toString()));
      }
      if ((jsonObj.get("not_available_reason") != null && !jsonObj.get("not_available_reason").isJsonNull()) && !jsonObj.get("not_available_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `not_available_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("not_available_reason").toString()));
      }
      if ((jsonObj.get("oracle_cluster_node_reference") != null && !jsonObj.get("oracle_cluster_node_reference").isJsonNull()) && !jsonObj.get("oracle_cluster_node_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_cluster_node_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_cluster_node_reference").toString()));
      }
      if ((jsonObj.get("oracle_cluster_node_name") != null && !jsonObj.get("oracle_cluster_node_name").isJsonNull()) && !jsonObj.get("oracle_cluster_node_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_cluster_node_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_cluster_node_name").toString()));
      }
      if (jsonObj.get("oracle_cluster_node_virtual_ips") != null && !jsonObj.get("oracle_cluster_node_virtual_ips").isJsonNull()) {
        JsonArray jsonArrayoracleClusterNodeVirtualIps = jsonObj.getAsJsonArray("oracle_cluster_node_virtual_ips");
        if (jsonArrayoracleClusterNodeVirtualIps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oracle_cluster_node_virtual_ips").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oracle_cluster_node_virtual_ips` to be an array in the JSON string but got `%s`", jsonObj.get("oracle_cluster_node_virtual_ips").toString()));
          }

          // validate the optional field `oracle_cluster_node_virtual_ips` (array)
          for (int i = 0; i < jsonArrayoracleClusterNodeVirtualIps.size(); i++) {
            OracleVirtualIP.validateJsonElement(jsonArrayoracleClusterNodeVirtualIps.get(i));
          };
        }
      }
      if (jsonObj.get("oracle_cluster_node_instances") != null && !jsonObj.get("oracle_cluster_node_instances").isJsonNull()) {
        JsonArray jsonArrayoracleClusterNodeInstances = jsonObj.getAsJsonArray("oracle_cluster_node_instances");
        if (jsonArrayoracleClusterNodeInstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("oracle_cluster_node_instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `oracle_cluster_node_instances` to be an array in the JSON string but got `%s`", jsonObj.get("oracle_cluster_node_instances").toString()));
          }

          // validate the optional field `oracle_cluster_node_instances` (array)
          for (int i = 0; i < jsonArrayoracleClusterNodeInstances.size(); i++) {
            OracleClusterNodeInstance.validateJsonElement(jsonArrayoracleClusterNodeInstances.get(i));
          };
        }
      }
      if ((jsonObj.get("windows_cluster_node_reference") != null && !jsonObj.get("windows_cluster_node_reference").isJsonNull()) && !jsonObj.get("windows_cluster_node_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windows_cluster_node_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windows_cluster_node_reference").toString()));
      }
      if ((jsonObj.get("windows_cluster_node_name") != null && !jsonObj.get("windows_cluster_node_name").isJsonNull()) && !jsonObj.get("windows_cluster_node_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windows_cluster_node_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windows_cluster_node_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nfs_addresses") != null && !jsonObj.get("nfs_addresses").isJsonNull() && !jsonObj.get("nfs_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfs_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("nfs_addresses").toString()));
      }
      if ((jsonObj.get("dsp_keystore_alias") != null && !jsonObj.get("dsp_keystore_alias").isJsonNull()) && !jsonObj.get("dsp_keystore_alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_keystore_alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_keystore_alias").toString()));
      }
      if ((jsonObj.get("dsp_keystore_path") != null && !jsonObj.get("dsp_keystore_path").isJsonNull()) && !jsonObj.get("dsp_keystore_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_keystore_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_keystore_path").toString()));
      }
      if ((jsonObj.get("dsp_truststore_path") != null && !jsonObj.get("dsp_truststore_path").isJsonNull()) && !jsonObj.get("dsp_truststore_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_truststore_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_truststore_path").toString()));
      }
      if ((jsonObj.get("java_home") != null && !jsonObj.get("java_home").isJsonNull()) && !jsonObj.get("java_home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `java_home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("java_home").toString()));
      }
      if ((jsonObj.get("toolkit_path") != null && !jsonObj.get("toolkit_path").isJsonNull()) && !jsonObj.get("toolkit_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolkit_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolkit_path").toString()));
      }
      if ((jsonObj.get("oracle_tde_keystores_root_path") != null && !jsonObj.get("oracle_tde_keystores_root_path").isJsonNull()) && !jsonObj.get("oracle_tde_keystores_root_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_tde_keystores_root_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_tde_keystores_root_path").toString()));
      }
      if ((jsonObj.get("processor_type") != null && !jsonObj.get("processor_type").isJsonNull()) && !jsonObj.get("processor_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processor_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processor_type").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Host.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Host' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Host> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Host.class));

       return (TypeAdapter<T>) new TypeAdapter<Host>() {
           @Override
           public void write(JsonWriter out, Host value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Host read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Host given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Host
  * @throws IOException if the JSON string is invalid with respect to Host
  */
  public static Host fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Host.class);
  }

 /**
  * Convert an instance of Host to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

