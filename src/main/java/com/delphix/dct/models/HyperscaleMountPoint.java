/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A Mount Point for the Hyperscale instance to write to a staging area and engines to read from.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T14:49:34.152994+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class HyperscaleMountPoint {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID = "hyperscale_instance_id";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID)
  private String hyperscaleInstanceId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_MOUNT_PATH = "mount_path";
  @SerializedName(SERIALIZED_NAME_MOUNT_PATH)
  private String mountPath;

  /**
   * The type of filesystem. Enum having values- CIFS, NFS3, NFS4.
   */
  @JsonAdapter(MountTypeEnum.Adapter.class)
  public enum MountTypeEnum {
    CIFS("CIFS"),
    
    NFS3("NFS3"),
    
    NFS4("NFS4");

    private String value;

    MountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MountTypeEnum fromValue(String value) {
      for (MountTypeEnum b : MountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOUNT_TYPE = "mount_type";
  @SerializedName(SERIALIZED_NAME_MOUNT_TYPE)
  private MountTypeEnum mountType;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private String options;

  public HyperscaleMountPoint() {
  }

  public HyperscaleMountPoint(
     String id
  ) {
    this();
    this.id = id;
  }

   /**
   * The ID of the Hyperscale Mount Point.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public HyperscaleMountPoint hyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
    return this;
  }

   /**
   * The ID of the Hyperscale instance of this Mount Point.
   * @return hyperscaleInstanceId
  **/
  @javax.annotation.Nonnull
  public String getHyperscaleInstanceId() {
    return hyperscaleInstanceId;
  }

  public void setHyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
  }


  public HyperscaleMountPoint name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the mount, unique for a hyperscale instance. This name will be used as a directory name by the Hyperscale instance.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HyperscaleMountPoint hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The host name of the server.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public HyperscaleMountPoint mountPath(String mountPath) {
    this.mountPath = mountPath;
    return this;
  }

   /**
   * The path to the directory on the filesystem to mount.
   * @return mountPath
  **/
  @javax.annotation.Nonnull
  public String getMountPath() {
    return mountPath;
  }

  public void setMountPath(String mountPath) {
    this.mountPath = mountPath;
  }


  public HyperscaleMountPoint mountType(MountTypeEnum mountType) {
    this.mountType = mountType;
    return this;
  }

   /**
   * The type of filesystem. Enum having values- CIFS, NFS3, NFS4.
   * @return mountType
  **/
  @javax.annotation.Nonnull
  public MountTypeEnum getMountType() {
    return mountType;
  }

  public void setMountType(MountTypeEnum mountType) {
    this.mountType = mountType;
  }


  public HyperscaleMountPoint options(String options) {
    this.options = options;
    return this;
  }

   /**
   * The options for mount. The endpoint will return all default options and user specified options.
   * @return options
  **/
  @javax.annotation.Nullable
  public String getOptions() {
    return options;
  }

  public void setOptions(String options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleMountPoint hyperscaleMountPoint = (HyperscaleMountPoint) o;
    return Objects.equals(this.id, hyperscaleMountPoint.id) &&
        Objects.equals(this.hyperscaleInstanceId, hyperscaleMountPoint.hyperscaleInstanceId) &&
        Objects.equals(this.name, hyperscaleMountPoint.name) &&
        Objects.equals(this.hostname, hyperscaleMountPoint.hostname) &&
        Objects.equals(this.mountPath, hyperscaleMountPoint.mountPath) &&
        Objects.equals(this.mountType, hyperscaleMountPoint.mountType) &&
        Objects.equals(this.options, hyperscaleMountPoint.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hyperscaleInstanceId, name, hostname, mountPath, mountType, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleMountPoint {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hyperscaleInstanceId: ").append(toIndentedString(hyperscaleInstanceId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    mountPath: ").append(toIndentedString(mountPath)).append("\n");
    sb.append("    mountType: ").append(toIndentedString(mountType)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("hyperscale_instance_id");
    openapiFields.add("name");
    openapiFields.add("hostname");
    openapiFields.add("mount_path");
    openapiFields.add("mount_type");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hyperscale_instance_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("mount_path");
    openapiRequiredFields.add("mount_type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperscaleMountPoint
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperscaleMountPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperscaleMountPoint is not found in the empty JSON string", HyperscaleMountPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperscaleMountPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperscaleMountPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HyperscaleMountPoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("hyperscale_instance_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_instance_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_instance_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if (!jsonObj.get("mount_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_path").toString()));
      }
      if (!jsonObj.get("mount_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_type").toString()));
      }
      // validate the required field `mount_type`
      MountTypeEnum.validateJsonElement(jsonObj.get("mount_type"));
      if ((jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) && !jsonObj.get("options").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `options` to be a primitive type in the JSON string but got `%s`", jsonObj.get("options").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperscaleMountPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperscaleMountPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperscaleMountPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperscaleMountPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperscaleMountPoint>() {
           @Override
           public void write(JsonWriter out, HyperscaleMountPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperscaleMountPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperscaleMountPoint given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperscaleMountPoint
  * @throws IOException if the JSON string is invalid with respect to HyperscaleMountPoint
  */
  public static HyperscaleMountPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperscaleMountPoint.class);
  }

 /**
  * Convert an instance of HyperscaleMountPoint to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

