/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import com.delphix.dct.models.AdditionalMountPoint;
import com.delphix.dct.models.Tag;
import com.delphix.dct.models.VirtualDatasetHooks;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for VDB
 */
public class VDBTest {
    private final VDB model = new VDB();

    /**
     * Model tests for VDB
     */
    @Test
    public void testVDB() {
        // TODO: test VDB
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'databaseType'
     */
    @Test
    public void databaseTypeTest() {
        // TODO: test databaseType
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'databaseVersion'
     */
    @Test
    public void databaseVersionTest() {
        // TODO: test databaseVersion
    }

    /**
     * Test the property 'size'
     */
    @Test
    public void sizeTest() {
        // TODO: test size
    }

    /**
     * Test the property 'storageSize'
     */
    @Test
    public void storageSizeTest() {
        // TODO: test storageSize
    }

    /**
     * Test the property 'engineId'
     */
    @Test
    public void engineIdTest() {
        // TODO: test engineId
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'masked'
     */
    @Test
    public void maskedTest() {
        // TODO: test masked
    }

    /**
     * Test the property 'contentType'
     */
    @Test
    public void contentTypeTest() {
        // TODO: test contentType
    }

    /**
     * Test the property 'parentTimeflowTimestamp'
     */
    @Test
    public void parentTimeflowTimestampTest() {
        // TODO: test parentTimeflowTimestamp
    }

    /**
     * Test the property 'parentTimeflowTimezone'
     */
    @Test
    public void parentTimeflowTimezoneTest() {
        // TODO: test parentTimeflowTimezone
    }

    /**
     * Test the property 'environmentId'
     */
    @Test
    public void environmentIdTest() {
        // TODO: test environmentId
    }

    /**
     * Test the property 'ipAddress'
     */
    @Test
    public void ipAddressTest() {
        // TODO: test ipAddress
    }

    /**
     * Test the property 'fqdn'
     */
    @Test
    public void fqdnTest() {
        // TODO: test fqdn
    }

    /**
     * Test the property 'parentId'
     */
    @Test
    public void parentIdTest() {
        // TODO: test parentId
    }

    /**
     * Test the property 'parentDsourceId'
     */
    @Test
    public void parentDsourceIdTest() {
        // TODO: test parentDsourceId
    }

    /**
     * Test the property 'groupName'
     */
    @Test
    public void groupNameTest() {
        // TODO: test groupName
    }

    /**
     * Test the property 'engineName'
     */
    @Test
    public void engineNameTest() {
        // TODO: test engineName
    }

    /**
     * Test the property 'cdbId'
     */
    @Test
    public void cdbIdTest() {
        // TODO: test cdbId
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'hooks'
     */
    @Test
    public void hooksTest() {
        // TODO: test hooks
    }

    /**
     * Test the property 'appdataSourceParams'
     */
    @Test
    public void appdataSourceParamsTest() {
        // TODO: test appdataSourceParams
    }

    /**
     * Test the property 'templateId'
     */
    @Test
    public void templateIdTest() {
        // TODO: test templateId
    }

    /**
     * Test the property 'configParams'
     */
    @Test
    public void configParamsTest() {
        // TODO: test configParams
    }

    /**
     * Test the property 'additionalMountPoints'
     */
    @Test
    public void additionalMountPointsTest() {
        // TODO: test additionalMountPoints
    }

    /**
     * Test the property 'appdataConfigParams'
     */
    @Test
    public void appdataConfigParamsTest() {
        // TODO: test appdataConfigParams
    }

    /**
     * Test the property 'mountPoint'
     */
    @Test
    public void mountPointTest() {
        // TODO: test mountPoint
    }

    /**
     * Test the property 'currentTimeflowId'
     */
    @Test
    public void currentTimeflowIdTest() {
        // TODO: test currentTimeflowId
    }

    /**
     * Test the property 'previousTimeflowId'
     */
    @Test
    public void previousTimeflowIdTest() {
        // TODO: test previousTimeflowId
    }

    /**
     * Test the property 'lastRefreshedDate'
     */
    @Test
    public void lastRefreshedDateTest() {
        // TODO: test lastRefreshedDate
    }

}
