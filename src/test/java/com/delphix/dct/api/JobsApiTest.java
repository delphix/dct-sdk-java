/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.Job;
import com.delphix.dct.models.ListJobsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchJobsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    /**
     * Abandons a job.
     *
     * Abandoning a job means that the system will no longer track ongoing progress. The system will not attempt to stop the process in any way. The job will be moved to the ABANDONED terminal state. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void abandonJobTest() throws ApiException {
        String jobId = null;
        api.abandonJob(jobId);
        // TODO: test validations
    }

    /**
     * Create tags for a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTagsTest() throws ApiException {
        String jobId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createJobTags(jobId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete tags for a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobTagTest() throws ApiException {
        String jobId = null;
        DeleteTag deleteTag = null;
        api.deleteJobTag(jobId, deleteTag);
        // TODO: test validations
    }

    /**
     * Returns a job by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobByIdTest() throws ApiException {
        String jobId = null;
        Job response = api.getJobById(jobId);
        // TODO: test validations
    }

    /**
     * Get tags for a Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTagsTest() throws ApiException {
        String jobId = null;
        TagsResponse response = api.getJobTags(jobId);
        // TODO: test validations
    }

    /**
     * List all jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListJobsResponse response = api.getJobs(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search for jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchJobsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchJobsResponse response = api.searchJobs(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

}
