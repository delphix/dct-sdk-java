/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.CreateDatabaseTemplateResponse;
import com.delphix.dct.models.DatabaseTemplate;
import com.delphix.dct.models.DatabaseTemplateCreateParameters;
import com.delphix.dct.models.DeleteDatabaseTemplateResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.EngineIdBody;
import com.delphix.dct.models.ListDatabaseTemplatesResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchDatabaseTemplatesResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateDatabaseTemplateParameters;
import com.delphix.dct.models.UpdateDatabaseTemplateResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabaseTemplatesApi
 */
@Disabled
public class DatabaseTemplatesApiTest {

    private final DatabaseTemplatesApi api = new DatabaseTemplatesApi();

    /**
     * Create a database template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatabaseTemplateTest() throws ApiException {
        DatabaseTemplateCreateParameters databaseTemplateCreateParameters = null;
        CreateDatabaseTemplateResponse response = api.createDatabaseTemplate(databaseTemplateCreateParameters);
        // TODO: test validations
    }

    /**
     * Create tags for a DatabaseTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDatabaseTemplateTagsTest() throws ApiException {
        String databaseTemplateId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createDatabaseTemplateTags(databaseTemplateId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete a DatabaseTemplate by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatabaseTemplateTest() throws ApiException {
        String databaseTemplateId = null;
        DeleteDatabaseTemplateResponse response = api.deleteDatabaseTemplate(databaseTemplateId);
        // TODO: test validations
    }

    /**
     * Delete tags for a DatabaseTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDatabaseTemplateTagTest() throws ApiException {
        String databaseTemplateId = null;
        DeleteTag deleteTag = null;
        api.deleteDatabaseTemplateTag(databaseTemplateId, deleteTag);
        // TODO: test validations
    }

    /**
     * Retrieve a DatabaseTemplate by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTemplateByIdTest() throws ApiException {
        String databaseTemplateId = null;
        DatabaseTemplate response = api.getDatabaseTemplateById(databaseTemplateId);
        // TODO: test validations
    }

    /**
     * Get tags for a DatabaseTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTemplateTagsTest() throws ApiException {
        String databaseTemplateId = null;
        TagsResponse response = api.getDatabaseTemplateTags(databaseTemplateId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of database templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatabaseTemplatesTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListDatabaseTemplatesResponse response = api.getDatabaseTemplates(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Imports the database templates from an an engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importDatabaseTemplatesTest() throws ApiException {
        EngineIdBody engineIdBody = null;
        api.importDatabaseTemplates(engineIdBody);
        // TODO: test validations
    }

    /**
     * Search DatabaseTemplates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDatabaseTemplatesTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchDatabaseTemplatesResponse response = api.searchDatabaseTemplates(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Undo an import of DatabaseTemplates on an Engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void undoImportDatabaseTemplatesTest() throws ApiException {
        EngineIdBody engineIdBody = null;
        api.undoImportDatabaseTemplates(engineIdBody);
        // TODO: test validations
    }

    /**
     * Updates a DatabaseTemplate by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDatabaseTemplateTest() throws ApiException {
        String databaseTemplateId = null;
        UpdateDatabaseTemplateParameters updateDatabaseTemplateParameters = null;
        UpdateDatabaseTemplateResponse response = api.updateDatabaseTemplate(databaseTemplateId, updateDatabaseTemplateParameters);
        // TODO: test validations
    }

}
