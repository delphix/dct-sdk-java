/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.3.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListSourcesResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchSourcesResponse;
import com.delphix.dct.models.Source;
import com.delphix.dct.models.StagingCompatibleEnvironmentsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourcesApi
 */
@Ignore
public class SourcesApiTest {

    private final SourcesApi api = new SourcesApi();

    
    /**
     * Create tags for a Source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSourceTagsTest() throws ApiException {
        String sourceId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createSourceTags(sourceId, tagsRequest);

        // TODO: test validations
    }
    
    /**
     * Delete tags for a Source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSourceTagsTest() throws ApiException {
        String sourceId = null;
        DeleteTag deleteTag = null;
        api.deleteSourceTags(sourceId, deleteTag);

        // TODO: test validations
    }
    
    /**
     * Get a source by ID.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSourceByIdTest() throws ApiException {
        String sourceId = null;
        Source response = api.getSourceById(sourceId);

        // TODO: test validations
    }
    
    /**
     * Returns a list of repositories that match the specified source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSourceCompatibleRepoTest() throws ApiException {
        String sourceId = null;
        StagingCompatibleEnvironmentsResponse response = api.getSourceCompatibleRepo(sourceId);

        // TODO: test validations
    }
    
    /**
     * Get tags for a Source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSourceTagsTest() throws ApiException {
        String sourceId = null;
        TagsResponse response = api.getSourceTags(sourceId);

        // TODO: test validations
    }
    
    /**
     * List all sources.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSourcesTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListSourcesResponse response = api.getSources(limit, cursor, sort);

        // TODO: test validations
    }
    
    /**
     * Search for Sources.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSourcesTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchSourcesResponse response = api.searchSources(limit, cursor, sort, searchBody);

        // TODO: test validations
    }
    
}
