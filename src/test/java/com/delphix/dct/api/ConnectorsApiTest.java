/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.Connector;
import com.delphix.dct.models.ConnectorTestResponse;
import com.delphix.dct.models.ConnectorUpdateParameters;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListConnectorsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchConnectorsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateConnectorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectorsApi
 */
@Disabled
public class ConnectorsApiTest {

    private final ConnectorsApi api = new ConnectorsApi();

    /**
     * Checks connectivity between a masking engine and a remote data source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectorsTestTest() throws ApiException {
        String connectorId = null;
        ConnectorTestResponse response = api.connectorsTest(connectorId);
        // TODO: test validations
    }

    /**
     * Create tags for a Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorTagsTest() throws ApiException {
        String connectorId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createConnectorTags(connectorId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete tags for a Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorTagTest() throws ApiException {
        String connectorId = null;
        DeleteTag deleteTag = null;
        api.deleteConnectorTag(connectorId, deleteTag);
        // TODO: test validations
    }

    /**
     * Retrieve a masking Connector by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorByIdTest() throws ApiException {
        String connectorId = null;
        Connector response = api.getConnectorById(connectorId);
        // TODO: test validations
    }

    /**
     * Get tags for a Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorTagsTest() throws ApiException {
        String connectorId = null;
        TagsResponse response = api.getConnectorTags(connectorId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of masking connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListConnectorsResponse response = api.getConnectors(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search for masking Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchConnectorsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchConnectorsResponse response = api.searchConnectors(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update a masking Connector by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorByIdTest() throws ApiException {
        String connectorId = null;
        ConnectorUpdateParameters connectorUpdateParameters = null;
        UpdateConnectorResponse response = api.updateConnectorById(connectorId, connectorUpdateParameters);
        // TODO: test validations
    }

}
