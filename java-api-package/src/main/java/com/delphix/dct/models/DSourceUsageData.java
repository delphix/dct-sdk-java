/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * DSourceUsageData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class DSourceUsageData {
  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNVIRTUALIZED_SPACE = "unvirtualized_space";
  @SerializedName(SERIALIZED_NAME_UNVIRTUALIZED_SPACE)
  private Long unvirtualizedSpace;

  public static final String SERIALIZED_NAME_ACTUAL_SPACE = "actual_space";
  @SerializedName(SERIALIZED_NAME_ACTUAL_SPACE)
  private Long actualSpace;

  public static final String SERIALIZED_NAME_DEPENDANT_VDBS = "dependant_vdbs";
  @SerializedName(SERIALIZED_NAME_DEPENDANT_VDBS)
  private Integer dependantVdbs;

  public DSourceUsageData() {
  }

  public DSourceUsageData engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * The name of the engine the dSource belongs to.
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public DSourceUsageData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the dSource
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DSourceUsageData unvirtualizedSpace(Long unvirtualizedSpace) {
    this.unvirtualizedSpace = unvirtualizedSpace;
    return this;
  }

   /**
   * The the disk space that would be required if not using Delphix virtualizion, in bytes.
   * @return unvirtualizedSpace
  **/
  @javax.annotation.Nullable
  public Long getUnvirtualizedSpace() {
    return unvirtualizedSpace;
  }

  public void setUnvirtualizedSpace(Long unvirtualizedSpace) {
    this.unvirtualizedSpace = unvirtualizedSpace;
  }


  public DSourceUsageData actualSpace(Long actualSpace) {
    this.actualSpace = actualSpace;
    return this;
  }

   /**
   * The actual space used by this dSource, in bytes. This includes the disk space used by the current copy of the data as well as the snapshots and log files retained to enable provisioning from historical versions.
   * @return actualSpace
  **/
  @javax.annotation.Nullable
  public Long getActualSpace() {
    return actualSpace;
  }

  public void setActualSpace(Long actualSpace) {
    this.actualSpace = actualSpace;
  }


  public DSourceUsageData dependantVdbs(Integer dependantVdbs) {
    this.dependantVdbs = dependantVdbs;
    return this;
  }

   /**
   * The number of VDBs that are dependant on this dSource. This includes all VDB descendants that have this dSource as an ancestor.
   * @return dependantVdbs
  **/
  @javax.annotation.Nullable
  public Integer getDependantVdbs() {
    return dependantVdbs;
  }

  public void setDependantVdbs(Integer dependantVdbs) {
    this.dependantVdbs = dependantVdbs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSourceUsageData dsourceUsageData = (DSourceUsageData) o;
    return Objects.equals(this.engineName, dsourceUsageData.engineName) &&
        Objects.equals(this.name, dsourceUsageData.name) &&
        Objects.equals(this.unvirtualizedSpace, dsourceUsageData.unvirtualizedSpace) &&
        Objects.equals(this.actualSpace, dsourceUsageData.actualSpace) &&
        Objects.equals(this.dependantVdbs, dsourceUsageData.dependantVdbs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engineName, name, unvirtualizedSpace, actualSpace, dependantVdbs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSourceUsageData {\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unvirtualizedSpace: ").append(toIndentedString(unvirtualizedSpace)).append("\n");
    sb.append("    actualSpace: ").append(toIndentedString(actualSpace)).append("\n");
    sb.append("    dependantVdbs: ").append(toIndentedString(dependantVdbs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engine_name");
    openapiFields.add("name");
    openapiFields.add("unvirtualized_space");
    openapiFields.add("actual_space");
    openapiFields.add("dependant_vdbs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DSourceUsageData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DSourceUsageData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DSourceUsageData is not found in the empty JSON string", DSourceUsageData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DSourceUsageData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DSourceUsageData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DSourceUsageData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DSourceUsageData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DSourceUsageData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DSourceUsageData.class));

       return (TypeAdapter<T>) new TypeAdapter<DSourceUsageData>() {
           @Override
           public void write(JsonWriter out, DSourceUsageData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DSourceUsageData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DSourceUsageData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DSourceUsageData
  * @throws IOException if the JSON string is invalid with respect to DSourceUsageData
  */
  public static DSourceUsageData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DSourceUsageData.class);
  }

 /**
  * Convert an instance of DSourceUsageData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

