/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * VDBInventoryData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class VDBInventoryData {
  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_PARENT_NAME = "parent_name";
  @SerializedName(SERIALIZED_NAME_PARENT_NAME)
  private String parentName;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_LAST_REFRESHED_DATE = "last_refreshed_date";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESHED_DATE)
  private OffsetDateTime lastRefreshedDate;

  public static final String SERIALIZED_NAME_PARENT_TIMEFLOW_LOCATION = "parent_timeflow_location";
  @SerializedName(SERIALIZED_NAME_PARENT_TIMEFLOW_LOCATION)
  private String parentTimeflowLocation;

  public static final String SERIALIZED_NAME_PARENT_TIMEFLOW_TIMESTAMP = "parent_timeflow_timestamp";
  @SerializedName(SERIALIZED_NAME_PARENT_TIMEFLOW_TIMESTAMP)
  private OffsetDateTime parentTimeflowTimestamp;

  public static final String SERIALIZED_NAME_PARENT_TIMEFLOW_TIMEZONE = "parent_timeflow_timezone";
  @SerializedName(SERIALIZED_NAME_PARENT_TIMEFLOW_TIMEZONE)
  private String parentTimeflowTimezone;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STORAGE_SIZE = "storage_size";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE)
  private Long storageSize;

  public VDBInventoryData() {
  }

  public VDBInventoryData engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * The name of the engine the VDB belongs to.
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public VDBInventoryData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the VDB.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VDBInventoryData type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The database type of the VDB.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public VDBInventoryData version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The database version of the VDB.
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public VDBInventoryData parentName(String parentName) {
    this.parentName = parentName;
    return this;
  }

   /**
   * The name of the VDB&#39;s parent dataset.
   * @return parentName
  **/
  @javax.annotation.Nullable
  public String getParentName() {
    return parentName;
  }

  public void setParentName(String parentName) {
    this.parentName = parentName;
  }


  public VDBInventoryData parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * A reference to the parent dataset of the VDB.
   * @return parentId
  **/
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public VDBInventoryData creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date the VDB was created.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public VDBInventoryData lastRefreshedDate(OffsetDateTime lastRefreshedDate) {
    this.lastRefreshedDate = lastRefreshedDate;
    return this;
  }

   /**
   * The date the VDB was last refreshed.
   * @return lastRefreshedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastRefreshedDate() {
    return lastRefreshedDate;
  }

  public void setLastRefreshedDate(OffsetDateTime lastRefreshedDate) {
    this.lastRefreshedDate = lastRefreshedDate;
  }


  public VDBInventoryData parentTimeflowLocation(String parentTimeflowLocation) {
    this.parentTimeflowLocation = parentTimeflowLocation;
    return this;
  }

   /**
   * The location for the VDB&#39;s parent timeflow.
   * @return parentTimeflowLocation
  **/
  @javax.annotation.Nullable
  public String getParentTimeflowLocation() {
    return parentTimeflowLocation;
  }

  public void setParentTimeflowLocation(String parentTimeflowLocation) {
    this.parentTimeflowLocation = parentTimeflowLocation;
  }


  public VDBInventoryData parentTimeflowTimestamp(OffsetDateTime parentTimeflowTimestamp) {
    this.parentTimeflowTimestamp = parentTimeflowTimestamp;
    return this;
  }

   /**
   * The timestamp for the VDB&#39;s parent timeflow.
   * @return parentTimeflowTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getParentTimeflowTimestamp() {
    return parentTimeflowTimestamp;
  }

  public void setParentTimeflowTimestamp(OffsetDateTime parentTimeflowTimestamp) {
    this.parentTimeflowTimestamp = parentTimeflowTimestamp;
  }


  public VDBInventoryData parentTimeflowTimezone(String parentTimeflowTimezone) {
    this.parentTimeflowTimezone = parentTimeflowTimezone;
    return this;
  }

   /**
   * The timezone for the VDB&#39;s parent timeflow.
   * @return parentTimeflowTimezone
  **/
  @javax.annotation.Nullable
  public String getParentTimeflowTimezone() {
    return parentTimeflowTimezone;
  }

  public void setParentTimeflowTimezone(String parentTimeflowTimezone) {
    this.parentTimeflowTimezone = parentTimeflowTimezone;
  }


  public VDBInventoryData enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the VDB is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public VDBInventoryData status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The runtime status of the VDB. &#39;Unknown&#39; if all attempts to connect to the dataset failed.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public VDBInventoryData storageSize(Long storageSize) {
    this.storageSize = storageSize;
    return this;
  }

   /**
   * The actual space used by the VDB, in bytes.
   * @return storageSize
  **/
  @javax.annotation.Nullable
  public Long getStorageSize() {
    return storageSize;
  }

  public void setStorageSize(Long storageSize) {
    this.storageSize = storageSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VDBInventoryData vdBInventoryData = (VDBInventoryData) o;
    return Objects.equals(this.engineName, vdBInventoryData.engineName) &&
        Objects.equals(this.name, vdBInventoryData.name) &&
        Objects.equals(this.type, vdBInventoryData.type) &&
        Objects.equals(this.version, vdBInventoryData.version) &&
        Objects.equals(this.parentName, vdBInventoryData.parentName) &&
        Objects.equals(this.parentId, vdBInventoryData.parentId) &&
        Objects.equals(this.creationDate, vdBInventoryData.creationDate) &&
        Objects.equals(this.lastRefreshedDate, vdBInventoryData.lastRefreshedDate) &&
        Objects.equals(this.parentTimeflowLocation, vdBInventoryData.parentTimeflowLocation) &&
        Objects.equals(this.parentTimeflowTimestamp, vdBInventoryData.parentTimeflowTimestamp) &&
        Objects.equals(this.parentTimeflowTimezone, vdBInventoryData.parentTimeflowTimezone) &&
        Objects.equals(this.enabled, vdBInventoryData.enabled) &&
        Objects.equals(this.status, vdBInventoryData.status) &&
        Objects.equals(this.storageSize, vdBInventoryData.storageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engineName, name, type, version, parentName, parentId, creationDate, lastRefreshedDate, parentTimeflowLocation, parentTimeflowTimestamp, parentTimeflowTimezone, enabled, status, storageSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VDBInventoryData {\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    parentName: ").append(toIndentedString(parentName)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastRefreshedDate: ").append(toIndentedString(lastRefreshedDate)).append("\n");
    sb.append("    parentTimeflowLocation: ").append(toIndentedString(parentTimeflowLocation)).append("\n");
    sb.append("    parentTimeflowTimestamp: ").append(toIndentedString(parentTimeflowTimestamp)).append("\n");
    sb.append("    parentTimeflowTimezone: ").append(toIndentedString(parentTimeflowTimezone)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storageSize: ").append(toIndentedString(storageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engine_name");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("version");
    openapiFields.add("parent_name");
    openapiFields.add("parent_id");
    openapiFields.add("creation_date");
    openapiFields.add("last_refreshed_date");
    openapiFields.add("parent_timeflow_location");
    openapiFields.add("parent_timeflow_timestamp");
    openapiFields.add("parent_timeflow_timezone");
    openapiFields.add("enabled");
    openapiFields.add("status");
    openapiFields.add("storage_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VDBInventoryData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VDBInventoryData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VDBInventoryData is not found in the empty JSON string", VDBInventoryData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VDBInventoryData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VDBInventoryData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("parent_name") != null && !jsonObj.get("parent_name").isJsonNull()) && !jsonObj.get("parent_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_name").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("parent_timeflow_location") != null && !jsonObj.get("parent_timeflow_location").isJsonNull()) && !jsonObj.get("parent_timeflow_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_timeflow_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_timeflow_location").toString()));
      }
      if ((jsonObj.get("parent_timeflow_timezone") != null && !jsonObj.get("parent_timeflow_timezone").isJsonNull()) && !jsonObj.get("parent_timeflow_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_timeflow_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_timeflow_timezone").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VDBInventoryData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VDBInventoryData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VDBInventoryData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VDBInventoryData.class));

       return (TypeAdapter<T>) new TypeAdapter<VDBInventoryData>() {
           @Override
           public void write(JsonWriter out, VDBInventoryData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VDBInventoryData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VDBInventoryData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VDBInventoryData
  * @throws IOException if the JSON string is invalid with respect to VDBInventoryData
  */
  public static VDBInventoryData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VDBInventoryData.class);
  }

 /**
  * Convert an instance of VDBInventoryData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

