/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Domain
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Domain {
  public static final String SERIALIZED_NAME_MSAD_DOMAIN_NAME = "msad_domain_name";
  @SerializedName(SERIALIZED_NAME_MSAD_DOMAIN_NAME)
  private String msadDomainName;

  public static final String SERIALIZED_NAME_USERNAME_PATTERN = "username_pattern";
  @SerializedName(SERIALIZED_NAME_USERNAME_PATTERN)
  private String usernamePattern;

  public static final String SERIALIZED_NAME_SEARCH_BASE = "search_base";
  @SerializedName(SERIALIZED_NAME_SEARCH_BASE)
  private String searchBase;

  public static final String SERIALIZED_NAME_GROUP_ATTR = "group_attr";
  @SerializedName(SERIALIZED_NAME_GROUP_ATTR)
  private String groupAttr;

  public static final String SERIALIZED_NAME_EMAIL_ATTR = "email_attr";
  @SerializedName(SERIALIZED_NAME_EMAIL_ATTR)
  private String emailAttr;

  public static final String SERIALIZED_NAME_FIRST_NAME_ATTR = "first_name_attr";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME_ATTR)
  private String firstNameAttr;

  public static final String SERIALIZED_NAME_LAST_NAME_ATTR = "last_name_attr";
  @SerializedName(SERIALIZED_NAME_LAST_NAME_ATTR)
  private String lastNameAttr;

  public static final String SERIALIZED_NAME_OBJECT_CLASS_ATTR = "object_class_attr";
  @SerializedName(SERIALIZED_NAME_OBJECT_CLASS_ATTR)
  private String objectClassAttr;

  public static final String SERIALIZED_NAME_SEARCH_ATTR = "search_attr";
  @SerializedName(SERIALIZED_NAME_SEARCH_ATTR)
  private String searchAttr;

  public Domain() {
  }

  public Domain msadDomainName(String msadDomainName) {
    this.msadDomainName = msadDomainName;
    return this;
  }

   /**
   * This is used to get full DN for authentication and search. Provide this value only if server is microsoft AD.
   * @return msadDomainName
  **/
  @javax.annotation.Nullable
  public String getMsadDomainName() {
    return msadDomainName;
  }

  public void setMsadDomainName(String msadDomainName) {
    this.msadDomainName = msadDomainName;
  }


  public Domain usernamePattern(String usernamePattern) {
    this.usernamePattern = usernamePattern;
    return this;
  }

   /**
   * The username_patterns can be used to avoid providing full-dn during login. This will also be used for search of groups,email, first name and last name.
   * @return usernamePattern
  **/
  @javax.annotation.Nullable
  public String getUsernamePattern() {
    return usernamePattern;
  }

  public void setUsernamePattern(String usernamePattern) {
    this.usernamePattern = usernamePattern;
  }


  public Domain searchBase(String searchBase) {
    this.searchBase = searchBase;
    return this;
  }

   /**
   * Search base used to search for ldap user groups. Leave this field empty if a full username_pattern is provided and server is non microsoft AD.
   * @return searchBase
  **/
  @javax.annotation.Nullable
  public String getSearchBase() {
    return searchBase;
  }

  public void setSearchBase(String searchBase) {
    this.searchBase = searchBase;
  }


  public Domain groupAttr(String groupAttr) {
    this.groupAttr = groupAttr;
    return this;
  }

   /**
   * Group mapped attribute on ldap side used for user group search.
   * @return groupAttr
  **/
  @javax.annotation.Nullable
  public String getGroupAttr() {
    return groupAttr;
  }

  public void setGroupAttr(String groupAttr) {
    this.groupAttr = groupAttr;
  }


  public Domain emailAttr(String emailAttr) {
    this.emailAttr = emailAttr;
    return this;
  }

   /**
   * Email mapped attribute on ldap side used for mapping on DCT side account.
   * @return emailAttr
  **/
  @javax.annotation.Nullable
  public String getEmailAttr() {
    return emailAttr;
  }

  public void setEmailAttr(String emailAttr) {
    this.emailAttr = emailAttr;
  }


  public Domain firstNameAttr(String firstNameAttr) {
    this.firstNameAttr = firstNameAttr;
    return this;
  }

   /**
   * First name attribute mapped on ldap side used for mapping on DCT side account.
   * @return firstNameAttr
  **/
  @javax.annotation.Nullable
  public String getFirstNameAttr() {
    return firstNameAttr;
  }

  public void setFirstNameAttr(String firstNameAttr) {
    this.firstNameAttr = firstNameAttr;
  }


  public Domain lastNameAttr(String lastNameAttr) {
    this.lastNameAttr = lastNameAttr;
    return this;
  }

   /**
   * Last name attribute mapped on ldap side used for mapping on DCT side account.
   * @return lastNameAttr
  **/
  @javax.annotation.Nullable
  public String getLastNameAttr() {
    return lastNameAttr;
  }

  public void setLastNameAttr(String lastNameAttr) {
    this.lastNameAttr = lastNameAttr;
  }


  public Domain objectClassAttr(String objectClassAttr) {
    this.objectClassAttr = objectClassAttr;
    return this;
  }

   /**
   * The name of the objectClass on ldap side under which the user is mapped.This is used to search for the user details.
   * @return objectClassAttr
  **/
  @javax.annotation.Nullable
  public String getObjectClassAttr() {
    return objectClassAttr;
  }

  public void setObjectClassAttr(String objectClassAttr) {
    this.objectClassAttr = objectClassAttr;
  }


  public Domain searchAttr(String searchAttr) {
    this.searchAttr = searchAttr;
    return this;
  }

   /**
   * Search attribute mapped on ldap side using which search on ldap side will be made.
   * @return searchAttr
  **/
  @javax.annotation.Nullable
  public String getSearchAttr() {
    return searchAttr;
  }

  public void setSearchAttr(String searchAttr) {
    this.searchAttr = searchAttr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Domain domain = (Domain) o;
    return Objects.equals(this.msadDomainName, domain.msadDomainName) &&
        Objects.equals(this.usernamePattern, domain.usernamePattern) &&
        Objects.equals(this.searchBase, domain.searchBase) &&
        Objects.equals(this.groupAttr, domain.groupAttr) &&
        Objects.equals(this.emailAttr, domain.emailAttr) &&
        Objects.equals(this.firstNameAttr, domain.firstNameAttr) &&
        Objects.equals(this.lastNameAttr, domain.lastNameAttr) &&
        Objects.equals(this.objectClassAttr, domain.objectClassAttr) &&
        Objects.equals(this.searchAttr, domain.searchAttr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(msadDomainName, usernamePattern, searchBase, groupAttr, emailAttr, firstNameAttr, lastNameAttr, objectClassAttr, searchAttr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Domain {\n");
    sb.append("    msadDomainName: ").append(toIndentedString(msadDomainName)).append("\n");
    sb.append("    usernamePattern: ").append(toIndentedString(usernamePattern)).append("\n");
    sb.append("    searchBase: ").append(toIndentedString(searchBase)).append("\n");
    sb.append("    groupAttr: ").append(toIndentedString(groupAttr)).append("\n");
    sb.append("    emailAttr: ").append(toIndentedString(emailAttr)).append("\n");
    sb.append("    firstNameAttr: ").append(toIndentedString(firstNameAttr)).append("\n");
    sb.append("    lastNameAttr: ").append(toIndentedString(lastNameAttr)).append("\n");
    sb.append("    objectClassAttr: ").append(toIndentedString(objectClassAttr)).append("\n");
    sb.append("    searchAttr: ").append(toIndentedString(searchAttr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("msad_domain_name");
    openapiFields.add("username_pattern");
    openapiFields.add("search_base");
    openapiFields.add("group_attr");
    openapiFields.add("email_attr");
    openapiFields.add("first_name_attr");
    openapiFields.add("last_name_attr");
    openapiFields.add("object_class_attr");
    openapiFields.add("search_attr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Domain
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Domain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Domain is not found in the empty JSON string", Domain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Domain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Domain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("msad_domain_name") != null && !jsonObj.get("msad_domain_name").isJsonNull()) && !jsonObj.get("msad_domain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `msad_domain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("msad_domain_name").toString()));
      }
      if ((jsonObj.get("username_pattern") != null && !jsonObj.get("username_pattern").isJsonNull()) && !jsonObj.get("username_pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username_pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username_pattern").toString()));
      }
      if ((jsonObj.get("search_base") != null && !jsonObj.get("search_base").isJsonNull()) && !jsonObj.get("search_base").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_base` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_base").toString()));
      }
      if ((jsonObj.get("group_attr") != null && !jsonObj.get("group_attr").isJsonNull()) && !jsonObj.get("group_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_attr").toString()));
      }
      if ((jsonObj.get("email_attr") != null && !jsonObj.get("email_attr").isJsonNull()) && !jsonObj.get("email_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email_attr").toString()));
      }
      if ((jsonObj.get("first_name_attr") != null && !jsonObj.get("first_name_attr").isJsonNull()) && !jsonObj.get("first_name_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name_attr").toString()));
      }
      if ((jsonObj.get("last_name_attr") != null && !jsonObj.get("last_name_attr").isJsonNull()) && !jsonObj.get("last_name_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name_attr").toString()));
      }
      if ((jsonObj.get("object_class_attr") != null && !jsonObj.get("object_class_attr").isJsonNull()) && !jsonObj.get("object_class_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_class_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_class_attr").toString()));
      }
      if ((jsonObj.get("search_attr") != null && !jsonObj.get("search_attr").isJsonNull()) && !jsonObj.get("search_attr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_attr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_attr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Domain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Domain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Domain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Domain.class));

       return (TypeAdapter<T>) new TypeAdapter<Domain>() {
           @Override
           public void write(JsonWriter out, Domain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Domain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Domain given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Domain
  * @throws IOException if the JSON string is invalid with respect to Domain
  */
  public static Domain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Domain.class);
  }

 /**
  * Convert an instance of Domain to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

