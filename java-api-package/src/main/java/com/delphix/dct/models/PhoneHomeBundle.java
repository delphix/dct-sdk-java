/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.PhoneHomeBundleApiTelemetry;
import com.delphix.dct.models.PhoneHomeBundleProductInfo;
import com.delphix.dct.models.PhoneHomeBundleRegisteredEngine;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A bundle containing product identification, configuration information and API telemetry records.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class PhoneHomeBundle {
  public static final String SERIALIZED_NAME_PRODUCT_INFO = "product_info";
  @SerializedName(SERIALIZED_NAME_PRODUCT_INFO)
  private PhoneHomeBundleProductInfo productInfo;

  public static final String SERIALIZED_NAME_REGISTERED_ENGINES = "registered_engines";
  @SerializedName(SERIALIZED_NAME_REGISTERED_ENGINES)
  private List<PhoneHomeBundleRegisteredEngine> registeredEngines = new ArrayList<>();

  public static final String SERIALIZED_NAME_API_TELEMETRY = "api_telemetry";
  @SerializedName(SERIALIZED_NAME_API_TELEMETRY)
  private List<PhoneHomeBundleApiTelemetry> apiTelemetry = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<LocalDate> dates = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUNDLE_GENERATION_TIME = "bundle_generation_time";
  @SerializedName(SERIALIZED_NAME_BUNDLE_GENERATION_TIME)
  private OffsetDateTime bundleGenerationTime;

  public PhoneHomeBundle() {
  }

  public PhoneHomeBundle productInfo(PhoneHomeBundleProductInfo productInfo) {
    this.productInfo = productInfo;
    return this;
  }

   /**
   * Get productInfo
   * @return productInfo
  **/
  @javax.annotation.Nonnull
  public PhoneHomeBundleProductInfo getProductInfo() {
    return productInfo;
  }

  public void setProductInfo(PhoneHomeBundleProductInfo productInfo) {
    this.productInfo = productInfo;
  }


  public PhoneHomeBundle registeredEngines(List<PhoneHomeBundleRegisteredEngine> registeredEngines) {
    this.registeredEngines = registeredEngines;
    return this;
  }

  public PhoneHomeBundle addRegisteredEnginesItem(PhoneHomeBundleRegisteredEngine registeredEnginesItem) {
    if (this.registeredEngines == null) {
      this.registeredEngines = new ArrayList<>();
    }
    this.registeredEngines.add(registeredEnginesItem);
    return this;
  }

   /**
   * A list of Delphix Engines registered with this instance of Data Control Tower.
   * @return registeredEngines
  **/
  @javax.annotation.Nonnull
  public List<PhoneHomeBundleRegisteredEngine> getRegisteredEngines() {
    return registeredEngines;
  }

  public void setRegisteredEngines(List<PhoneHomeBundleRegisteredEngine> registeredEngines) {
    this.registeredEngines = registeredEngines;
  }


  public PhoneHomeBundle apiTelemetry(List<PhoneHomeBundleApiTelemetry> apiTelemetry) {
    this.apiTelemetry = apiTelemetry;
    return this;
  }

  public PhoneHomeBundle addApiTelemetryItem(PhoneHomeBundleApiTelemetry apiTelemetryItem) {
    if (this.apiTelemetry == null) {
      this.apiTelemetry = new ArrayList<>();
    }
    this.apiTelemetry.add(apiTelemetryItem);
    return this;
  }

   /**
   * A list of API telemetry records.\&quot;
   * @return apiTelemetry
  **/
  @javax.annotation.Nonnull
  public List<PhoneHomeBundleApiTelemetry> getApiTelemetry() {
    return apiTelemetry;
  }

  public void setApiTelemetry(List<PhoneHomeBundleApiTelemetry> apiTelemetry) {
    this.apiTelemetry = apiTelemetry;
  }


  public PhoneHomeBundle dates(List<LocalDate> dates) {
    this.dates = dates;
    return this;
  }

  public PhoneHomeBundle addDatesItem(LocalDate datesItem) {
    if (this.dates == null) {
      this.dates = new ArrayList<>();
    }
    this.dates.add(datesItem);
    return this;
  }

   /**
   * A list of dates for which telemetry data is included in this bundle.
   * @return dates
  **/
  @javax.annotation.Nonnull
  public List<LocalDate> getDates() {
    return dates;
  }

  public void setDates(List<LocalDate> dates) {
    this.dates = dates;
  }


  public PhoneHomeBundle bundleGenerationTime(OffsetDateTime bundleGenerationTime) {
    this.bundleGenerationTime = bundleGenerationTime;
    return this;
  }

   /**
   * The UTC time at bundle generation (ISO 8601 format).
   * @return bundleGenerationTime
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getBundleGenerationTime() {
    return bundleGenerationTime;
  }

  public void setBundleGenerationTime(OffsetDateTime bundleGenerationTime) {
    this.bundleGenerationTime = bundleGenerationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneHomeBundle phoneHomeBundle = (PhoneHomeBundle) o;
    return Objects.equals(this.productInfo, phoneHomeBundle.productInfo) &&
        Objects.equals(this.registeredEngines, phoneHomeBundle.registeredEngines) &&
        Objects.equals(this.apiTelemetry, phoneHomeBundle.apiTelemetry) &&
        Objects.equals(this.dates, phoneHomeBundle.dates) &&
        Objects.equals(this.bundleGenerationTime, phoneHomeBundle.bundleGenerationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productInfo, registeredEngines, apiTelemetry, dates, bundleGenerationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneHomeBundle {\n");
    sb.append("    productInfo: ").append(toIndentedString(productInfo)).append("\n");
    sb.append("    registeredEngines: ").append(toIndentedString(registeredEngines)).append("\n");
    sb.append("    apiTelemetry: ").append(toIndentedString(apiTelemetry)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    bundleGenerationTime: ").append(toIndentedString(bundleGenerationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product_info");
    openapiFields.add("registered_engines");
    openapiFields.add("api_telemetry");
    openapiFields.add("dates");
    openapiFields.add("bundle_generation_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("product_info");
    openapiRequiredFields.add("registered_engines");
    openapiRequiredFields.add("api_telemetry");
    openapiRequiredFields.add("dates");
    openapiRequiredFields.add("bundle_generation_time");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PhoneHomeBundle
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneHomeBundle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneHomeBundle is not found in the empty JSON string", PhoneHomeBundle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneHomeBundle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneHomeBundle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneHomeBundle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `product_info`
      PhoneHomeBundleProductInfo.validateJsonElement(jsonObj.get("product_info"));
      // ensure the json data is an array
      if (!jsonObj.get("registered_engines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `registered_engines` to be an array in the JSON string but got `%s`", jsonObj.get("registered_engines").toString()));
      }

      JsonArray jsonArrayregisteredEngines = jsonObj.getAsJsonArray("registered_engines");
      // validate the required field `registered_engines` (array)
      for (int i = 0; i < jsonArrayregisteredEngines.size(); i++) {
        PhoneHomeBundleRegisteredEngine.validateJsonElement(jsonArrayregisteredEngines.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("api_telemetry").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_telemetry` to be an array in the JSON string but got `%s`", jsonObj.get("api_telemetry").toString()));
      }

      JsonArray jsonArrayapiTelemetry = jsonObj.getAsJsonArray("api_telemetry");
      // validate the required field `api_telemetry` (array)
      for (int i = 0; i < jsonArrayapiTelemetry.size(); i++) {
        PhoneHomeBundleApiTelemetry.validateJsonElement(jsonArrayapiTelemetry.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("dates") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dates` to be an array in the JSON string but got `%s`", jsonObj.get("dates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneHomeBundle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneHomeBundle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneHomeBundle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneHomeBundle.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneHomeBundle>() {
           @Override
           public void write(JsonWriter out, PhoneHomeBundle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneHomeBundle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PhoneHomeBundle given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PhoneHomeBundle
  * @throws IOException if the JSON string is invalid with respect to PhoneHomeBundle
  */
  public static PhoneHomeBundle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneHomeBundle.class);
  }

 /**
  * Convert an instance of PhoneHomeBundle to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

