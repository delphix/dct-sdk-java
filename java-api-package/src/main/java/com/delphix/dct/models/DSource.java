/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.DSourceHooks;
import com.delphix.dct.models.Replica;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * The Delphix storage-based copy of the source database including its history.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class DSource {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "namespace_id";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespace_name";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_IS_REPLICA = "is_replica";
  @SerializedName(SERIALIZED_NAME_IS_REPLICA)
  private Boolean isReplica;

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "database_version";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private String databaseVersion;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DATA_UUID = "data_uuid";
  @SerializedName(SERIALIZED_NAME_DATA_UUID)
  private String dataUuid;

  public static final String SERIALIZED_NAME_STORAGE_SIZE = "storage_size";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE)
  private Long storageSize;

  public static final String SERIALIZED_NAME_PLUGIN_VERSION = "plugin_version";
  @SerializedName(SERIALIZED_NAME_PLUGIN_VERSION)
  private String pluginVersion;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_CDB_ID = "cdb_id";
  @SerializedName(SERIALIZED_NAME_CDB_ID)
  private String cdbId;

  public static final String SERIALIZED_NAME_CURRENT_TIMEFLOW_ID = "current_timeflow_id";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIMEFLOW_ID)
  private String currentTimeflowId;

  public static final String SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID = "previous_timeflow_id";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID)
  private String previousTimeflowId;

  public static final String SERIALIZED_NAME_IS_APPDATA = "is_appdata";
  @SerializedName(SERIALIZED_NAME_IS_APPDATA)
  private Boolean isAppdata;

  public static final String SERIALIZED_NAME_TOOLKIT_ID = "toolkit_id";
  @SerializedName(SERIALIZED_NAME_TOOLKIT_ID)
  private String toolkitId;

  public static final String SERIALIZED_NAME_UNVIRTUALIZED_SPACE = "unvirtualized_space";
  @SerializedName(SERIALIZED_NAME_UNVIRTUALIZED_SPACE)
  private Long unvirtualizedSpace;

  public static final String SERIALIZED_NAME_DEPENDANT_VDBS = "dependant_vdbs";
  @SerializedName(SERIALIZED_NAME_DEPENDANT_VDBS)
  private Integer dependantVdbs;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_PRIMARY_OBJECT_ID = "primary_object_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_OBJECT_ID)
  private String primaryObjectId;

  public static final String SERIALIZED_NAME_PRIMARY_ENGINE_ID = "primary_engine_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENGINE_ID)
  private String primaryEngineId;

  public static final String SERIALIZED_NAME_PRIMARY_ENGINE_NAME = "primary_engine_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENGINE_NAME)
  private String primaryEngineName;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private List<Replica> replicas;

  public static final String SERIALIZED_NAME_HOOKS = "hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private DSourceHooks hooks;

  public static final String SERIALIZED_NAME_SYNC_POLICY_ID = "sync_policy_id";
  @SerializedName(SERIALIZED_NAME_SYNC_POLICY_ID)
  private String syncPolicyId;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_ID = "retention_policy_id";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_ID)
  private String retentionPolicyId;

  public static final String SERIALIZED_NAME_QUOTA_POLICY_ID = "quota_policy_id";
  @SerializedName(SERIALIZED_NAME_QUOTA_POLICY_ID)
  private String quotaPolicyId;

  public DSource() {
  }

  public DSource id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The dSource object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DSource databaseType(String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The database type of this dSource.
   * @return databaseType
  **/
  @javax.annotation.Nullable
  public String getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public DSource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The container name of this dSource.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DSource namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

   /**
   * The namespace id of this dSource.
   * @return namespaceId
  **/
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public DSource namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

   /**
   * The namespace name of this dSource.
   * @return namespaceName
  **/
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public DSource isReplica(Boolean isReplica) {
    this.isReplica = isReplica;
    return this;
  }

   /**
   * Is this a replicated object.
   * @return isReplica
  **/
  @javax.annotation.Nullable
  public Boolean getIsReplica() {
    return isReplica;
  }

  public void setIsReplica(Boolean isReplica) {
    this.isReplica = isReplica;
  }


  public DSource databaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

   /**
   * The database version of this dSource.
   * @return databaseVersion
  **/
  @javax.annotation.Nullable
  public String getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public DSource contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * The content type of the dSource.
   * @return contentType
  **/
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public DSource dataUuid(String dataUuid) {
    this.dataUuid = dataUuid;
    return this;
  }

   /**
   * A universal ID that uniquely identifies the dSource database.
   * @return dataUuid
  **/
  @javax.annotation.Nullable
  public String getDataUuid() {
    return dataUuid;
  }

  public void setDataUuid(String dataUuid) {
    this.dataUuid = dataUuid;
  }


  public DSource storageSize(Long storageSize) {
    this.storageSize = storageSize;
    return this;
  }

   /**
   * The actual space used by this dSource, in bytes.
   * @return storageSize
  **/
  @javax.annotation.Nullable
  public Long getStorageSize() {
    return storageSize;
  }

  public void setStorageSize(Long storageSize) {
    this.storageSize = storageSize;
  }


  public DSource pluginVersion(String pluginVersion) {
    this.pluginVersion = pluginVersion;
    return this;
  }

   /**
   * The version of the plugin associated with this source database.
   * @return pluginVersion
  **/
  @javax.annotation.Nullable
  public String getPluginVersion() {
    return pluginVersion;
  }

  public void setPluginVersion(String pluginVersion) {
    this.pluginVersion = pluginVersion;
  }


  public DSource creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date this dSource was created.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public DSource groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * The name of the group containing this dSource.
   * @return groupName
  **/
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public DSource enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * A value indicating whether this dSource is enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DSource engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * A reference to the Engine that this dSource belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public DSource sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * A reference to the Source associated with this dSource.
   * @return sourceId
  **/
  @javax.annotation.Nullable
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public DSource status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The runtime status of the dSource. &#39;Unknown&#39; if all attempts to connect to the source failed.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DSource engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * Name of the Engine where this DSource is hosted
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public DSource cdbId(String cdbId) {
    this.cdbId = cdbId;
    return this;
  }

   /**
   * A reference to the CDB associated with this dSource.
   * @return cdbId
  **/
  @javax.annotation.Nullable
  public String getCdbId() {
    return cdbId;
  }

  public void setCdbId(String cdbId) {
    this.cdbId = cdbId;
  }


  public DSource currentTimeflowId(String currentTimeflowId) {
    this.currentTimeflowId = currentTimeflowId;
    return this;
  }

   /**
   * A reference to the currently active timeflow for this dSource.
   * @return currentTimeflowId
  **/
  @javax.annotation.Nullable
  public String getCurrentTimeflowId() {
    return currentTimeflowId;
  }

  public void setCurrentTimeflowId(String currentTimeflowId) {
    this.currentTimeflowId = currentTimeflowId;
  }


  public DSource previousTimeflowId(String previousTimeflowId) {
    this.previousTimeflowId = previousTimeflowId;
    return this;
  }

   /**
   * A reference to the previous timeflow for this dSource.
   * @return previousTimeflowId
  **/
  @javax.annotation.Nullable
  public String getPreviousTimeflowId() {
    return previousTimeflowId;
  }

  public void setPreviousTimeflowId(String previousTimeflowId) {
    this.previousTimeflowId = previousTimeflowId;
  }


  public DSource isAppdata(Boolean isAppdata) {
    this.isAppdata = isAppdata;
    return this;
  }

   /**
   * Indicates whether this dSource has an AppData database.
   * @return isAppdata
  **/
  @javax.annotation.Nullable
  public Boolean getIsAppdata() {
    return isAppdata;
  }

  public void setIsAppdata(Boolean isAppdata) {
    this.isAppdata = isAppdata;
  }


  public DSource toolkitId(String toolkitId) {
    this.toolkitId = toolkitId;
    return this;
  }

   /**
   * The ID of the toolkit associated with this dSource(AppData only).
   * @return toolkitId
  **/
  @javax.annotation.Nullable
  public String getToolkitId() {
    return toolkitId;
  }

  public void setToolkitId(String toolkitId) {
    this.toolkitId = toolkitId;
  }


  public DSource unvirtualizedSpace(Long unvirtualizedSpace) {
    this.unvirtualizedSpace = unvirtualizedSpace;
    return this;
  }

   /**
   * This is the sum of unvirtualized space from the dependants VDBs of the dSource.
   * @return unvirtualizedSpace
  **/
  @javax.annotation.Nullable
  public Long getUnvirtualizedSpace() {
    return unvirtualizedSpace;
  }

  public void setUnvirtualizedSpace(Long unvirtualizedSpace) {
    this.unvirtualizedSpace = unvirtualizedSpace;
  }


  public DSource dependantVdbs(Integer dependantVdbs) {
    this.dependantVdbs = dependantVdbs;
    return this;
  }

   /**
   * The number of VDBs that are dependant on this dSource. This includes all VDB descendants that have this dSource as an ancestor.
   * @return dependantVdbs
  **/
  @javax.annotation.Nullable
  public Integer getDependantVdbs() {
    return dependantVdbs;
  }

  public void setDependantVdbs(Integer dependantVdbs) {
    this.dependantVdbs = dependantVdbs;
  }


  public DSource tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public DSource addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public DSource primaryObjectId(String primaryObjectId) {
    this.primaryObjectId = primaryObjectId;
    return this;
  }

   /**
   * The ID of the parent object from which replication was done.
   * @return primaryObjectId
  **/
  @javax.annotation.Nullable
  public String getPrimaryObjectId() {
    return primaryObjectId;
  }

  public void setPrimaryObjectId(String primaryObjectId) {
    this.primaryObjectId = primaryObjectId;
  }


  public DSource primaryEngineId(String primaryEngineId) {
    this.primaryEngineId = primaryEngineId;
    return this;
  }

   /**
   * The ID of the parent engine from which replication was done.
   * @return primaryEngineId
  **/
  @javax.annotation.Nullable
  public String getPrimaryEngineId() {
    return primaryEngineId;
  }

  public void setPrimaryEngineId(String primaryEngineId) {
    this.primaryEngineId = primaryEngineId;
  }


  public DSource primaryEngineName(String primaryEngineName) {
    this.primaryEngineName = primaryEngineName;
    return this;
  }

   /**
   * The name of the parent engine from which replication was done.
   * @return primaryEngineName
  **/
  @javax.annotation.Nullable
  public String getPrimaryEngineName() {
    return primaryEngineName;
  }

  public void setPrimaryEngineName(String primaryEngineName) {
    this.primaryEngineName = primaryEngineName;
  }


  public DSource replicas(List<Replica> replicas) {
    this.replicas = replicas;
    return this;
  }

  public DSource addReplicasItem(Replica replicasItem) {
    if (this.replicas == null) {
      this.replicas = new ArrayList<>();
    }
    this.replicas.add(replicasItem);
    return this;
  }

   /**
   * The list of replicas replicated from this object.
   * @return replicas
  **/
  @javax.annotation.Nullable
  public List<Replica> getReplicas() {
    return replicas;
  }

  public void setReplicas(List<Replica> replicas) {
    this.replicas = replicas;
  }


  public DSource hooks(DSourceHooks hooks) {
    this.hooks = hooks;
    return this;
  }

   /**
   * Get hooks
   * @return hooks
  **/
  @javax.annotation.Nullable
  public DSourceHooks getHooks() {
    return hooks;
  }

  public void setHooks(DSourceHooks hooks) {
    this.hooks = hooks;
  }


  public DSource syncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
    return this;
  }

   /**
   * The id of the snapshot policy associated with this dSource.
   * @return syncPolicyId
  **/
  @javax.annotation.Nullable
  public String getSyncPolicyId() {
    return syncPolicyId;
  }

  public void setSyncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
  }


  public DSource retentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
    return this;
  }

   /**
   * The id of the retention policy associated with this dSource.
   * @return retentionPolicyId
  **/
  @javax.annotation.Nullable
  public String getRetentionPolicyId() {
    return retentionPolicyId;
  }

  public void setRetentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
  }


  public DSource quotaPolicyId(String quotaPolicyId) {
    this.quotaPolicyId = quotaPolicyId;
    return this;
  }

   /**
   * The id of the quota policy associated with this dSource.
   * @return quotaPolicyId
  **/
  @javax.annotation.Nullable
  public String getQuotaPolicyId() {
    return quotaPolicyId;
  }

  public void setQuotaPolicyId(String quotaPolicyId) {
    this.quotaPolicyId = quotaPolicyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSource dsource = (DSource) o;
    return Objects.equals(this.id, dsource.id) &&
        Objects.equals(this.databaseType, dsource.databaseType) &&
        Objects.equals(this.name, dsource.name) &&
        Objects.equals(this.namespaceId, dsource.namespaceId) &&
        Objects.equals(this.namespaceName, dsource.namespaceName) &&
        Objects.equals(this.isReplica, dsource.isReplica) &&
        Objects.equals(this.databaseVersion, dsource.databaseVersion) &&
        Objects.equals(this.contentType, dsource.contentType) &&
        Objects.equals(this.dataUuid, dsource.dataUuid) &&
        Objects.equals(this.storageSize, dsource.storageSize) &&
        Objects.equals(this.pluginVersion, dsource.pluginVersion) &&
        Objects.equals(this.creationDate, dsource.creationDate) &&
        Objects.equals(this.groupName, dsource.groupName) &&
        Objects.equals(this.enabled, dsource.enabled) &&
        Objects.equals(this.engineId, dsource.engineId) &&
        Objects.equals(this.sourceId, dsource.sourceId) &&
        Objects.equals(this.status, dsource.status) &&
        Objects.equals(this.engineName, dsource.engineName) &&
        Objects.equals(this.cdbId, dsource.cdbId) &&
        Objects.equals(this.currentTimeflowId, dsource.currentTimeflowId) &&
        Objects.equals(this.previousTimeflowId, dsource.previousTimeflowId) &&
        Objects.equals(this.isAppdata, dsource.isAppdata) &&
        Objects.equals(this.toolkitId, dsource.toolkitId) &&
        Objects.equals(this.unvirtualizedSpace, dsource.unvirtualizedSpace) &&
        Objects.equals(this.dependantVdbs, dsource.dependantVdbs) &&
        Objects.equals(this.tags, dsource.tags) &&
        Objects.equals(this.primaryObjectId, dsource.primaryObjectId) &&
        Objects.equals(this.primaryEngineId, dsource.primaryEngineId) &&
        Objects.equals(this.primaryEngineName, dsource.primaryEngineName) &&
        Objects.equals(this.replicas, dsource.replicas) &&
        Objects.equals(this.hooks, dsource.hooks) &&
        Objects.equals(this.syncPolicyId, dsource.syncPolicyId) &&
        Objects.equals(this.retentionPolicyId, dsource.retentionPolicyId) &&
        Objects.equals(this.quotaPolicyId, dsource.quotaPolicyId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, databaseType, name, namespaceId, namespaceName, isReplica, databaseVersion, contentType, dataUuid, storageSize, pluginVersion, creationDate, groupName, enabled, engineId, sourceId, status, engineName, cdbId, currentTimeflowId, previousTimeflowId, isAppdata, toolkitId, unvirtualizedSpace, dependantVdbs, tags, primaryObjectId, primaryEngineId, primaryEngineName, replicas, hooks, syncPolicyId, retentionPolicyId, quotaPolicyId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSource {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    isReplica: ").append(toIndentedString(isReplica)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    dataUuid: ").append(toIndentedString(dataUuid)).append("\n");
    sb.append("    storageSize: ").append(toIndentedString(storageSize)).append("\n");
    sb.append("    pluginVersion: ").append(toIndentedString(pluginVersion)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    cdbId: ").append(toIndentedString(cdbId)).append("\n");
    sb.append("    currentTimeflowId: ").append(toIndentedString(currentTimeflowId)).append("\n");
    sb.append("    previousTimeflowId: ").append(toIndentedString(previousTimeflowId)).append("\n");
    sb.append("    isAppdata: ").append(toIndentedString(isAppdata)).append("\n");
    sb.append("    toolkitId: ").append(toIndentedString(toolkitId)).append("\n");
    sb.append("    unvirtualizedSpace: ").append(toIndentedString(unvirtualizedSpace)).append("\n");
    sb.append("    dependantVdbs: ").append(toIndentedString(dependantVdbs)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    primaryObjectId: ").append(toIndentedString(primaryObjectId)).append("\n");
    sb.append("    primaryEngineId: ").append(toIndentedString(primaryEngineId)).append("\n");
    sb.append("    primaryEngineName: ").append(toIndentedString(primaryEngineName)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    syncPolicyId: ").append(toIndentedString(syncPolicyId)).append("\n");
    sb.append("    retentionPolicyId: ").append(toIndentedString(retentionPolicyId)).append("\n");
    sb.append("    quotaPolicyId: ").append(toIndentedString(quotaPolicyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("database_type");
    openapiFields.add("name");
    openapiFields.add("namespace_id");
    openapiFields.add("namespace_name");
    openapiFields.add("is_replica");
    openapiFields.add("database_version");
    openapiFields.add("content_type");
    openapiFields.add("data_uuid");
    openapiFields.add("storage_size");
    openapiFields.add("plugin_version");
    openapiFields.add("creation_date");
    openapiFields.add("group_name");
    openapiFields.add("enabled");
    openapiFields.add("engine_id");
    openapiFields.add("source_id");
    openapiFields.add("status");
    openapiFields.add("engine_name");
    openapiFields.add("cdb_id");
    openapiFields.add("current_timeflow_id");
    openapiFields.add("previous_timeflow_id");
    openapiFields.add("is_appdata");
    openapiFields.add("toolkit_id");
    openapiFields.add("unvirtualized_space");
    openapiFields.add("dependant_vdbs");
    openapiFields.add("tags");
    openapiFields.add("primary_object_id");
    openapiFields.add("primary_engine_id");
    openapiFields.add("primary_engine_name");
    openapiFields.add("replicas");
    openapiFields.add("hooks");
    openapiFields.add("sync_policy_id");
    openapiFields.add("retention_policy_id");
    openapiFields.add("quota_policy_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DSource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DSource is not found in the empty JSON string", DSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("database_type") != null && !jsonObj.get("database_type").isJsonNull()) && !jsonObj.get("database_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace_id") != null && !jsonObj.get("namespace_id").isJsonNull()) && !jsonObj.get("namespace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_id").toString()));
      }
      if ((jsonObj.get("namespace_name") != null && !jsonObj.get("namespace_name").isJsonNull()) && !jsonObj.get("namespace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_name").toString()));
      }
      if ((jsonObj.get("database_version") != null && !jsonObj.get("database_version").isJsonNull()) && !jsonObj.get("database_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_version").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("data_uuid") != null && !jsonObj.get("data_uuid").isJsonNull()) && !jsonObj.get("data_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_uuid").toString()));
      }
      if ((jsonObj.get("plugin_version") != null && !jsonObj.get("plugin_version").isJsonNull()) && !jsonObj.get("plugin_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugin_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plugin_version").toString()));
      }
      if ((jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonNull()) && !jsonObj.get("group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("source_id") != null && !jsonObj.get("source_id").isJsonNull()) && !jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
      if ((jsonObj.get("cdb_id") != null && !jsonObj.get("cdb_id").isJsonNull()) && !jsonObj.get("cdb_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdb_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdb_id").toString()));
      }
      if ((jsonObj.get("current_timeflow_id") != null && !jsonObj.get("current_timeflow_id").isJsonNull()) && !jsonObj.get("current_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_timeflow_id").toString()));
      }
      if ((jsonObj.get("previous_timeflow_id") != null && !jsonObj.get("previous_timeflow_id").isJsonNull()) && !jsonObj.get("previous_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_timeflow_id").toString()));
      }
      if ((jsonObj.get("toolkit_id") != null && !jsonObj.get("toolkit_id").isJsonNull()) && !jsonObj.get("toolkit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolkit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolkit_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("primary_object_id") != null && !jsonObj.get("primary_object_id").isJsonNull()) && !jsonObj.get("primary_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_object_id").toString()));
      }
      if ((jsonObj.get("primary_engine_id") != null && !jsonObj.get("primary_engine_id").isJsonNull()) && !jsonObj.get("primary_engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_engine_id").toString()));
      }
      if ((jsonObj.get("primary_engine_name") != null && !jsonObj.get("primary_engine_name").isJsonNull()) && !jsonObj.get("primary_engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_engine_name").toString()));
      }
      if (jsonObj.get("replicas") != null && !jsonObj.get("replicas").isJsonNull()) {
        JsonArray jsonArrayreplicas = jsonObj.getAsJsonArray("replicas");
        if (jsonArrayreplicas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicas` to be an array in the JSON string but got `%s`", jsonObj.get("replicas").toString()));
          }

          // validate the optional field `replicas` (array)
          for (int i = 0; i < jsonArrayreplicas.size(); i++) {
            Replica.validateJsonElement(jsonArrayreplicas.get(i));
          };
        }
      }
      // validate the optional field `hooks`
      if (jsonObj.get("hooks") != null && !jsonObj.get("hooks").isJsonNull()) {
        DSourceHooks.validateJsonElement(jsonObj.get("hooks"));
      }
      if ((jsonObj.get("sync_policy_id") != null && !jsonObj.get("sync_policy_id").isJsonNull()) && !jsonObj.get("sync_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_policy_id").toString()));
      }
      if ((jsonObj.get("retention_policy_id") != null && !jsonObj.get("retention_policy_id").isJsonNull()) && !jsonObj.get("retention_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy_id").toString()));
      }
      if ((jsonObj.get("quota_policy_id") != null && !jsonObj.get("quota_policy_id").isJsonNull()) && !jsonObj.get("quota_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quota_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quota_policy_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DSource.class));

       return (TypeAdapter<T>) new TypeAdapter<DSource>() {
           @Override
           public void write(JsonWriter out, DSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DSource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DSource
  * @throws IOException if the JSON string is invalid with respect to DSource
  */
  public static DSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DSource.class);
  }

 /**
  * Convert an instance of DSource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

