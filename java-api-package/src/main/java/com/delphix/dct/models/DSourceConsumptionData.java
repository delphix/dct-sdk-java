/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * DSourceConsumptionData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class DSourceConsumptionData {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_LAST_CONSUMPTION_DATE = "last_consumption_date";
  @SerializedName(SERIALIZED_NAME_LAST_CONSUMPTION_DATE)
  private OffsetDateTime lastConsumptionDate;

  public static final String SERIALIZED_NAME_INGESTED_SIZE = "ingested_size";
  @SerializedName(SERIALIZED_NAME_INGESTED_SIZE)
  private Long ingestedSize;

  public DSourceConsumptionData() {
  }

  public DSourceConsumptionData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the dSource
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DSourceConsumptionData status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the dSource
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DSourceConsumptionData databaseType(String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The type of the dSource
   * @return databaseType
  **/
  @javax.annotation.Nullable
  public String getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public DSourceConsumptionData engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The id of the engine the dSource belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public DSourceConsumptionData engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * The name of the engine the dSource belongs to
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public DSourceConsumptionData lastConsumptionDate(OffsetDateTime lastConsumptionDate) {
    this.lastConsumptionDate = lastConsumptionDate;
    return this;
  }

   /**
   * The most recent date where consumption data was captured for this dSource.
   * @return lastConsumptionDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastConsumptionDate() {
    return lastConsumptionDate;
  }

  public void setLastConsumptionDate(OffsetDateTime lastConsumptionDate) {
    this.lastConsumptionDate = lastConsumptionDate;
  }


  public DSourceConsumptionData ingestedSize(Long ingestedSize) {
    this.ingestedSize = ingestedSize;
    return this;
  }

   /**
   * The ingested size of the dSource
   * minimum: 0
   * @return ingestedSize
  **/
  @javax.annotation.Nullable
  public Long getIngestedSize() {
    return ingestedSize;
  }

  public void setIngestedSize(Long ingestedSize) {
    this.ingestedSize = ingestedSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSourceConsumptionData dsourceConsumptionData = (DSourceConsumptionData) o;
    return Objects.equals(this.name, dsourceConsumptionData.name) &&
        Objects.equals(this.status, dsourceConsumptionData.status) &&
        Objects.equals(this.databaseType, dsourceConsumptionData.databaseType) &&
        Objects.equals(this.engineId, dsourceConsumptionData.engineId) &&
        Objects.equals(this.engineName, dsourceConsumptionData.engineName) &&
        Objects.equals(this.lastConsumptionDate, dsourceConsumptionData.lastConsumptionDate) &&
        Objects.equals(this.ingestedSize, dsourceConsumptionData.ingestedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, status, databaseType, engineId, engineName, lastConsumptionDate, ingestedSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSourceConsumptionData {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    lastConsumptionDate: ").append(toIndentedString(lastConsumptionDate)).append("\n");
    sb.append("    ingestedSize: ").append(toIndentedString(ingestedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("database_type");
    openapiFields.add("engine_id");
    openapiFields.add("engine_name");
    openapiFields.add("last_consumption_date");
    openapiFields.add("ingested_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DSourceConsumptionData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DSourceConsumptionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DSourceConsumptionData is not found in the empty JSON string", DSourceConsumptionData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DSourceConsumptionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DSourceConsumptionData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("database_type") != null && !jsonObj.get("database_type").isJsonNull()) && !jsonObj.get("database_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_type").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DSourceConsumptionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DSourceConsumptionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DSourceConsumptionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DSourceConsumptionData.class));

       return (TypeAdapter<T>) new TypeAdapter<DSourceConsumptionData>() {
           @Override
           public void write(JsonWriter out, DSourceConsumptionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DSourceConsumptionData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DSourceConsumptionData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DSourceConsumptionData
  * @throws IOException if the JSON string is invalid with respect to DSourceConsumptionData
  */
  public static DSourceConsumptionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DSourceConsumptionData.class);
  }

 /**
  * Convert an instance of DSourceConsumptionData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

