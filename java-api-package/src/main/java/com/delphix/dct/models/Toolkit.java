/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A toolkit or plugin.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Toolkit {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_VIRTUAL_SOURCE_DEFINITION = "virtual_source_definition";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_SOURCE_DEFINITION)
  private Map<String, Object> virtualSourceDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKED_SOURCE_DEFINITION = "linked_source_definition";
  @SerializedName(SERIALIZED_NAME_LINKED_SOURCE_DEFINITION)
  private Map<String, Object> linkedSourceDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_DISCOVERY_DEFINITION = "discovery_definition";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_DEFINITION)
  private Map<String, Object> discoveryDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_UPGRADE_DEFINITION = "upgrade_definition";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DEFINITION)
  private Map<String, Object> upgradeDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_SNAPSHOT_PARAMETERS_DEFINITION = "snapshot_parameters_definition";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_PARAMETERS_DEFINITION)
  private Map<String, Object> snapshotParametersDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public Toolkit() {
  }

  public Toolkit id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Id of the toolkit.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Toolkit type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Specifies whether this object is toolkit or plugin
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Toolkit reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * The object reference.
   * @return reference
  **/
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Toolkit engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * Name of the engine.
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public Toolkit engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * Id of the engine.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public Toolkit virtualSourceDefinition(Map<String, Object> virtualSourceDefinition) {
    this.virtualSourceDefinition = virtualSourceDefinition;
    return this;
  }

  public Toolkit putVirtualSourceDefinitionItem(String key, Object virtualSourceDefinitionItem) {
    if (this.virtualSourceDefinition == null) {
      this.virtualSourceDefinition = new HashMap<>();
    }
    this.virtualSourceDefinition.put(key, virtualSourceDefinitionItem);
    return this;
  }

   /**
   * Definition of how to provision virtual sources of this type
   * @return virtualSourceDefinition
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getVirtualSourceDefinition() {
    return virtualSourceDefinition;
  }

  public void setVirtualSourceDefinition(Map<String, Object> virtualSourceDefinition) {
    this.virtualSourceDefinition = virtualSourceDefinition;
  }


  public Toolkit linkedSourceDefinition(Map<String, Object> linkedSourceDefinition) {
    this.linkedSourceDefinition = linkedSourceDefinition;
    return this;
  }

  public Toolkit putLinkedSourceDefinitionItem(String key, Object linkedSourceDefinitionItem) {
    if (this.linkedSourceDefinition == null) {
      this.linkedSourceDefinition = new HashMap<>();
    }
    this.linkedSourceDefinition.put(key, linkedSourceDefinitionItem);
    return this;
  }

   /**
   * Definition of how to link sources of this type.
   * @return linkedSourceDefinition
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getLinkedSourceDefinition() {
    return linkedSourceDefinition;
  }

  public void setLinkedSourceDefinition(Map<String, Object> linkedSourceDefinition) {
    this.linkedSourceDefinition = linkedSourceDefinition;
  }


  public Toolkit discoveryDefinition(Map<String, Object> discoveryDefinition) {
    this.discoveryDefinition = discoveryDefinition;
    return this;
  }

  public Toolkit putDiscoveryDefinitionItem(String key, Object discoveryDefinitionItem) {
    if (this.discoveryDefinition == null) {
      this.discoveryDefinition = new HashMap<>();
    }
    this.discoveryDefinition.put(key, discoveryDefinitionItem);
    return this;
  }

   /**
   * Definition of how to discover sources of this type.
   * @return discoveryDefinition
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getDiscoveryDefinition() {
    return discoveryDefinition;
  }

  public void setDiscoveryDefinition(Map<String, Object> discoveryDefinition) {
    this.discoveryDefinition = discoveryDefinition;
  }


  public Toolkit upgradeDefinition(Map<String, Object> upgradeDefinition) {
    this.upgradeDefinition = upgradeDefinition;
    return this;
  }

  public Toolkit putUpgradeDefinitionItem(String key, Object upgradeDefinitionItem) {
    if (this.upgradeDefinition == null) {
      this.upgradeDefinition = new HashMap<>();
    }
    this.upgradeDefinition.put(key, upgradeDefinitionItem);
    return this;
  }

   /**
   * Definition of how to upgrade sources of this type.
   * @return upgradeDefinition
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getUpgradeDefinition() {
    return upgradeDefinition;
  }

  public void setUpgradeDefinition(Map<String, Object> upgradeDefinition) {
    this.upgradeDefinition = upgradeDefinition;
  }


  public Toolkit snapshotParametersDefinition(Map<String, Object> snapshotParametersDefinition) {
    this.snapshotParametersDefinition = snapshotParametersDefinition;
    return this;
  }

  public Toolkit putSnapshotParametersDefinitionItem(String key, Object snapshotParametersDefinitionItem) {
    if (this.snapshotParametersDefinition == null) {
      this.snapshotParametersDefinition = new HashMap<>();
    }
    this.snapshotParametersDefinition.put(key, snapshotParametersDefinitionItem);
    return this;
  }

   /**
   * The schema that defines the structure of the fields in AppDataSyncParameters.
   * @return snapshotParametersDefinition
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getSnapshotParametersDefinition() {
    return snapshotParametersDefinition;
  }

  public void setSnapshotParametersDefinition(Map<String, Object> snapshotParametersDefinition) {
    this.snapshotParametersDefinition = snapshotParametersDefinition;
  }


  public Toolkit tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Toolkit addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags associated to this toolkit.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Toolkit toolkit = (Toolkit) o;
    return Objects.equals(this.id, toolkit.id) &&
        Objects.equals(this.type, toolkit.type) &&
        Objects.equals(this.reference, toolkit.reference) &&
        Objects.equals(this.engineName, toolkit.engineName) &&
        Objects.equals(this.engineId, toolkit.engineId) &&
        Objects.equals(this.virtualSourceDefinition, toolkit.virtualSourceDefinition) &&
        Objects.equals(this.linkedSourceDefinition, toolkit.linkedSourceDefinition) &&
        Objects.equals(this.discoveryDefinition, toolkit.discoveryDefinition) &&
        Objects.equals(this.upgradeDefinition, toolkit.upgradeDefinition) &&
        Objects.equals(this.snapshotParametersDefinition, toolkit.snapshotParametersDefinition) &&
        Objects.equals(this.tags, toolkit.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, reference, engineName, engineId, virtualSourceDefinition, linkedSourceDefinition, discoveryDefinition, upgradeDefinition, snapshotParametersDefinition, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Toolkit {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    virtualSourceDefinition: ").append(toIndentedString(virtualSourceDefinition)).append("\n");
    sb.append("    linkedSourceDefinition: ").append(toIndentedString(linkedSourceDefinition)).append("\n");
    sb.append("    discoveryDefinition: ").append(toIndentedString(discoveryDefinition)).append("\n");
    sb.append("    upgradeDefinition: ").append(toIndentedString(upgradeDefinition)).append("\n");
    sb.append("    snapshotParametersDefinition: ").append(toIndentedString(snapshotParametersDefinition)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("reference");
    openapiFields.add("engine_name");
    openapiFields.add("engine_id");
    openapiFields.add("virtual_source_definition");
    openapiFields.add("linked_source_definition");
    openapiFields.add("discovery_definition");
    openapiFields.add("upgrade_definition");
    openapiFields.add("snapshot_parameters_definition");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Toolkit
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Toolkit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Toolkit is not found in the empty JSON string", Toolkit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Toolkit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Toolkit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Toolkit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Toolkit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Toolkit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Toolkit.class));

       return (TypeAdapter<T>) new TypeAdapter<Toolkit>() {
           @Override
           public void write(JsonWriter out, Toolkit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Toolkit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Toolkit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Toolkit
  * @throws IOException if the JSON string is invalid with respect to Toolkit
  */
  public static Toolkit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Toolkit.class);
  }

 /**
  * Convert an instance of Toolkit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

