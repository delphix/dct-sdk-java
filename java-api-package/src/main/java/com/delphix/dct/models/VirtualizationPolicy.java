/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.VirtualizationSchedule;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * VirtualizationPolicy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class VirtualizationPolicy {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "namespace_id";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespace_name";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_IS_REPLICA = "is_replica";
  @SerializedName(SERIALIZED_NAME_IS_REPLICA)
  private Boolean isReplica;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  /**
   * Gets or Sets policyType
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
  public enum PolicyTypeEnum {
    REFRESH_POLICY("REFRESH_POLICY"),
    
    SNAPSHOT_POLICY("SNAPSHOT_POLICY"),
    
    SYNC_POLICY("SYNC_POLICY"),
    
    RETENTION_POLICY("RETENTION_POLICY"),
    
    QUOTA_POLICY("QUOTA_POLICY");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policy_type";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  private PolicyTypeEnum policyType;

  public static final String SERIALIZED_NAME_TIMEZONE_ID = "timezone_id";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_ID)
  private String timezoneId;

  public static final String SERIALIZED_NAME_DEFAULT_POLICY = "default_policy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_POLICY)
  private Boolean defaultPolicy;

  /**
   * Whether this policy has been directly applied or inherited. See the effectivePolicies parameter of the list call for details.
   */
  @JsonAdapter(EffectiveTypeEnum.Adapter.class)
  public enum EffectiveTypeEnum {
    DIRECT_APPLIED("DIRECT_APPLIED"),
    
    INHERITED("INHERITED");

    private String value;

    EffectiveTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectiveTypeEnum fromValue(String value) {
      for (EffectiveTypeEnum b : EffectiveTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectiveTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectiveTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectiveTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectiveTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectiveTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECTIVE_TYPE = "effective_type";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_TYPE)
  private EffectiveTypeEnum effectiveType;

  public static final String SERIALIZED_NAME_DATA_DURATION = "data_duration";
  @SerializedName(SERIALIZED_NAME_DATA_DURATION)
  private Integer dataDuration;

  /**
   * Time unit for data_duration [Retention Policy].
   */
  @JsonAdapter(DataUnitEnum.Adapter.class)
  public enum DataUnitEnum {
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH"),
    
    QUARTER("QUARTER"),
    
    YEAR("YEAR");

    private String value;

    DataUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataUnitEnum fromValue(String value) {
      for (DataUnitEnum b : DataUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_UNIT = "data_unit";
  @SerializedName(SERIALIZED_NAME_DATA_UNIT)
  private DataUnitEnum dataUnit;

  public static final String SERIALIZED_NAME_LOG_DURATION = "log_duration";
  @SerializedName(SERIALIZED_NAME_LOG_DURATION)
  private Integer logDuration;

  /**
   * Time unit for log_duration [Retention Policy].
   */
  @JsonAdapter(LogUnitEnum.Adapter.class)
  public enum LogUnitEnum {
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH"),
    
    QUARTER("QUARTER"),
    
    YEAR("YEAR");

    private String value;

    LogUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogUnitEnum fromValue(String value) {
      for (LogUnitEnum b : LogUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_UNIT = "log_unit";
  @SerializedName(SERIALIZED_NAME_LOG_UNIT)
  private LogUnitEnum logUnit;

  public static final String SERIALIZED_NAME_NUM_OF_DAILY = "num_of_daily";
  @SerializedName(SERIALIZED_NAME_NUM_OF_DAILY)
  private Integer numOfDaily;

  public static final String SERIALIZED_NAME_NUM_OF_WEEKLY = "num_of_weekly";
  @SerializedName(SERIALIZED_NAME_NUM_OF_WEEKLY)
  private Integer numOfWeekly;

  /**
   * Day of week upon which to enforce weekly snapshot retention [Retention Policy].
   */
  @JsonAdapter(DayOfWeekEnum.Adapter.class)
  public enum DayOfWeekEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    DayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayOfWeekEnum fromValue(String value) {
      for (DayOfWeekEnum b : DayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayOfWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayOfWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "day_of_week";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private DayOfWeekEnum dayOfWeek;

  public static final String SERIALIZED_NAME_NUM_OF_MONTHLY = "num_of_monthly";
  @SerializedName(SERIALIZED_NAME_NUM_OF_MONTHLY)
  private Integer numOfMonthly;

  public static final String SERIALIZED_NAME_DAY_OF_MONTH = "day_of_month";
  @SerializedName(SERIALIZED_NAME_DAY_OF_MONTH)
  private Integer dayOfMonth;

  public static final String SERIALIZED_NAME_NUM_OF_YEARLY = "num_of_yearly";
  @SerializedName(SERIALIZED_NAME_NUM_OF_YEARLY)
  private Integer numOfYearly;

  public static final String SERIALIZED_NAME_DAY_OF_YEAR = "day_of_year";
  @SerializedName(SERIALIZED_NAME_DAY_OF_YEAR)
  private String dayOfYear;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<VirtualizationSchedule> schedules;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public VirtualizationPolicy() {
  }

  public VirtualizationPolicy id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VirtualizationPolicy name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VirtualizationPolicy namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Get namespace
   * @return namespace
  **/
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public VirtualizationPolicy namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

   /**
   * The namespace id of this virtualization policy.
   * @return namespaceId
  **/
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public VirtualizationPolicy namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

   /**
   * The namespace name of this virtualization policy..
   * @return namespaceName
  **/
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public VirtualizationPolicy isReplica(Boolean isReplica) {
    this.isReplica = isReplica;
    return this;
  }

   /**
   * Is this a replicated object.
   * @return isReplica
  **/
  @javax.annotation.Nullable
  public Boolean getIsReplica() {
    return isReplica;
  }

  public void setIsReplica(Boolean isReplica) {
    this.isReplica = isReplica;
  }


  public VirtualizationPolicy engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * Get engineId
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public VirtualizationPolicy policyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
    return this;
  }

   /**
   * Get policyType
   * @return policyType
  **/
  @javax.annotation.Nullable
  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }

  public void setPolicyType(PolicyTypeEnum policyType) {
    this.policyType = policyType;
  }


  public VirtualizationPolicy timezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
    return this;
  }

   /**
   * Get timezoneId
   * @return timezoneId
  **/
  @javax.annotation.Nullable
  public String getTimezoneId() {
    return timezoneId;
  }

  public void setTimezoneId(String timezoneId) {
    this.timezoneId = timezoneId;
  }


  public VirtualizationPolicy defaultPolicy(Boolean defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
    return this;
  }

   /**
   * True if this is the default policy created when the system is setup.
   * @return defaultPolicy
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultPolicy() {
    return defaultPolicy;
  }

  public void setDefaultPolicy(Boolean defaultPolicy) {
    this.defaultPolicy = defaultPolicy;
  }


  public VirtualizationPolicy effectiveType(EffectiveTypeEnum effectiveType) {
    this.effectiveType = effectiveType;
    return this;
  }

   /**
   * Whether this policy has been directly applied or inherited. See the effectivePolicies parameter of the list call for details.
   * @return effectiveType
  **/
  @javax.annotation.Nullable
  public EffectiveTypeEnum getEffectiveType() {
    return effectiveType;
  }

  public void setEffectiveType(EffectiveTypeEnum effectiveType) {
    this.effectiveType = effectiveType;
  }


  public VirtualizationPolicy dataDuration(Integer dataDuration) {
    this.dataDuration = dataDuration;
    return this;
  }

   /**
   * Amount of time to keep source data [Retention Policy].
   * @return dataDuration
  **/
  @javax.annotation.Nullable
  public Integer getDataDuration() {
    return dataDuration;
  }

  public void setDataDuration(Integer dataDuration) {
    this.dataDuration = dataDuration;
  }


  public VirtualizationPolicy dataUnit(DataUnitEnum dataUnit) {
    this.dataUnit = dataUnit;
    return this;
  }

   /**
   * Time unit for data_duration [Retention Policy].
   * @return dataUnit
  **/
  @javax.annotation.Nullable
  public DataUnitEnum getDataUnit() {
    return dataUnit;
  }

  public void setDataUnit(DataUnitEnum dataUnit) {
    this.dataUnit = dataUnit;
  }


  public VirtualizationPolicy logDuration(Integer logDuration) {
    this.logDuration = logDuration;
    return this;
  }

   /**
   * Amount of time to keep log data [Retention Policy].
   * @return logDuration
  **/
  @javax.annotation.Nullable
  public Integer getLogDuration() {
    return logDuration;
  }

  public void setLogDuration(Integer logDuration) {
    this.logDuration = logDuration;
  }


  public VirtualizationPolicy logUnit(LogUnitEnum logUnit) {
    this.logUnit = logUnit;
    return this;
  }

   /**
   * Time unit for log_duration [Retention Policy].
   * @return logUnit
  **/
  @javax.annotation.Nullable
  public LogUnitEnum getLogUnit() {
    return logUnit;
  }

  public void setLogUnit(LogUnitEnum logUnit) {
    this.logUnit = logUnit;
  }


  public VirtualizationPolicy numOfDaily(Integer numOfDaily) {
    this.numOfDaily = numOfDaily;
    return this;
  }

   /**
   * Number of daily snapshots to keep [Retention Policy].
   * @return numOfDaily
  **/
  @javax.annotation.Nullable
  public Integer getNumOfDaily() {
    return numOfDaily;
  }

  public void setNumOfDaily(Integer numOfDaily) {
    this.numOfDaily = numOfDaily;
  }


  public VirtualizationPolicy numOfWeekly(Integer numOfWeekly) {
    this.numOfWeekly = numOfWeekly;
    return this;
  }

   /**
   * Number of weekly snapshots to keep [Retention Policy].
   * @return numOfWeekly
  **/
  @javax.annotation.Nullable
  public Integer getNumOfWeekly() {
    return numOfWeekly;
  }

  public void setNumOfWeekly(Integer numOfWeekly) {
    this.numOfWeekly = numOfWeekly;
  }


  public VirtualizationPolicy dayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

   /**
   * Day of week upon which to enforce weekly snapshot retention [Retention Policy].
   * @return dayOfWeek
  **/
  @javax.annotation.Nullable
  public DayOfWeekEnum getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(DayOfWeekEnum dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public VirtualizationPolicy numOfMonthly(Integer numOfMonthly) {
    this.numOfMonthly = numOfMonthly;
    return this;
  }

   /**
   * Number of monthly snapshots to keep [Retention Policy].
   * @return numOfMonthly
  **/
  @javax.annotation.Nullable
  public Integer getNumOfMonthly() {
    return numOfMonthly;
  }

  public void setNumOfMonthly(Integer numOfMonthly) {
    this.numOfMonthly = numOfMonthly;
  }


  public VirtualizationPolicy dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

   /**
   * Day of month upon which to enforce monthly snapshot retention [Retention Policy].
   * @return dayOfMonth
  **/
  @javax.annotation.Nullable
  public Integer getDayOfMonth() {
    return dayOfMonth;
  }

  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }


  public VirtualizationPolicy numOfYearly(Integer numOfYearly) {
    this.numOfYearly = numOfYearly;
    return this;
  }

   /**
   * Number of yearly snapshots to keep [Retention Policy].
   * @return numOfYearly
  **/
  @javax.annotation.Nullable
  public Integer getNumOfYearly() {
    return numOfYearly;
  }

  public void setNumOfYearly(Integer numOfYearly) {
    this.numOfYearly = numOfYearly;
  }


  public VirtualizationPolicy dayOfYear(String dayOfYear) {
    this.dayOfYear = dayOfYear;
    return this;
  }

   /**
   * Day of year upon which to enforce yearly snapshot retention, expressed a month / day string (e.g., \&quot;Jan 1\&quot;) [Retention Policy].
   * @return dayOfYear
  **/
  @javax.annotation.Nullable
  public String getDayOfYear() {
    return dayOfYear;
  }

  public void setDayOfYear(String dayOfYear) {
    this.dayOfYear = dayOfYear;
  }


  public VirtualizationPolicy schedules(List<VirtualizationSchedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public VirtualizationPolicy addSchedulesItem(VirtualizationSchedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

   /**
   * Get schedules
   * @return schedules
  **/
  @javax.annotation.Nullable
  public List<VirtualizationSchedule> getSchedules() {
    return schedules;
  }

  public void setSchedules(List<VirtualizationSchedule> schedules) {
    this.schedules = schedules;
  }


  public VirtualizationPolicy size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Size of the quota, in bytes. (QUOTA_POLICY only).
   * @return size
  **/
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualizationPolicy virtualizationPolicy = (VirtualizationPolicy) o;
    return Objects.equals(this.id, virtualizationPolicy.id) &&
        Objects.equals(this.name, virtualizationPolicy.name) &&
        Objects.equals(this.namespace, virtualizationPolicy.namespace) &&
        Objects.equals(this.namespaceId, virtualizationPolicy.namespaceId) &&
        Objects.equals(this.namespaceName, virtualizationPolicy.namespaceName) &&
        Objects.equals(this.isReplica, virtualizationPolicy.isReplica) &&
        Objects.equals(this.engineId, virtualizationPolicy.engineId) &&
        Objects.equals(this.policyType, virtualizationPolicy.policyType) &&
        Objects.equals(this.timezoneId, virtualizationPolicy.timezoneId) &&
        Objects.equals(this.defaultPolicy, virtualizationPolicy.defaultPolicy) &&
        Objects.equals(this.effectiveType, virtualizationPolicy.effectiveType) &&
        Objects.equals(this.dataDuration, virtualizationPolicy.dataDuration) &&
        Objects.equals(this.dataUnit, virtualizationPolicy.dataUnit) &&
        Objects.equals(this.logDuration, virtualizationPolicy.logDuration) &&
        Objects.equals(this.logUnit, virtualizationPolicy.logUnit) &&
        Objects.equals(this.numOfDaily, virtualizationPolicy.numOfDaily) &&
        Objects.equals(this.numOfWeekly, virtualizationPolicy.numOfWeekly) &&
        Objects.equals(this.dayOfWeek, virtualizationPolicy.dayOfWeek) &&
        Objects.equals(this.numOfMonthly, virtualizationPolicy.numOfMonthly) &&
        Objects.equals(this.dayOfMonth, virtualizationPolicy.dayOfMonth) &&
        Objects.equals(this.numOfYearly, virtualizationPolicy.numOfYearly) &&
        Objects.equals(this.dayOfYear, virtualizationPolicy.dayOfYear) &&
        Objects.equals(this.schedules, virtualizationPolicy.schedules) &&
        Objects.equals(this.size, virtualizationPolicy.size);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, namespace, namespaceId, namespaceName, isReplica, engineId, policyType, timezoneId, defaultPolicy, effectiveType, dataDuration, dataUnit, logDuration, logUnit, numOfDaily, numOfWeekly, dayOfWeek, numOfMonthly, dayOfMonth, numOfYearly, dayOfYear, schedules, size);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualizationPolicy {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    isReplica: ").append(toIndentedString(isReplica)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    timezoneId: ").append(toIndentedString(timezoneId)).append("\n");
    sb.append("    defaultPolicy: ").append(toIndentedString(defaultPolicy)).append("\n");
    sb.append("    effectiveType: ").append(toIndentedString(effectiveType)).append("\n");
    sb.append("    dataDuration: ").append(toIndentedString(dataDuration)).append("\n");
    sb.append("    dataUnit: ").append(toIndentedString(dataUnit)).append("\n");
    sb.append("    logDuration: ").append(toIndentedString(logDuration)).append("\n");
    sb.append("    logUnit: ").append(toIndentedString(logUnit)).append("\n");
    sb.append("    numOfDaily: ").append(toIndentedString(numOfDaily)).append("\n");
    sb.append("    numOfWeekly: ").append(toIndentedString(numOfWeekly)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    numOfMonthly: ").append(toIndentedString(numOfMonthly)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    numOfYearly: ").append(toIndentedString(numOfYearly)).append("\n");
    sb.append("    dayOfYear: ").append(toIndentedString(dayOfYear)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("namespace");
    openapiFields.add("namespace_id");
    openapiFields.add("namespace_name");
    openapiFields.add("is_replica");
    openapiFields.add("engine_id");
    openapiFields.add("policy_type");
    openapiFields.add("timezone_id");
    openapiFields.add("default_policy");
    openapiFields.add("effective_type");
    openapiFields.add("data_duration");
    openapiFields.add("data_unit");
    openapiFields.add("log_duration");
    openapiFields.add("log_unit");
    openapiFields.add("num_of_daily");
    openapiFields.add("num_of_weekly");
    openapiFields.add("day_of_week");
    openapiFields.add("num_of_monthly");
    openapiFields.add("day_of_month");
    openapiFields.add("num_of_yearly");
    openapiFields.add("day_of_year");
    openapiFields.add("schedules");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VirtualizationPolicy
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualizationPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualizationPolicy is not found in the empty JSON string", VirtualizationPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualizationPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualizationPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("namespace_id") != null && !jsonObj.get("namespace_id").isJsonNull()) && !jsonObj.get("namespace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_id").toString()));
      }
      if ((jsonObj.get("namespace_name") != null && !jsonObj.get("namespace_name").isJsonNull()) && !jsonObj.get("namespace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_name").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("policy_type") != null && !jsonObj.get("policy_type").isJsonNull()) && !jsonObj.get("policy_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_type").toString()));
      }
      // validate the optional field `policy_type`
      if (jsonObj.get("policy_type") != null && !jsonObj.get("policy_type").isJsonNull()) {
        PolicyTypeEnum.validateJsonElement(jsonObj.get("policy_type"));
      }
      if ((jsonObj.get("timezone_id") != null && !jsonObj.get("timezone_id").isJsonNull()) && !jsonObj.get("timezone_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone_id").toString()));
      }
      if ((jsonObj.get("effective_type") != null && !jsonObj.get("effective_type").isJsonNull()) && !jsonObj.get("effective_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_type").toString()));
      }
      // validate the optional field `effective_type`
      if (jsonObj.get("effective_type") != null && !jsonObj.get("effective_type").isJsonNull()) {
        EffectiveTypeEnum.validateJsonElement(jsonObj.get("effective_type"));
      }
      if ((jsonObj.get("data_unit") != null && !jsonObj.get("data_unit").isJsonNull()) && !jsonObj.get("data_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_unit").toString()));
      }
      // validate the optional field `data_unit`
      if (jsonObj.get("data_unit") != null && !jsonObj.get("data_unit").isJsonNull()) {
        DataUnitEnum.validateJsonElement(jsonObj.get("data_unit"));
      }
      if ((jsonObj.get("log_unit") != null && !jsonObj.get("log_unit").isJsonNull()) && !jsonObj.get("log_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_unit").toString()));
      }
      // validate the optional field `log_unit`
      if (jsonObj.get("log_unit") != null && !jsonObj.get("log_unit").isJsonNull()) {
        LogUnitEnum.validateJsonElement(jsonObj.get("log_unit"));
      }
      if ((jsonObj.get("day_of_week") != null && !jsonObj.get("day_of_week").isJsonNull()) && !jsonObj.get("day_of_week").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_of_week` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_of_week").toString()));
      }
      // validate the optional field `day_of_week`
      if (jsonObj.get("day_of_week") != null && !jsonObj.get("day_of_week").isJsonNull()) {
        DayOfWeekEnum.validateJsonElement(jsonObj.get("day_of_week"));
      }
      if ((jsonObj.get("day_of_year") != null && !jsonObj.get("day_of_year").isJsonNull()) && !jsonObj.get("day_of_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_of_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_of_year").toString()));
      }
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
          }

          // validate the optional field `schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            VirtualizationSchedule.validateJsonElement(jsonArrayschedules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualizationPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualizationPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualizationPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualizationPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualizationPolicy>() {
           @Override
           public void write(JsonWriter out, VirtualizationPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualizationPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VirtualizationPolicy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VirtualizationPolicy
  * @throws IOException if the JSON string is invalid with respect to VirtualizationPolicy
  */
  public static VirtualizationPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualizationPolicy.class);
  }

 /**
  * Convert an instance of VirtualizationPolicy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

