/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A set of rules that define what data is replicated from a source to a target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ReplicationProfile {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_REPLICATION_TAG = "replication_tag";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TAG)
  private String replicationTag;

  public static final String SERIALIZED_NAME_REPLICATION_OBJECTS = "replication_objects";
  @SerializedName(SERIALIZED_NAME_REPLICATION_OBJECTS)
  private List<String> replicationObjects;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_ENABLE_TAG_REPLICATION = "enable_tag_replication";
  @SerializedName(SERIALIZED_NAME_ENABLE_TAG_REPLICATION)
  private Boolean enableTagReplication;

  public static final String SERIALIZED_NAME_BANDWIDTH_LIMIT = "bandwidth_limit";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_LIMIT)
  private Integer bandwidthLimit = 0;

  public static final String SERIALIZED_NAME_NUMBER_OF_CONNECTIONS = "number_of_connections";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CONNECTIONS)
  private Integer numberOfConnections = 1;

  public static final String SERIALIZED_NAME_ENCRYPTED = "encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted = false;

  public static final String SERIALIZED_NAME_AUTOMATIC_REPLICATION = "automatic_replication";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_REPLICATION)
  private Boolean automaticReplication = false;

  public static final String SERIALIZED_NAME_USE_SYSTEM_SOCKS_SETTING = "use_system_socks_setting";
  @SerializedName(SERIALIZED_NAME_USE_SYSTEM_SOCKS_SETTING)
  private Boolean useSystemSocksSetting = false;

  public ReplicationProfile() {
  }

  public ReplicationProfile id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ReplicationProfile ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ReplicationProfile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The ReplicationProfile name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReplicationProfile type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The ReplicationProfile type.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ReplicationProfile description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The ReplicationProfile description.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReplicationProfile schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Replication schedule in the form of a quartz-formatted string.
   * @return schedule
  **/
  @javax.annotation.Nullable
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public ReplicationProfile engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the engine that the ReplicationProfile belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public ReplicationProfile replicationTag(String replicationTag) {
    this.replicationTag = replicationTag;
    return this;
  }

   /**
   * Globally unique identifier for this ReplicationProfile.
   * @return replicationTag
  **/
  @javax.annotation.Nullable
  public String getReplicationTag() {
    return replicationTag;
  }

  public void setReplicationTag(String replicationTag) {
    this.replicationTag = replicationTag;
  }


  public ReplicationProfile replicationObjects(List<String> replicationObjects) {
    this.replicationObjects = replicationObjects;
    return this;
  }

  public ReplicationProfile addReplicationObjectsItem(String replicationObjectsItem) {
    if (this.replicationObjects == null) {
      this.replicationObjects = new ArrayList<>();
    }
    this.replicationObjects.add(replicationObjectsItem);
    return this;
  }

   /**
   * The objects that are replicated by this ReplicationProfile.
   * @return replicationObjects
  **/
  @javax.annotation.Nullable
  public List<String> getReplicationObjects() {
    return replicationObjects;
  }

  public void setReplicationObjects(List<String> replicationObjects) {
    this.replicationObjects = replicationObjects;
  }


  public ReplicationProfile tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public ReplicationProfile addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags that are applied to this ReplicationProfile.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public ReplicationProfile enableTagReplication(Boolean enableTagReplication) {
    this.enableTagReplication = enableTagReplication;
    return this;
  }

   /**
   * Indicates whether tag replication from primary object to replica object is enable or disabled for this ReplicationProfile.
   * @return enableTagReplication
  **/
  @javax.annotation.Nullable
  public Boolean getEnableTagReplication() {
    return enableTagReplication;
  }

  public void setEnableTagReplication(Boolean enableTagReplication) {
    this.enableTagReplication = enableTagReplication;
  }


  public ReplicationProfile bandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Bandwidth limit (MB/s) for replication network traffic. A value of 0 means no limit.
   * minimum: 0
   * @return bandwidthLimit
  **/
  @javax.annotation.Nullable
  public Integer getBandwidthLimit() {
    return bandwidthLimit;
  }

  public void setBandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public ReplicationProfile numberOfConnections(Integer numberOfConnections) {
    this.numberOfConnections = numberOfConnections;
    return this;
  }

   /**
   * Total number of transport connections to use.
   * minimum: 1
   * maximum: 16
   * @return numberOfConnections
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfConnections() {
    return numberOfConnections;
  }

  public void setNumberOfConnections(Integer numberOfConnections) {
    this.numberOfConnections = numberOfConnections;
  }


  public ReplicationProfile encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

   /**
   * Encrypt replication network traffic.
   * @return encrypted
  **/
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public ReplicationProfile automaticReplication(Boolean automaticReplication) {
    this.automaticReplication = automaticReplication;
    return this;
  }

   /**
   * Indication whether the replication spec schedule is enabled or not.
   * @return automaticReplication
  **/
  @javax.annotation.Nullable
  public Boolean getAutomaticReplication() {
    return automaticReplication;
  }

  public void setAutomaticReplication(Boolean automaticReplication) {
    this.automaticReplication = automaticReplication;
  }


  public ReplicationProfile useSystemSocksSetting(Boolean useSystemSocksSetting) {
    this.useSystemSocksSetting = useSystemSocksSetting;
    return this;
  }

   /**
   * Connect to the replication target host via the system-wide SOCKS proxy.
   * @return useSystemSocksSetting
  **/
  @javax.annotation.Nullable
  public Boolean getUseSystemSocksSetting() {
    return useSystemSocksSetting;
  }

  public void setUseSystemSocksSetting(Boolean useSystemSocksSetting) {
    this.useSystemSocksSetting = useSystemSocksSetting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationProfile replicationProfile = (ReplicationProfile) o;
    return Objects.equals(this.id, replicationProfile.id) &&
        Objects.equals(this.name, replicationProfile.name) &&
        Objects.equals(this.type, replicationProfile.type) &&
        Objects.equals(this.description, replicationProfile.description) &&
        Objects.equals(this.schedule, replicationProfile.schedule) &&
        Objects.equals(this.engineId, replicationProfile.engineId) &&
        Objects.equals(this.replicationTag, replicationProfile.replicationTag) &&
        Objects.equals(this.replicationObjects, replicationProfile.replicationObjects) &&
        Objects.equals(this.tags, replicationProfile.tags) &&
        Objects.equals(this.enableTagReplication, replicationProfile.enableTagReplication) &&
        Objects.equals(this.bandwidthLimit, replicationProfile.bandwidthLimit) &&
        Objects.equals(this.numberOfConnections, replicationProfile.numberOfConnections) &&
        Objects.equals(this.encrypted, replicationProfile.encrypted) &&
        Objects.equals(this.automaticReplication, replicationProfile.automaticReplication) &&
        Objects.equals(this.useSystemSocksSetting, replicationProfile.useSystemSocksSetting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, description, schedule, engineId, replicationTag, replicationObjects, tags, enableTagReplication, bandwidthLimit, numberOfConnections, encrypted, automaticReplication, useSystemSocksSetting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationProfile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    replicationTag: ").append(toIndentedString(replicationTag)).append("\n");
    sb.append("    replicationObjects: ").append(toIndentedString(replicationObjects)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    enableTagReplication: ").append(toIndentedString(enableTagReplication)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    numberOfConnections: ").append(toIndentedString(numberOfConnections)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    automaticReplication: ").append(toIndentedString(automaticReplication)).append("\n");
    sb.append("    useSystemSocksSetting: ").append(toIndentedString(useSystemSocksSetting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("description");
    openapiFields.add("schedule");
    openapiFields.add("engine_id");
    openapiFields.add("replication_tag");
    openapiFields.add("replication_objects");
    openapiFields.add("tags");
    openapiFields.add("enable_tag_replication");
    openapiFields.add("bandwidth_limit");
    openapiFields.add("number_of_connections");
    openapiFields.add("encrypted");
    openapiFields.add("automatic_replication");
    openapiFields.add("use_system_socks_setting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ReplicationProfile
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationProfile is not found in the empty JSON string", ReplicationProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) && !jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("replication_tag") != null && !jsonObj.get("replication_tag").isJsonNull()) && !jsonObj.get("replication_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replication_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replication_tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replication_objects") != null && !jsonObj.get("replication_objects").isJsonNull() && !jsonObj.get("replication_objects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replication_objects` to be an array in the JSON string but got `%s`", jsonObj.get("replication_objects").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationProfile>() {
           @Override
           public void write(JsonWriter out, ReplicationProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReplicationProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReplicationProfile
  * @throws IOException if the JSON string is invalid with respect to ReplicationProfile
  */
  public static ReplicationProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationProfile.class);
  }

 /**
  * Convert an instance of ReplicationProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

