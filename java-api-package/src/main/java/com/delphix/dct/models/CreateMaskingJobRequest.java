/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Parameters to create a MaskingJob.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class CreateMaskingJobRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of Job.
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    HYPERSCALE("HYPERSCALE");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "job_type";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID = "hyperscale_instance_id";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_INSTANCE_ID)
  private String hyperscaleInstanceId;

  public static final String SERIALIZED_NAME_SOURCE_MASKING_JOB_ID = "source_masking_job_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_MASKING_JOB_ID)
  private String sourceMaskingJobId;

  public static final String SERIALIZED_NAME_HYPERSCALE_SOURCE_CONNECTOR_USERNAME = "hyperscale_source_connector_username";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_SOURCE_CONNECTOR_USERNAME)
  private String hyperscaleSourceConnectorUsername;

  public static final String SERIALIZED_NAME_HYPERSCALE_SOURCE_CONNECTOR_PASSWORD = "hyperscale_source_connector_password";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_SOURCE_CONNECTOR_PASSWORD)
  private String hyperscaleSourceConnectorPassword;

  public static final String SERIALIZED_NAME_HYPERSCALE_TARGET_CONNECTOR_USERNAME = "hyperscale_target_connector_username";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_TARGET_CONNECTOR_USERNAME)
  private String hyperscaleTargetConnectorUsername;

  public static final String SERIALIZED_NAME_HYPERSCALE_TARGET_CONNECTOR_PASSWORD = "hyperscale_target_connector_password";
  @SerializedName(SERIALIZED_NAME_HYPERSCALE_TARGET_CONNECTOR_PASSWORD)
  private String hyperscaleTargetConnectorPassword;

  public static final String SERIALIZED_NAME_MOUNT_POINT_ID = "mount_point_id";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT_ID)
  private String mountPointId;

  public static final String SERIALIZED_NAME_UNLOAD_SPLIT = "unload_split";
  @SerializedName(SERIALIZED_NAME_UNLOAD_SPLIT)
  private Long unloadSplit;

  public static final String SERIALIZED_NAME_STREAM_SIZE = "stream_size";
  @SerializedName(SERIALIZED_NAME_STREAM_SIZE)
  private Long streamSize;

  /**
   * Defines whether execution data will be stored after execution is complete (Hyperscale Job only).
   */
  @JsonAdapter(RetainExecutionDataEnum.Adapter.class)
  public enum RetainExecutionDataEnum {
    NO("NO"),
    
    ON_ERROR("ON_ERROR"),
    
    ALWAYS("ALWAYS");

    private String value;

    RetainExecutionDataEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RetainExecutionDataEnum fromValue(String value) {
      for (RetainExecutionDataEnum b : RetainExecutionDataEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RetainExecutionDataEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RetainExecutionDataEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RetainExecutionDataEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RetainExecutionDataEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RetainExecutionDataEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RETAIN_EXECUTION_DATA = "retain_execution_data";
  @SerializedName(SERIALIZED_NAME_RETAIN_EXECUTION_DATA)
  private RetainExecutionDataEnum retainExecutionData;

  public static final String SERIALIZED_NAME_MAX_MEMORY = "max_memory";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY)
  private Integer maxMemory;

  public static final String SERIALIZED_NAME_MIN_MEMORY = "min_memory";
  @SerializedName(SERIALIZED_NAME_MIN_MEMORY)
  private Integer minMemory;

  public static final String SERIALIZED_NAME_FEEDBACK_SIZE = "feedback_size";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_SIZE)
  private Integer feedbackSize;

  public static final String SERIALIZED_NAME_STREAM_ROW_LIMIT = "stream_row_limit";
  @SerializedName(SERIALIZED_NAME_STREAM_ROW_LIMIT)
  private Integer streamRowLimit;

  public static final String SERIALIZED_NAME_NUM_INPUT_STREAMS = "num_input_streams";
  @SerializedName(SERIALIZED_NAME_NUM_INPUT_STREAMS)
  private Integer numInputStreams;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_SOURCE_CONNECTIONS = "max_concurrent_source_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_SOURCE_CONNECTIONS)
  private Integer maxConcurrentSourceConnections;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_TARGET_CONNECTIONS = "max_concurrent_target_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_TARGET_CONNECTIONS)
  private Integer maxConcurrentTargetConnections;

  public static final String SERIALIZED_NAME_PARALLELISM_DEGREE = "parallelism_degree";
  @SerializedName(SERIALIZED_NAME_PARALLELISM_DEGREE)
  private Integer parallelismDegree;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public CreateMaskingJobRequest() {
  }

  public CreateMaskingJobRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name to give the Masking Job.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateMaskingJobRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the Job (Hyperscale Job only).
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateMaskingJobRequest jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

   /**
   * The type of Job.
   * @return jobType
  **/
  @javax.annotation.Nullable
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public CreateMaskingJobRequest hyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
    return this;
  }

   /**
   * The ID of the HyperscaleInstance to create this Job on (Hyperscale Job only).
   * @return hyperscaleInstanceId
  **/
  @javax.annotation.Nullable
  public String getHyperscaleInstanceId() {
    return hyperscaleInstanceId;
  }

  public void setHyperscaleInstanceId(String hyperscaleInstanceId) {
    this.hyperscaleInstanceId = hyperscaleInstanceId;
  }


  public CreateMaskingJobRequest sourceMaskingJobId(String sourceMaskingJobId) {
    this.sourceMaskingJobId = sourceMaskingJobId;
    return this;
  }

   /**
   * The ID of the Masking Job to use as the source (Hyperscale Job only).
   * @return sourceMaskingJobId
  **/
  @javax.annotation.Nullable
  public String getSourceMaskingJobId() {
    return sourceMaskingJobId;
  }

  public void setSourceMaskingJobId(String sourceMaskingJobId) {
    this.sourceMaskingJobId = sourceMaskingJobId;
  }


  public CreateMaskingJobRequest hyperscaleSourceConnectorUsername(String hyperscaleSourceConnectorUsername) {
    this.hyperscaleSourceConnectorUsername = hyperscaleSourceConnectorUsername;
    return this;
  }

   /**
   * The username to set for the Source Connector that will be imported (Hyperscale Job only).
   * @return hyperscaleSourceConnectorUsername
  **/
  @javax.annotation.Nullable
  public String getHyperscaleSourceConnectorUsername() {
    return hyperscaleSourceConnectorUsername;
  }

  public void setHyperscaleSourceConnectorUsername(String hyperscaleSourceConnectorUsername) {
    this.hyperscaleSourceConnectorUsername = hyperscaleSourceConnectorUsername;
  }


  public CreateMaskingJobRequest hyperscaleSourceConnectorPassword(String hyperscaleSourceConnectorPassword) {
    this.hyperscaleSourceConnectorPassword = hyperscaleSourceConnectorPassword;
    return this;
  }

   /**
   * The password to set for the Source Connector that will be imported (Hyperscale Job only).
   * @return hyperscaleSourceConnectorPassword
  **/
  @javax.annotation.Nullable
  public String getHyperscaleSourceConnectorPassword() {
    return hyperscaleSourceConnectorPassword;
  }

  public void setHyperscaleSourceConnectorPassword(String hyperscaleSourceConnectorPassword) {
    this.hyperscaleSourceConnectorPassword = hyperscaleSourceConnectorPassword;
  }


  public CreateMaskingJobRequest hyperscaleTargetConnectorUsername(String hyperscaleTargetConnectorUsername) {
    this.hyperscaleTargetConnectorUsername = hyperscaleTargetConnectorUsername;
    return this;
  }

   /**
   * The username to set for the Target Connector that will be imported (Hyperscale Job only).
   * @return hyperscaleTargetConnectorUsername
  **/
  @javax.annotation.Nullable
  public String getHyperscaleTargetConnectorUsername() {
    return hyperscaleTargetConnectorUsername;
  }

  public void setHyperscaleTargetConnectorUsername(String hyperscaleTargetConnectorUsername) {
    this.hyperscaleTargetConnectorUsername = hyperscaleTargetConnectorUsername;
  }


  public CreateMaskingJobRequest hyperscaleTargetConnectorPassword(String hyperscaleTargetConnectorPassword) {
    this.hyperscaleTargetConnectorPassword = hyperscaleTargetConnectorPassword;
    return this;
  }

   /**
   * The password to set for the Target Connector that will be imported (Hyperscale Job only).
   * @return hyperscaleTargetConnectorPassword
  **/
  @javax.annotation.Nullable
  public String getHyperscaleTargetConnectorPassword() {
    return hyperscaleTargetConnectorPassword;
  }

  public void setHyperscaleTargetConnectorPassword(String hyperscaleTargetConnectorPassword) {
    this.hyperscaleTargetConnectorPassword = hyperscaleTargetConnectorPassword;
  }


  public CreateMaskingJobRequest mountPointId(String mountPointId) {
    this.mountPointId = mountPointId;
    return this;
  }

   /**
   * The ID of the MountPoint to use for the resulting dataset (Hyperscale Job only).
   * @return mountPointId
  **/
  @javax.annotation.Nullable
  public String getMountPointId() {
    return mountPointId;
  }

  public void setMountPointId(String mountPointId) {
    this.mountPointId = mountPointId;
  }


  public CreateMaskingJobRequest unloadSplit(Long unloadSplit) {
    this.unloadSplit = unloadSplit;
    return this;
  }

   /**
   * The number of unloaded files to be generated from the source database (Hyperscale Job only).
   * @return unloadSplit
  **/
  @javax.annotation.Nullable
  public Long getUnloadSplit() {
    return unloadSplit;
  }

  public void setUnloadSplit(Long unloadSplit) {
    this.unloadSplit = unloadSplit;
  }


  public CreateMaskingJobRequest streamSize(Long streamSize) {
    this.streamSize = streamSize;
    return this;
  }

   /**
   * The stream size to be used by the sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server (Hyperscale Job only).
   * @return streamSize
  **/
  @javax.annotation.Nullable
  public Long getStreamSize() {
    return streamSize;
  }

  public void setStreamSize(Long streamSize) {
    this.streamSize = streamSize;
  }


  public CreateMaskingJobRequest retainExecutionData(RetainExecutionDataEnum retainExecutionData) {
    this.retainExecutionData = retainExecutionData;
    return this;
  }

   /**
   * Defines whether execution data will be stored after execution is complete (Hyperscale Job only).
   * @return retainExecutionData
  **/
  @javax.annotation.Nullable
  public RetainExecutionDataEnum getRetainExecutionData() {
    return retainExecutionData;
  }

  public void setRetainExecutionData(RetainExecutionDataEnum retainExecutionData) {
    this.retainExecutionData = retainExecutionData;
  }


  public CreateMaskingJobRequest maxMemory(Integer maxMemory) {
    this.maxMemory = maxMemory;
    return this;
  }

   /**
   * Maximum memory, in MB, to be allocated for each Masking job (Hyperscale Job only).
   * @return maxMemory
  **/
  @javax.annotation.Nullable
  public Integer getMaxMemory() {
    return maxMemory;
  }

  public void setMaxMemory(Integer maxMemory) {
    this.maxMemory = maxMemory;
  }


  public CreateMaskingJobRequest minMemory(Integer minMemory) {
    this.minMemory = minMemory;
    return this;
  }

   /**
   * Minimum memory, in MB, to be allocated for each Masking job (Hyperscale Job only).
   * @return minMemory
  **/
  @javax.annotation.Nullable
  public Integer getMinMemory() {
    return minMemory;
  }

  public void setMinMemory(Integer minMemory) {
    this.minMemory = minMemory;
  }


  public CreateMaskingJobRequest feedbackSize(Integer feedbackSize) {
    this.feedbackSize = feedbackSize;
    return this;
  }

   /**
   * The granularity with which the masking engine provides updates on the progress of the masking job. For instance, a feedbackSize of 50000 results in log updates whenever 50000 rows are processed during the masking phase (Hyperscale Job only).
   * @return feedbackSize
  **/
  @javax.annotation.Nullable
  public Integer getFeedbackSize() {
    return feedbackSize;
  }

  public void setFeedbackSize(Integer feedbackSize) {
    this.feedbackSize = feedbackSize;
  }


  public CreateMaskingJobRequest streamRowLimit(Integer streamRowLimit) {
    this.streamRowLimit = streamRowLimit;
    return this;
  }

   /**
   * The stream row limit constrains the total number of rows that may enter the job for each masking stream. Setting this value to 0 allows unlimited rows into each stream, while leaving it blank will select a default limit based on job type (Hyperscale Job only).
   * @return streamRowLimit
  **/
  @javax.annotation.Nullable
  public Integer getStreamRowLimit() {
    return streamRowLimit;
  }

  public void setStreamRowLimit(Integer streamRowLimit) {
    this.streamRowLimit = streamRowLimit;
  }


  public CreateMaskingJobRequest numInputStreams(Integer numInputStreams) {
    this.numInputStreams = numInputStreams;
    return this;
  }

   /**
   * Number of input streams to be configured for Masking Job (Hyperscale Job only).
   * @return numInputStreams
  **/
  @javax.annotation.Nullable
  public Integer getNumInputStreams() {
    return numInputStreams;
  }

  public void setNumInputStreams(Integer numInputStreams) {
    this.numInputStreams = numInputStreams;
  }


  public CreateMaskingJobRequest maxConcurrentSourceConnections(Integer maxConcurrentSourceConnections) {
    this.maxConcurrentSourceConnections = maxConcurrentSourceConnections;
    return this;
  }

   /**
   * Maximum number of parallel connection that the Hyperscale instance can have with the source datasource (Hyperscale Job only).
   * @return maxConcurrentSourceConnections
  **/
  @javax.annotation.Nullable
  public Integer getMaxConcurrentSourceConnections() {
    return maxConcurrentSourceConnections;
  }

  public void setMaxConcurrentSourceConnections(Integer maxConcurrentSourceConnections) {
    this.maxConcurrentSourceConnections = maxConcurrentSourceConnections;
  }


  public CreateMaskingJobRequest maxConcurrentTargetConnections(Integer maxConcurrentTargetConnections) {
    this.maxConcurrentTargetConnections = maxConcurrentTargetConnections;
    return this;
  }

   /**
   * Maximum number of parallel connection that the Hyperscale instance can have with the target datasource (Hyperscale Job only).
   * @return maxConcurrentTargetConnections
  **/
  @javax.annotation.Nullable
  public Integer getMaxConcurrentTargetConnections() {
    return maxConcurrentTargetConnections;
  }

  public void setMaxConcurrentTargetConnections(Integer maxConcurrentTargetConnections) {
    this.maxConcurrentTargetConnections = maxConcurrentTargetConnections;
  }


  public CreateMaskingJobRequest parallelismDegree(Integer parallelismDegree) {
    this.parallelismDegree = parallelismDegree;
    return this;
  }

   /**
   * The degree of parallelism (DOP) per Oracle job to recreate the index in the post-load process (Hyperscale Job only).
   * @return parallelismDegree
  **/
  @javax.annotation.Nullable
  public Integer getParallelismDegree() {
    return parallelismDegree;
  }

  public void setParallelismDegree(Integer parallelismDegree) {
    this.parallelismDegree = parallelismDegree;
  }


  public CreateMaskingJobRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateMaskingJobRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateMaskingJobRequest makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this Masking job must be configured as owner of it (Hyperscale Job only).
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMaskingJobRequest createMaskingJobRequest = (CreateMaskingJobRequest) o;
    return Objects.equals(this.name, createMaskingJobRequest.name) &&
        Objects.equals(this.description, createMaskingJobRequest.description) &&
        Objects.equals(this.jobType, createMaskingJobRequest.jobType) &&
        Objects.equals(this.hyperscaleInstanceId, createMaskingJobRequest.hyperscaleInstanceId) &&
        Objects.equals(this.sourceMaskingJobId, createMaskingJobRequest.sourceMaskingJobId) &&
        Objects.equals(this.hyperscaleSourceConnectorUsername, createMaskingJobRequest.hyperscaleSourceConnectorUsername) &&
        Objects.equals(this.hyperscaleSourceConnectorPassword, createMaskingJobRequest.hyperscaleSourceConnectorPassword) &&
        Objects.equals(this.hyperscaleTargetConnectorUsername, createMaskingJobRequest.hyperscaleTargetConnectorUsername) &&
        Objects.equals(this.hyperscaleTargetConnectorPassword, createMaskingJobRequest.hyperscaleTargetConnectorPassword) &&
        Objects.equals(this.mountPointId, createMaskingJobRequest.mountPointId) &&
        Objects.equals(this.unloadSplit, createMaskingJobRequest.unloadSplit) &&
        Objects.equals(this.streamSize, createMaskingJobRequest.streamSize) &&
        Objects.equals(this.retainExecutionData, createMaskingJobRequest.retainExecutionData) &&
        Objects.equals(this.maxMemory, createMaskingJobRequest.maxMemory) &&
        Objects.equals(this.minMemory, createMaskingJobRequest.minMemory) &&
        Objects.equals(this.feedbackSize, createMaskingJobRequest.feedbackSize) &&
        Objects.equals(this.streamRowLimit, createMaskingJobRequest.streamRowLimit) &&
        Objects.equals(this.numInputStreams, createMaskingJobRequest.numInputStreams) &&
        Objects.equals(this.maxConcurrentSourceConnections, createMaskingJobRequest.maxConcurrentSourceConnections) &&
        Objects.equals(this.maxConcurrentTargetConnections, createMaskingJobRequest.maxConcurrentTargetConnections) &&
        Objects.equals(this.parallelismDegree, createMaskingJobRequest.parallelismDegree) &&
        Objects.equals(this.tags, createMaskingJobRequest.tags) &&
        Objects.equals(this.makeCurrentAccountOwner, createMaskingJobRequest.makeCurrentAccountOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, jobType, hyperscaleInstanceId, sourceMaskingJobId, hyperscaleSourceConnectorUsername, hyperscaleSourceConnectorPassword, hyperscaleTargetConnectorUsername, hyperscaleTargetConnectorPassword, mountPointId, unloadSplit, streamSize, retainExecutionData, maxMemory, minMemory, feedbackSize, streamRowLimit, numInputStreams, maxConcurrentSourceConnections, maxConcurrentTargetConnections, parallelismDegree, tags, makeCurrentAccountOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMaskingJobRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    hyperscaleInstanceId: ").append(toIndentedString(hyperscaleInstanceId)).append("\n");
    sb.append("    sourceMaskingJobId: ").append(toIndentedString(sourceMaskingJobId)).append("\n");
    sb.append("    hyperscaleSourceConnectorUsername: ").append(toIndentedString(hyperscaleSourceConnectorUsername)).append("\n");
    sb.append("    hyperscaleSourceConnectorPassword: ").append(toIndentedString(hyperscaleSourceConnectorPassword)).append("\n");
    sb.append("    hyperscaleTargetConnectorUsername: ").append(toIndentedString(hyperscaleTargetConnectorUsername)).append("\n");
    sb.append("    hyperscaleTargetConnectorPassword: ").append(toIndentedString(hyperscaleTargetConnectorPassword)).append("\n");
    sb.append("    mountPointId: ").append(toIndentedString(mountPointId)).append("\n");
    sb.append("    unloadSplit: ").append(toIndentedString(unloadSplit)).append("\n");
    sb.append("    streamSize: ").append(toIndentedString(streamSize)).append("\n");
    sb.append("    retainExecutionData: ").append(toIndentedString(retainExecutionData)).append("\n");
    sb.append("    maxMemory: ").append(toIndentedString(maxMemory)).append("\n");
    sb.append("    minMemory: ").append(toIndentedString(minMemory)).append("\n");
    sb.append("    feedbackSize: ").append(toIndentedString(feedbackSize)).append("\n");
    sb.append("    streamRowLimit: ").append(toIndentedString(streamRowLimit)).append("\n");
    sb.append("    numInputStreams: ").append(toIndentedString(numInputStreams)).append("\n");
    sb.append("    maxConcurrentSourceConnections: ").append(toIndentedString(maxConcurrentSourceConnections)).append("\n");
    sb.append("    maxConcurrentTargetConnections: ").append(toIndentedString(maxConcurrentTargetConnections)).append("\n");
    sb.append("    parallelismDegree: ").append(toIndentedString(parallelismDegree)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("job_type");
    openapiFields.add("hyperscale_instance_id");
    openapiFields.add("source_masking_job_id");
    openapiFields.add("hyperscale_source_connector_username");
    openapiFields.add("hyperscale_source_connector_password");
    openapiFields.add("hyperscale_target_connector_username");
    openapiFields.add("hyperscale_target_connector_password");
    openapiFields.add("mount_point_id");
    openapiFields.add("unload_split");
    openapiFields.add("stream_size");
    openapiFields.add("retain_execution_data");
    openapiFields.add("max_memory");
    openapiFields.add("min_memory");
    openapiFields.add("feedback_size");
    openapiFields.add("stream_row_limit");
    openapiFields.add("num_input_streams");
    openapiFields.add("max_concurrent_source_connections");
    openapiFields.add("max_concurrent_target_connections");
    openapiFields.add("parallelism_degree");
    openapiFields.add("tags");
    openapiFields.add("make_current_account_owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateMaskingJobRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateMaskingJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMaskingJobRequest is not found in the empty JSON string", CreateMaskingJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateMaskingJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMaskingJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("job_type") != null && !jsonObj.get("job_type").isJsonNull()) && !jsonObj.get("job_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_type").toString()));
      }
      // validate the optional field `job_type`
      if (jsonObj.get("job_type") != null && !jsonObj.get("job_type").isJsonNull()) {
        JobTypeEnum.validateJsonElement(jsonObj.get("job_type"));
      }
      if ((jsonObj.get("hyperscale_instance_id") != null && !jsonObj.get("hyperscale_instance_id").isJsonNull()) && !jsonObj.get("hyperscale_instance_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_instance_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_instance_id").toString()));
      }
      if ((jsonObj.get("source_masking_job_id") != null && !jsonObj.get("source_masking_job_id").isJsonNull()) && !jsonObj.get("source_masking_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_masking_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_masking_job_id").toString()));
      }
      if ((jsonObj.get("hyperscale_source_connector_username") != null && !jsonObj.get("hyperscale_source_connector_username").isJsonNull()) && !jsonObj.get("hyperscale_source_connector_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_source_connector_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_source_connector_username").toString()));
      }
      if ((jsonObj.get("hyperscale_source_connector_password") != null && !jsonObj.get("hyperscale_source_connector_password").isJsonNull()) && !jsonObj.get("hyperscale_source_connector_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_source_connector_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_source_connector_password").toString()));
      }
      if ((jsonObj.get("hyperscale_target_connector_username") != null && !jsonObj.get("hyperscale_target_connector_username").isJsonNull()) && !jsonObj.get("hyperscale_target_connector_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_target_connector_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_target_connector_username").toString()));
      }
      if ((jsonObj.get("hyperscale_target_connector_password") != null && !jsonObj.get("hyperscale_target_connector_password").isJsonNull()) && !jsonObj.get("hyperscale_target_connector_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperscale_target_connector_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperscale_target_connector_password").toString()));
      }
      if ((jsonObj.get("mount_point_id") != null && !jsonObj.get("mount_point_id").isJsonNull()) && !jsonObj.get("mount_point_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_point_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_point_id").toString()));
      }
      if ((jsonObj.get("retain_execution_data") != null && !jsonObj.get("retain_execution_data").isJsonNull()) && !jsonObj.get("retain_execution_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retain_execution_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retain_execution_data").toString()));
      }
      // validate the optional field `retain_execution_data`
      if (jsonObj.get("retain_execution_data") != null && !jsonObj.get("retain_execution_data").isJsonNull()) {
        RetainExecutionDataEnum.validateJsonElement(jsonObj.get("retain_execution_data"));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMaskingJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMaskingJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMaskingJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMaskingJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMaskingJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateMaskingJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMaskingJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateMaskingJobRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateMaskingJobRequest
  * @throws IOException if the JSON string is invalid with respect to CreateMaskingJobRequest
  */
  public static CreateMaskingJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMaskingJobRequest.class);
  }

 /**
  * Convert an instance of CreateMaskingJobRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

