/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * An API classification object which classifies APIs as automation or governance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ApiClassificationObject {
  /**
   * HTTP method of the API.
   */
  @JsonAdapter(ApiMethodEnum.Adapter.class)
  public enum ApiMethodEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE");

    private String value;

    ApiMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiMethodEnum fromValue(String value) {
      for (ApiMethodEnum b : ApiMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_METHOD = "api_method";
  @SerializedName(SERIALIZED_NAME_API_METHOD)
  private ApiMethodEnum apiMethod;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_IS_AUTOMATION = "is_automation";
  @SerializedName(SERIALIZED_NAME_IS_AUTOMATION)
  private Boolean isAutomation;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public ApiClassificationObject() {
  }

  public ApiClassificationObject apiMethod(ApiMethodEnum apiMethod) {
    this.apiMethod = apiMethod;
    return this;
  }

   /**
   * HTTP method of the API.
   * @return apiMethod
  **/
  @javax.annotation.Nullable
  public ApiMethodEnum getApiMethod() {
    return apiMethod;
  }

  public void setApiMethod(ApiMethodEnum apiMethod) {
    this.apiMethod = apiMethod;
  }


  public ApiClassificationObject path(String path) {
    this.path = path;
    return this;
  }

   /**
   * context path of the API.
   * @return path
  **/
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApiClassificationObject isAutomation(Boolean isAutomation) {
    this.isAutomation = isAutomation;
    return this;
  }

   /**
   * Either this API is automation or not.
   * @return isAutomation
  **/
  @javax.annotation.Nullable
  public Boolean getIsAutomation() {
    return isAutomation;
  }

  public void setIsAutomation(Boolean isAutomation) {
    this.isAutomation = isAutomation;
  }


  public ApiClassificationObject startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * The start date and time from when this api&#39;s is_automation definition has changed.
   * @return startDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ApiClassificationObject endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * The end date and time from when this api&#39;s is_automation definition has changed.
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiClassificationObject apiClassificationObject = (ApiClassificationObject) o;
    return Objects.equals(this.apiMethod, apiClassificationObject.apiMethod) &&
        Objects.equals(this.path, apiClassificationObject.path) &&
        Objects.equals(this.isAutomation, apiClassificationObject.isAutomation) &&
        Objects.equals(this.startDate, apiClassificationObject.startDate) &&
        Objects.equals(this.endDate, apiClassificationObject.endDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiMethod, path, isAutomation, startDate, endDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiClassificationObject {\n");
    sb.append("    apiMethod: ").append(toIndentedString(apiMethod)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    isAutomation: ").append(toIndentedString(isAutomation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_method");
    openapiFields.add("path");
    openapiFields.add("is_automation");
    openapiFields.add("start_date");
    openapiFields.add("end_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ApiClassificationObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiClassificationObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiClassificationObject is not found in the empty JSON string", ApiClassificationObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiClassificationObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiClassificationObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_method") != null && !jsonObj.get("api_method").isJsonNull()) && !jsonObj.get("api_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_method").toString()));
      }
      // validate the optional field `api_method`
      if (jsonObj.get("api_method") != null && !jsonObj.get("api_method").isJsonNull()) {
        ApiMethodEnum.validateJsonElement(jsonObj.get("api_method"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiClassificationObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiClassificationObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiClassificationObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiClassificationObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiClassificationObject>() {
           @Override
           public void write(JsonWriter out, ApiClassificationObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiClassificationObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApiClassificationObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApiClassificationObject
  * @throws IOException if the JSON string is invalid with respect to ApiClassificationObject
  */
  public static ApiClassificationObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiClassificationObject.class);
  }

 /**
  * Convert an instance of ApiClassificationObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

