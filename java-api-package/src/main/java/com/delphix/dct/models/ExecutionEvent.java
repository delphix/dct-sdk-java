/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Events, such as warnings or errors, associated with job executions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class ExecutionEvent {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXECUTION_ID = "execution_id";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
  private String executionId;

  /**
   * The type of execution event.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    JOB_ABORTED("JOB_ABORTED"),
    
    UNMASKED_DATA("UNMASKED_DATA"),
    
    MASKING_FALLBACK("MASKING_FALLBACK");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  /**
   * The severity of the execution event.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("INFO"),
    
    WARNING("WARNING"),
    
    CRITICAL("CRITICAL");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * The cause of the execution event.
   */
  @JsonAdapter(CauseEnum.Adapter.class)
  public enum CauseEnum {
    UNHANDLED_EXCEPTION("UNHANDLED_EXCEPTION"),
    
    IGNORED_EXCEPTION("IGNORED_EXCEPTION"),
    
    PATTERN_MATCH_FAILURE("PATTERN_MATCH_FAILURE"),
    
    PREMASK_TYPE_CONVERSION_FAILURE("PREMASK_TYPE_CONVERSION_FAILURE"),
    
    POSTMASK_TYPE_CONVERSION_FAILURE("POSTMASK_TYPE_CONVERSION_FAILURE"),
    
    EXTENDED_ALGORITHM_FAILURE("EXTENDED_ALGORITHM_FAILURE"),
    
    DRIVER_SUPPORT_TASK_FAILURE("DRIVER_SUPPORT_TASK_FAILURE"),
    
    DATA_NOT_FOUND_FAILURE("DATA_NOT_FOUND_FAILURE");

    private String value;

    CauseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CauseEnum fromValue(String value) {
      for (CauseEnum b : CauseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CauseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CauseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CauseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CauseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CauseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private CauseEnum cause;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_MASKED_OBJECT_NAME = "masked_object_name";
  @SerializedName(SERIALIZED_NAME_MASKED_OBJECT_NAME)
  private String maskedObjectName;

  public static final String SERIALIZED_NAME_ALGORITHM_NAME = "algorithm_name";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_NAME)
  private String algorithmName;

  public static final String SERIALIZED_NAME_EXCEPTION_TYPE = "exception_type";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_TYPE)
  private String exceptionType;

  public static final String SERIALIZED_NAME_EXCEPTION_DETAIL = "exception_detail";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_DETAIL)
  private String exceptionDetail;

  public ExecutionEvent() {
  }

  public ExecutionEvent id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ExecutionEvent entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExecutionEvent executionId(String executionId) {
    this.executionId = executionId;
    return this;
  }

   /**
   * The ID of the execution.
   * @return executionId
  **/
  @javax.annotation.Nullable
  public String getExecutionId() {
    return executionId;
  }

  public void setExecutionId(String executionId) {
    this.executionId = executionId;
  }


  public ExecutionEvent eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

   /**
   * The type of execution event.
   * @return eventType
  **/
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public ExecutionEvent severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

   /**
   * The severity of the execution event.
   * @return severity
  **/
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public ExecutionEvent cause(CauseEnum cause) {
    this.cause = cause;
    return this;
  }

   /**
   * The cause of the execution event.
   * @return cause
  **/
  @javax.annotation.Nullable
  public CauseEnum getCause() {
    return cause;
  }

  public void setCause(CauseEnum cause) {
    this.cause = cause;
  }


  public ExecutionEvent count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * The number of times the execution event occurred.
   * @return count
  **/
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public ExecutionEvent timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The date and time that this execution event first occurred.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ExecutionEvent maskedObjectName(String maskedObjectName) {
    this.maskedObjectName = maskedObjectName;
    return this;
  }

   /**
   * The name of the column, field, or other object being masked when this event occurred, if applicable.
   * @return maskedObjectName
  **/
  @javax.annotation.Nullable
  public String getMaskedObjectName() {
    return maskedObjectName;
  }

  public void setMaskedObjectName(String maskedObjectName) {
    this.maskedObjectName = maskedObjectName;
  }


  public ExecutionEvent algorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

   /**
   * The name of the masking algorithm running when this event occurred, if applicable.
   * @return algorithmName
  **/
  @javax.annotation.Nullable
  public String getAlgorithmName() {
    return algorithmName;
  }

  public void setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
  }


  public ExecutionEvent exceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
    return this;
  }

   /**
   * The Java class of the exception that triggered this event, if applicable.
   * @return exceptionType
  **/
  @javax.annotation.Nullable
  public String getExceptionType() {
    return exceptionType;
  }

  public void setExceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
  }


  public ExecutionEvent exceptionDetail(String exceptionDetail) {
    this.exceptionDetail = exceptionDetail;
    return this;
  }

   /**
   * The details associated with the Java exception that triggered this event, if applicable.
   * @return exceptionDetail
  **/
  @javax.annotation.Nullable
  public String getExceptionDetail() {
    return exceptionDetail;
  }

  public void setExceptionDetail(String exceptionDetail) {
    this.exceptionDetail = exceptionDetail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionEvent executionEvent = (ExecutionEvent) o;
    return Objects.equals(this.id, executionEvent.id) &&
        Objects.equals(this.executionId, executionEvent.executionId) &&
        Objects.equals(this.eventType, executionEvent.eventType) &&
        Objects.equals(this.severity, executionEvent.severity) &&
        Objects.equals(this.cause, executionEvent.cause) &&
        Objects.equals(this.count, executionEvent.count) &&
        Objects.equals(this.timestamp, executionEvent.timestamp) &&
        Objects.equals(this.maskedObjectName, executionEvent.maskedObjectName) &&
        Objects.equals(this.algorithmName, executionEvent.algorithmName) &&
        Objects.equals(this.exceptionType, executionEvent.exceptionType) &&
        Objects.equals(this.exceptionDetail, executionEvent.exceptionDetail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, executionId, eventType, severity, cause, count, timestamp, maskedObjectName, algorithmName, exceptionType, exceptionDetail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    executionId: ").append(toIndentedString(executionId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    maskedObjectName: ").append(toIndentedString(maskedObjectName)).append("\n");
    sb.append("    algorithmName: ").append(toIndentedString(algorithmName)).append("\n");
    sb.append("    exceptionType: ").append(toIndentedString(exceptionType)).append("\n");
    sb.append("    exceptionDetail: ").append(toIndentedString(exceptionDetail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("execution_id");
    openapiFields.add("event_type");
    openapiFields.add("severity");
    openapiFields.add("cause");
    openapiFields.add("count");
    openapiFields.add("timestamp");
    openapiFields.add("masked_object_name");
    openapiFields.add("algorithm_name");
    openapiFields.add("exception_type");
    openapiFields.add("exception_detail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExecutionEvent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExecutionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecutionEvent is not found in the empty JSON string", ExecutionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExecutionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExecutionEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("execution_id") != null && !jsonObj.get("execution_id").isJsonNull()) && !jsonObj.get("execution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution_id").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // validate the optional field `event_type`
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("event_type"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) && !jsonObj.get("cause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cause").toString()));
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        CauseEnum.validateJsonElement(jsonObj.get("cause"));
      }
      if ((jsonObj.get("masked_object_name") != null && !jsonObj.get("masked_object_name").isJsonNull()) && !jsonObj.get("masked_object_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masked_object_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masked_object_name").toString()));
      }
      if ((jsonObj.get("algorithm_name") != null && !jsonObj.get("algorithm_name").isJsonNull()) && !jsonObj.get("algorithm_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm_name").toString()));
      }
      if ((jsonObj.get("exception_type") != null && !jsonObj.get("exception_type").isJsonNull()) && !jsonObj.get("exception_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception_type").toString()));
      }
      if ((jsonObj.get("exception_detail") != null && !jsonObj.get("exception_detail").isJsonNull()) && !jsonObj.get("exception_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception_detail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecutionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecutionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecutionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecutionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecutionEvent>() {
           @Override
           public void write(JsonWriter out, ExecutionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecutionEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecutionEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecutionEvent
  * @throws IOException if the JSON string is invalid with respect to ExecutionEvent
  */
  public static ExecutionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecutionEvent.class);
  }

 /**
  * Convert an instance of ExecutionEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

