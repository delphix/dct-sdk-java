/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Virtualization Engine Timeflow of a dSource or VDB.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class Timeflow {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "namespace_id";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespace_name";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_IS_REPLICA = "is_replica";
  @SerializedName(SERIALIZED_NAME_IS_REPLICA)
  private Boolean isReplica;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATASET_ID = "dataset_id";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  /**
   * The source action that created the timeflow.
   */
  @JsonAdapter(CreationTypeEnum.Adapter.class)
  public enum CreationTypeEnum {
    INITIAL("INITIAL"),
    
    INDETERMINATE("INDETERMINATE"),
    
    REFRESH("REFRESH"),
    
    ROLLBACK("ROLLBACK"),
    
    TEMPORARY("TEMPORARY"),
    
    TRANSFORMATION("TRANSFORMATION"),
    
    V2P("V2P"),
    
    PDB_PLUG("PDB_PLUG"),
    
    ORACLE_LIVE_SOURCE_RESYNC("ORACLE_LIVE_SOURCE_RESYNC"),
    
    SOURCE_CONTINUITY("SOURCE_CONTINUITY");

    private String value;

    CreationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreationTypeEnum fromValue(String value) {
      for (CreationTypeEnum b : CreationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATION_TYPE = "creation_type";
  @SerializedName(SERIALIZED_NAME_CREATION_TYPE)
  private CreationTypeEnum creationType;

  public static final String SERIALIZED_NAME_PARENT_SNAPSHOT_ID = "parent_snapshot_id";
  @SerializedName(SERIALIZED_NAME_PARENT_SNAPSHOT_ID)
  private String parentSnapshotId;

  public static final String SERIALIZED_NAME_PARENT_POINT_LOCATION = "parent_point_location";
  @SerializedName(SERIALIZED_NAME_PARENT_POINT_LOCATION)
  private String parentPointLocation;

  public static final String SERIALIZED_NAME_PARENT_POINT_TIMESTAMP = "parent_point_timestamp";
  @SerializedName(SERIALIZED_NAME_PARENT_POINT_TIMESTAMP)
  private OffsetDateTime parentPointTimestamp;

  public static final String SERIALIZED_NAME_PARENT_POINT_TIMEFLOW_ID = "parent_point_timeflow_id";
  @SerializedName(SERIALIZED_NAME_PARENT_POINT_TIMEFLOW_ID)
  private String parentPointTimeflowId;

  public static final String SERIALIZED_NAME_SOURCE_DATA_TIMESTAMP = "source_data_timestamp";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_TIMESTAMP)
  private OffsetDateTime sourceDataTimestamp;

  public static final String SERIALIZED_NAME_ORACLE_INCARNATION_ID = "oracle_incarnation_id";
  @SerializedName(SERIALIZED_NAME_ORACLE_INCARNATION_ID)
  private String oracleIncarnationId;

  public static final String SERIALIZED_NAME_ORACLE_CDB_TIMEFLOW_ID = "oracle_cdb_timeflow_id";
  @SerializedName(SERIALIZED_NAME_ORACLE_CDB_TIMEFLOW_ID)
  private String oracleCdbTimeflowId;

  public static final String SERIALIZED_NAME_ORACLE_TDE_UUID = "oracle_tde_uuid";
  @SerializedName(SERIALIZED_NAME_ORACLE_TDE_UUID)
  private String oracleTdeUuid;

  public static final String SERIALIZED_NAME_MSSQL_DATABASE_GUID = "mssql_database_guid";
  @SerializedName(SERIALIZED_NAME_MSSQL_DATABASE_GUID)
  private String mssqlDatabaseGuid;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_CREATION_TIMESTAMP = "creation_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATION_TIMESTAMP)
  private OffsetDateTime creationTimestamp;

  public static final String SERIALIZED_NAME_ACTIVATION_TIMESTAMP = "activation_timestamp";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TIMESTAMP)
  private OffsetDateTime activationTimestamp;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public Timeflow() {
  }

  public Timeflow id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The Timeflow ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Timeflow engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the engine the timeflow belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public Timeflow namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

   /**
   * Alternate namespace for this object, for replicated and restored timeflows.
   * @return namespace
  **/
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public Timeflow namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

   /**
   * The namespace id of this timeflows.
   * @return namespaceId
  **/
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public Timeflow namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

   /**
   * The namespace name of this timeflows.
   * @return namespaceName
  **/
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public Timeflow isReplica(Boolean isReplica) {
    this.isReplica = isReplica;
    return this;
  }

   /**
   * Is this a replicated object.
   * @return isReplica
  **/
  @javax.annotation.Nullable
  public Boolean getIsReplica() {
    return isReplica;
  }

  public void setIsReplica(Boolean isReplica) {
    this.isReplica = isReplica;
  }


  public Timeflow name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The timeflow&#39;s name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Timeflow datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

   /**
   * The ID of the timeflow&#39;s dSource or VDB.
   * @return datasetId
  **/
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public Timeflow creationType(CreationTypeEnum creationType) {
    this.creationType = creationType;
    return this;
  }

   /**
   * The source action that created the timeflow.
   * @return creationType
  **/
  @javax.annotation.Nullable
  public CreationTypeEnum getCreationType() {
    return creationType;
  }

  public void setCreationType(CreationTypeEnum creationType) {
    this.creationType = creationType;
  }


  public Timeflow parentSnapshotId(String parentSnapshotId) {
    this.parentSnapshotId = parentSnapshotId;
    return this;
  }

   /**
   * The ID of the timeflow&#39;s parent snapshot.
   * @return parentSnapshotId
  **/
  @javax.annotation.Nullable
  public String getParentSnapshotId() {
    return parentSnapshotId;
  }

  public void setParentSnapshotId(String parentSnapshotId) {
    this.parentSnapshotId = parentSnapshotId;
  }


  public Timeflow parentPointLocation(String parentPointLocation) {
    this.parentPointLocation = parentPointLocation;
    return this;
  }

   /**
   * The location on the parent timeflow from which this timeflow was provisioned. This will not be present for timeflows derived from linked sources.
   * @return parentPointLocation
  **/
  @javax.annotation.Nullable
  public String getParentPointLocation() {
    return parentPointLocation;
  }

  public void setParentPointLocation(String parentPointLocation) {
    this.parentPointLocation = parentPointLocation;
  }


  public Timeflow parentPointTimestamp(OffsetDateTime parentPointTimestamp) {
    this.parentPointTimestamp = parentPointTimestamp;
    return this;
  }

   /**
   * The timestamp on the parent timeflow from which this timeflow was provisioned. This will not be present for timeflows derived from linked sources.
   * @return parentPointTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getParentPointTimestamp() {
    return parentPointTimestamp;
  }

  public void setParentPointTimestamp(OffsetDateTime parentPointTimestamp) {
    this.parentPointTimestamp = parentPointTimestamp;
  }


  public Timeflow parentPointTimeflowId(String parentPointTimeflowId) {
    this.parentPointTimeflowId = parentPointTimeflowId;
    return this;
  }

   /**
   * A reference to the parent timeflow from which this timeflow was provisioned. This will not be present for timeflows derived from linked sources.
   * @return parentPointTimeflowId
  **/
  @javax.annotation.Nullable
  public String getParentPointTimeflowId() {
    return parentPointTimeflowId;
  }

  public void setParentPointTimeflowId(String parentPointTimeflowId) {
    this.parentPointTimeflowId = parentPointTimeflowId;
  }


  public Timeflow sourceDataTimestamp(OffsetDateTime sourceDataTimestamp) {
    this.sourceDataTimestamp = sourceDataTimestamp;
    return this;
  }

   /**
   * The timestamp on the root ancestor timeflow from which this timeflow originated. This logical time acts as reference to the origin source data.
   * @return sourceDataTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSourceDataTimestamp() {
    return sourceDataTimestamp;
  }

  public void setSourceDataTimestamp(OffsetDateTime sourceDataTimestamp) {
    this.sourceDataTimestamp = sourceDataTimestamp;
  }


  public Timeflow oracleIncarnationId(String oracleIncarnationId) {
    this.oracleIncarnationId = oracleIncarnationId;
    return this;
  }

   /**
   * Oracle-specific incarnation identifier for this timeflow.
   * @return oracleIncarnationId
  **/
  @javax.annotation.Nullable
  public String getOracleIncarnationId() {
    return oracleIncarnationId;
  }

  public void setOracleIncarnationId(String oracleIncarnationId) {
    this.oracleIncarnationId = oracleIncarnationId;
  }


  public Timeflow oracleCdbTimeflowId(String oracleCdbTimeflowId) {
    this.oracleCdbTimeflowId = oracleCdbTimeflowId;
    return this;
  }

   /**
   * A reference to the mirror CDB timeflow if this is a timeflow for a PDB.
   * @return oracleCdbTimeflowId
  **/
  @javax.annotation.Nullable
  public String getOracleCdbTimeflowId() {
    return oracleCdbTimeflowId;
  }

  public void setOracleCdbTimeflowId(String oracleCdbTimeflowId) {
    this.oracleCdbTimeflowId = oracleCdbTimeflowId;
  }


  public Timeflow oracleTdeUuid(String oracleTdeUuid) {
    this.oracleTdeUuid = oracleTdeUuid;
    return this;
  }

   /**
   * The unique identifier for timeflow-specific TDE objects that reside outside of Delphix storage.
   * @return oracleTdeUuid
  **/
  @javax.annotation.Nullable
  public String getOracleTdeUuid() {
    return oracleTdeUuid;
  }

  public void setOracleTdeUuid(String oracleTdeUuid) {
    this.oracleTdeUuid = oracleTdeUuid;
  }


  public Timeflow mssqlDatabaseGuid(String mssqlDatabaseGuid) {
    this.mssqlDatabaseGuid = mssqlDatabaseGuid;
    return this;
  }

   /**
   * MSSQL-specific recovery branch identifier for this timeflow.
   * @return mssqlDatabaseGuid
  **/
  @javax.annotation.Nullable
  public String getMssqlDatabaseGuid() {
    return mssqlDatabaseGuid;
  }

  public void setMssqlDatabaseGuid(String mssqlDatabaseGuid) {
    this.mssqlDatabaseGuid = mssqlDatabaseGuid;
  }


  public Timeflow isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * Whether this timeflow is currently active or not.
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Timeflow creationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

   /**
   * The time when the timeflow was created.
   * @return creationTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimestamp() {
    return creationTimestamp;
  }

  public void setCreationTimestamp(OffsetDateTime creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }


  public Timeflow activationTimestamp(OffsetDateTime activationTimestamp) {
    this.activationTimestamp = activationTimestamp;
    return this;
  }

   /**
   * The time when this timeflow became active.
   * @return activationTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getActivationTimestamp() {
    return activationTimestamp;
  }

  public void setActivationTimestamp(OffsetDateTime activationTimestamp) {
    this.activationTimestamp = activationTimestamp;
  }


  public Timeflow tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Timeflow addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeflow timeflow = (Timeflow) o;
    return Objects.equals(this.id, timeflow.id) &&
        Objects.equals(this.engineId, timeflow.engineId) &&
        Objects.equals(this.namespace, timeflow.namespace) &&
        Objects.equals(this.namespaceId, timeflow.namespaceId) &&
        Objects.equals(this.namespaceName, timeflow.namespaceName) &&
        Objects.equals(this.isReplica, timeflow.isReplica) &&
        Objects.equals(this.name, timeflow.name) &&
        Objects.equals(this.datasetId, timeflow.datasetId) &&
        Objects.equals(this.creationType, timeflow.creationType) &&
        Objects.equals(this.parentSnapshotId, timeflow.parentSnapshotId) &&
        Objects.equals(this.parentPointLocation, timeflow.parentPointLocation) &&
        Objects.equals(this.parentPointTimestamp, timeflow.parentPointTimestamp) &&
        Objects.equals(this.parentPointTimeflowId, timeflow.parentPointTimeflowId) &&
        Objects.equals(this.sourceDataTimestamp, timeflow.sourceDataTimestamp) &&
        Objects.equals(this.oracleIncarnationId, timeflow.oracleIncarnationId) &&
        Objects.equals(this.oracleCdbTimeflowId, timeflow.oracleCdbTimeflowId) &&
        Objects.equals(this.oracleTdeUuid, timeflow.oracleTdeUuid) &&
        Objects.equals(this.mssqlDatabaseGuid, timeflow.mssqlDatabaseGuid) &&
        Objects.equals(this.isActive, timeflow.isActive) &&
        Objects.equals(this.creationTimestamp, timeflow.creationTimestamp) &&
        Objects.equals(this.activationTimestamp, timeflow.activationTimestamp) &&
        Objects.equals(this.tags, timeflow.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, engineId, namespace, namespaceId, namespaceName, isReplica, name, datasetId, creationType, parentSnapshotId, parentPointLocation, parentPointTimestamp, parentPointTimeflowId, sourceDataTimestamp, oracleIncarnationId, oracleCdbTimeflowId, oracleTdeUuid, mssqlDatabaseGuid, isActive, creationTimestamp, activationTimestamp, tags);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeflow {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    isReplica: ").append(toIndentedString(isReplica)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    creationType: ").append(toIndentedString(creationType)).append("\n");
    sb.append("    parentSnapshotId: ").append(toIndentedString(parentSnapshotId)).append("\n");
    sb.append("    parentPointLocation: ").append(toIndentedString(parentPointLocation)).append("\n");
    sb.append("    parentPointTimestamp: ").append(toIndentedString(parentPointTimestamp)).append("\n");
    sb.append("    parentPointTimeflowId: ").append(toIndentedString(parentPointTimeflowId)).append("\n");
    sb.append("    sourceDataTimestamp: ").append(toIndentedString(sourceDataTimestamp)).append("\n");
    sb.append("    oracleIncarnationId: ").append(toIndentedString(oracleIncarnationId)).append("\n");
    sb.append("    oracleCdbTimeflowId: ").append(toIndentedString(oracleCdbTimeflowId)).append("\n");
    sb.append("    oracleTdeUuid: ").append(toIndentedString(oracleTdeUuid)).append("\n");
    sb.append("    mssqlDatabaseGuid: ").append(toIndentedString(mssqlDatabaseGuid)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    activationTimestamp: ").append(toIndentedString(activationTimestamp)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("engine_id");
    openapiFields.add("namespace");
    openapiFields.add("namespace_id");
    openapiFields.add("namespace_name");
    openapiFields.add("is_replica");
    openapiFields.add("name");
    openapiFields.add("dataset_id");
    openapiFields.add("creation_type");
    openapiFields.add("parent_snapshot_id");
    openapiFields.add("parent_point_location");
    openapiFields.add("parent_point_timestamp");
    openapiFields.add("parent_point_timeflow_id");
    openapiFields.add("source_data_timestamp");
    openapiFields.add("oracle_incarnation_id");
    openapiFields.add("oracle_cdb_timeflow_id");
    openapiFields.add("oracle_tde_uuid");
    openapiFields.add("mssql_database_guid");
    openapiFields.add("is_active");
    openapiFields.add("creation_timestamp");
    openapiFields.add("activation_timestamp");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Timeflow
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Timeflow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeflow is not found in the empty JSON string", Timeflow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Timeflow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timeflow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("namespace_id") != null && !jsonObj.get("namespace_id").isJsonNull()) && !jsonObj.get("namespace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_id").toString()));
      }
      if ((jsonObj.get("namespace_name") != null && !jsonObj.get("namespace_name").isJsonNull()) && !jsonObj.get("namespace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("dataset_id") != null && !jsonObj.get("dataset_id").isJsonNull()) && !jsonObj.get("dataset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset_id").toString()));
      }
      if ((jsonObj.get("creation_type") != null && !jsonObj.get("creation_type").isJsonNull()) && !jsonObj.get("creation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_type").toString()));
      }
      // validate the optional field `creation_type`
      if (jsonObj.get("creation_type") != null && !jsonObj.get("creation_type").isJsonNull()) {
        CreationTypeEnum.validateJsonElement(jsonObj.get("creation_type"));
      }
      if ((jsonObj.get("parent_snapshot_id") != null && !jsonObj.get("parent_snapshot_id").isJsonNull()) && !jsonObj.get("parent_snapshot_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_snapshot_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_snapshot_id").toString()));
      }
      if ((jsonObj.get("parent_point_location") != null && !jsonObj.get("parent_point_location").isJsonNull()) && !jsonObj.get("parent_point_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_point_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_point_location").toString()));
      }
      if ((jsonObj.get("parent_point_timeflow_id") != null && !jsonObj.get("parent_point_timeflow_id").isJsonNull()) && !jsonObj.get("parent_point_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_point_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_point_timeflow_id").toString()));
      }
      if ((jsonObj.get("oracle_incarnation_id") != null && !jsonObj.get("oracle_incarnation_id").isJsonNull()) && !jsonObj.get("oracle_incarnation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_incarnation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_incarnation_id").toString()));
      }
      if ((jsonObj.get("oracle_cdb_timeflow_id") != null && !jsonObj.get("oracle_cdb_timeflow_id").isJsonNull()) && !jsonObj.get("oracle_cdb_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_cdb_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_cdb_timeflow_id").toString()));
      }
      if ((jsonObj.get("oracle_tde_uuid") != null && !jsonObj.get("oracle_tde_uuid").isJsonNull()) && !jsonObj.get("oracle_tde_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oracle_tde_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oracle_tde_uuid").toString()));
      }
      if ((jsonObj.get("mssql_database_guid") != null && !jsonObj.get("mssql_database_guid").isJsonNull()) && !jsonObj.get("mssql_database_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mssql_database_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mssql_database_guid").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeflow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeflow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeflow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeflow.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeflow>() {
           @Override
           public void write(JsonWriter out, Timeflow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeflow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Timeflow given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Timeflow
  * @throws IOException if the JSON string is invalid with respect to Timeflow
  */
  public static Timeflow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeflow.class);
  }

 /**
  * Convert an instance of Timeflow to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

