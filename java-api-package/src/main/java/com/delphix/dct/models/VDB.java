/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.AdditionalMountPoint;
import com.delphix.dct.models.Replica;
import com.delphix.dct.models.Tag;
import com.delphix.dct.models.VirtualDatasetHooks;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * A Delphix virtual database or dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class VDB {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "database_type";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "namespace_id";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespace_name";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_IS_REPLICA = "is_replica";
  @SerializedName(SERIALIZED_NAME_IS_REPLICA)
  private Boolean isReplica;

  public static final String SERIALIZED_NAME_IS_LOCKED = "is_locked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_LOCKED_BY = "locked_by";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  private Long lockedBy;

  public static final String SERIALIZED_NAME_LOCKED_BY_NAME = "locked_by_name";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY_NAME)
  private String lockedByName;

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "database_version";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private String databaseVersion;

  public static final String SERIALIZED_NAME_JDBC_CONNECTION_STRING = "jdbc_connection_string";
  @SerializedName(SERIALIZED_NAME_JDBC_CONNECTION_STRING)
  private String jdbcConnectionString;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_STORAGE_SIZE = "storage_size";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE)
  private Long storageSize;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MASKED = "masked";
  @SerializedName(SERIALIZED_NAME_MASKED)
  private Boolean masked;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_PARENT_TIMEFLOW_TIMESTAMP = "parent_timeflow_timestamp";
  @SerializedName(SERIALIZED_NAME_PARENT_TIMEFLOW_TIMESTAMP)
  private OffsetDateTime parentTimeflowTimestamp;

  public static final String SERIALIZED_NAME_PARENT_TIMEFLOW_TIMEZONE = "parent_timeflow_timezone";
  @SerializedName(SERIALIZED_NAME_PARENT_TIMEFLOW_TIMEZONE)
  private String parentTimeflowTimezone;

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environment_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private String environmentId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PARENT_DSOURCE_ID = "parent_dsource_id";
  @SerializedName(SERIALIZED_NAME_PARENT_DSOURCE_ID)
  private String parentDsourceId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ENGINE_NAME = "engine_name";
  @SerializedName(SERIALIZED_NAME_ENGINE_NAME)
  private String engineName;

  public static final String SERIALIZED_NAME_CDB_ID = "cdb_id";
  @SerializedName(SERIALIZED_NAME_CDB_ID)
  private String cdbId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_HOOKS = "hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private VirtualDatasetHooks hooks;

  public static final String SERIALIZED_NAME_APPDATA_SOURCE_PARAMS = "appdata_source_params";
  @SerializedName(SERIALIZED_NAME_APPDATA_SOURCE_PARAMS)
  private Map<String, Object> appdataSourceParams;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_CONFIG_PARAMS = "config_params";
  @SerializedName(SERIALIZED_NAME_CONFIG_PARAMS)
  private Map<String, Object> configParams;

  public static final String SERIALIZED_NAME_ADDITIONAL_MOUNT_POINTS = "additional_mount_points";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_MOUNT_POINTS)
  private List<AdditionalMountPoint> additionalMountPoints;

  public static final String SERIALIZED_NAME_APPDATA_CONFIG_PARAMS = "appdata_config_params";
  @SerializedName(SERIALIZED_NAME_APPDATA_CONFIG_PARAMS)
  private Map<String, Object> appdataConfigParams;

  public static final String SERIALIZED_NAME_MOUNT_POINT = "mount_point";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINT)
  private String mountPoint;

  public static final String SERIALIZED_NAME_CURRENT_TIMEFLOW_ID = "current_timeflow_id";
  @SerializedName(SERIALIZED_NAME_CURRENT_TIMEFLOW_ID)
  private String currentTimeflowId;

  public static final String SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID = "previous_timeflow_id";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TIMEFLOW_ID)
  private String previousTimeflowId;

  public static final String SERIALIZED_NAME_LAST_REFRESHED_DATE = "last_refreshed_date";
  @SerializedName(SERIALIZED_NAME_LAST_REFRESHED_DATE)
  private OffsetDateTime lastRefreshedDate;

  public static final String SERIALIZED_NAME_VDB_RESTART = "vdb_restart";
  @SerializedName(SERIALIZED_NAME_VDB_RESTART)
  private Boolean vdbRestart;

  public static final String SERIALIZED_NAME_IS_APPDATA = "is_appdata";
  @SerializedName(SERIALIZED_NAME_IS_APPDATA)
  private Boolean isAppdata;

  public static final String SERIALIZED_NAME_TOOLKIT_ID = "toolkit_id";
  @SerializedName(SERIALIZED_NAME_TOOLKIT_ID)
  private String toolkitId;

  public static final String SERIALIZED_NAME_PLUGIN_VERSION = "plugin_version";
  @SerializedName(SERIALIZED_NAME_PLUGIN_VERSION)
  private String pluginVersion;

  public static final String SERIALIZED_NAME_PRIMARY_OBJECT_ID = "primary_object_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_OBJECT_ID)
  private String primaryObjectId;

  public static final String SERIALIZED_NAME_PRIMARY_ENGINE_ID = "primary_engine_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENGINE_ID)
  private String primaryEngineId;

  public static final String SERIALIZED_NAME_PRIMARY_ENGINE_NAME = "primary_engine_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENGINE_NAME)
  private String primaryEngineName;

  public static final String SERIALIZED_NAME_REPLICAS = "replicas";
  @SerializedName(SERIALIZED_NAME_REPLICAS)
  private List<Replica> replicas;

  public VDB() {
  }

  public VDB id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The VDB object entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VDB databaseType(String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

   /**
   * The database type of this VDB.
   * @return databaseType
  **/
  @javax.annotation.Nullable
  public String getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public VDB name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The container name of this VDB.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public VDB namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

   /**
   * The namespace id of this VDB.
   * @return namespaceId
  **/
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public VDB namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

   /**
   * The namespace name of this VDB.
   * @return namespaceName
  **/
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public VDB isReplica(Boolean isReplica) {
    this.isReplica = isReplica;
    return this;
  }

   /**
   * Is this a replicated object.
   * @return isReplica
  **/
  @javax.annotation.Nullable
  public Boolean getIsReplica() {
    return isReplica;
  }

  public void setIsReplica(Boolean isReplica) {
    this.isReplica = isReplica;
  }


  public VDB isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

   /**
   * Is this VDB locked.
   * @return isLocked
  **/
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public VDB lockedBy(Long lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

   /**
   * The ID of the account that locked this VDB.
   * @return lockedBy
  **/
  @javax.annotation.Nullable
  public Long getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(Long lockedBy) {
    this.lockedBy = lockedBy;
  }


  public VDB lockedByName(String lockedByName) {
    this.lockedByName = lockedByName;
    return this;
  }

   /**
   * The name of the account that locked this VDB.
   * @return lockedByName
  **/
  @javax.annotation.Nullable
  public String getLockedByName() {
    return lockedByName;
  }

  public void setLockedByName(String lockedByName) {
    this.lockedByName = lockedByName;
  }


  public VDB databaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

   /**
   * The database version of this VDB.
   * @return databaseVersion
  **/
  @javax.annotation.Nullable
  public String getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(String databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public VDB jdbcConnectionString(String jdbcConnectionString) {
    this.jdbcConnectionString = jdbcConnectionString;
    return this;
  }

   /**
   * The JDBC connection URL for this VDB.
   * @return jdbcConnectionString
  **/
  @javax.annotation.Nullable
  public String getJdbcConnectionString() {
    return jdbcConnectionString;
  }

  public void setJdbcConnectionString(String jdbcConnectionString) {
    this.jdbcConnectionString = jdbcConnectionString;
  }


  public VDB size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The total size of this VDB, in bytes.
   * @return size
  **/
  @javax.annotation.Nullable
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public VDB storageSize(Long storageSize) {
    this.storageSize = storageSize;
    return this;
  }

   /**
   * The actual space used by this VDB, in bytes.
   * @return storageSize
  **/
  @javax.annotation.Nullable
  public Long getStorageSize() {
    return storageSize;
  }

  public void setStorageSize(Long storageSize) {
    this.storageSize = storageSize;
  }


  public VDB engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * A reference to the Engine that this VDB belongs to.
   * @return engineId
  **/
  @javax.annotation.Nullable
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public VDB status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The runtime status of the VDB. &#39;Unknown&#39; if all attempts to connect to the dataset failed.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public VDB masked(Boolean masked) {
    this.masked = masked;
    return this;
  }

   /**
   * The VDB is masked or not.
   * @return masked
  **/
  @javax.annotation.Nullable
  public Boolean getMasked() {
    return masked;
  }

  public void setMasked(Boolean masked) {
    this.masked = masked;
  }


  public VDB contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * The content type of the vdb.
   * @return contentType
  **/
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public VDB parentTimeflowTimestamp(OffsetDateTime parentTimeflowTimestamp) {
    this.parentTimeflowTimestamp = parentTimeflowTimestamp;
    return this;
  }

   /**
   * The timestamp for parent timeflow.
   * @return parentTimeflowTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getParentTimeflowTimestamp() {
    return parentTimeflowTimestamp;
  }

  public void setParentTimeflowTimestamp(OffsetDateTime parentTimeflowTimestamp) {
    this.parentTimeflowTimestamp = parentTimeflowTimestamp;
  }


  public VDB parentTimeflowTimezone(String parentTimeflowTimezone) {
    this.parentTimeflowTimezone = parentTimeflowTimezone;
    return this;
  }

   /**
   * The timezone for parent timeflow.
   * @return parentTimeflowTimezone
  **/
  @javax.annotation.Nullable
  public String getParentTimeflowTimezone() {
    return parentTimeflowTimezone;
  }

  public void setParentTimeflowTimezone(String parentTimeflowTimezone) {
    this.parentTimeflowTimezone = parentTimeflowTimezone;
  }


  public VDB environmentId(String environmentId) {
    this.environmentId = environmentId;
    return this;
  }

   /**
   * A reference to the Environment that hosts this VDB.
   * @return environmentId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentId() {
    return environmentId;
  }

  public void setEnvironmentId(String environmentId) {
    this.environmentId = environmentId;
  }


  public VDB ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The IP address of the VDB&#39;s host.
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public VDB fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

   /**
   * The FQDN of the VDB&#39;s host.
   * @return fqdn
  **/
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public VDB parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * A reference to the parent dataset of this VDB.
   * @return parentId
  **/
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public VDB parentDsourceId(String parentDsourceId) {
    this.parentDsourceId = parentDsourceId;
    return this;
  }

   /**
   * A reference to the parent dSource of this VDB.
   * @return parentDsourceId
  **/
  @javax.annotation.Nullable
  public String getParentDsourceId() {
    return parentDsourceId;
  }

  public void setParentDsourceId(String parentDsourceId) {
    this.parentDsourceId = parentDsourceId;
  }


  public VDB groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * The name of the group containing this VDB.
   * @return groupName
  **/
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public VDB engineName(String engineName) {
    this.engineName = engineName;
    return this;
  }

   /**
   * Name of the Engine where this VDB is hosted
   * @return engineName
  **/
  @javax.annotation.Nullable
  public String getEngineName() {
    return engineName;
  }

  public void setEngineName(String engineName) {
    this.engineName = engineName;
  }


  public VDB cdbId(String cdbId) {
    this.cdbId = cdbId;
    return this;
  }

   /**
   * A reference to the CDB or VCDB associated with this VDB.
   * @return cdbId
  **/
  @javax.annotation.Nullable
  public String getCdbId() {
    return cdbId;
  }

  public void setCdbId(String cdbId) {
    this.cdbId = cdbId;
  }


  public VDB tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public VDB addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public VDB creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date this VDB was created.
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public VDB hooks(VirtualDatasetHooks hooks) {
    this.hooks = hooks;
    return this;
  }

   /**
   * Get hooks
   * @return hooks
  **/
  @javax.annotation.Nullable
  public VirtualDatasetHooks getHooks() {
    return hooks;
  }

  public void setHooks(VirtualDatasetHooks hooks) {
    this.hooks = hooks;
  }


  public VDB appdataSourceParams(Map<String, Object> appdataSourceParams) {
    this.appdataSourceParams = appdataSourceParams;
    return this;
  }

  public VDB putAppdataSourceParamsItem(String key, Object appdataSourceParamsItem) {
    if (this.appdataSourceParams == null) {
      this.appdataSourceParams = new HashMap<>();
    }
    this.appdataSourceParams.put(key, appdataSourceParamsItem);
    return this;
  }

   /**
   * The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.
   * @return appdataSourceParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getAppdataSourceParams() {
    return appdataSourceParams;
  }

  public void setAppdataSourceParams(Map<String, Object> appdataSourceParams) {
    this.appdataSourceParams = appdataSourceParams;
  }


  public VDB templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * A reference to the Database Template.
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public VDB configParams(Map<String, Object> configParams) {
    this.configParams = configParams;
    return this;
  }

  public VDB putConfigParamsItem(String key, Object configParamsItem) {
    if (this.configParams == null) {
      this.configParams = new HashMap<>();
    }
    this.configParams.put(key, configParamsItem);
    return this;
  }

   /**
   * Database configuration parameter overrides.
   * @return configParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getConfigParams() {
    return configParams;
  }

  public void setConfigParams(Map<String, Object> configParams) {
    this.configParams = configParams;
  }


  public VDB additionalMountPoints(List<AdditionalMountPoint> additionalMountPoints) {
    this.additionalMountPoints = additionalMountPoints;
    return this;
  }

  public VDB addAdditionalMountPointsItem(AdditionalMountPoint additionalMountPointsItem) {
    if (this.additionalMountPoints == null) {
      this.additionalMountPoints = new ArrayList<>();
    }
    this.additionalMountPoints.add(additionalMountPointsItem);
    return this;
  }

   /**
   * Specifies additional locations on which to mount a subdirectory of an AppData container. Can only be updated while the VDB is disabled.
   * @return additionalMountPoints
  **/
  @javax.annotation.Nullable
  public List<AdditionalMountPoint> getAdditionalMountPoints() {
    return additionalMountPoints;
  }

  public void setAdditionalMountPoints(List<AdditionalMountPoint> additionalMountPoints) {
    this.additionalMountPoints = additionalMountPoints;
  }


  public VDB appdataConfigParams(Map<String, Object> appdataConfigParams) {
    this.appdataConfigParams = appdataConfigParams;
    return this;
  }

  public VDB putAppdataConfigParamsItem(String key, Object appdataConfigParamsItem) {
    if (this.appdataConfigParams == null) {
      this.appdataConfigParams = new HashMap<>();
    }
    this.appdataConfigParams.put(key, appdataConfigParamsItem);
    return this;
  }

   /**
   * The parameters specified by the source config schema in the toolkit
   * @return appdataConfigParams
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getAppdataConfigParams() {
    return appdataConfigParams;
  }

  public void setAppdataConfigParams(Map<String, Object> appdataConfigParams) {
    this.appdataConfigParams = appdataConfigParams;
  }


  public VDB mountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
    return this;
  }

   /**
   * Mount point for the VDB (Oracle, ASE, AppData).
   * @return mountPoint
  **/
  @javax.annotation.Nullable
  public String getMountPoint() {
    return mountPoint;
  }

  public void setMountPoint(String mountPoint) {
    this.mountPoint = mountPoint;
  }


  public VDB currentTimeflowId(String currentTimeflowId) {
    this.currentTimeflowId = currentTimeflowId;
    return this;
  }

   /**
   * A reference to the currently active timeflow for this VDB.
   * @return currentTimeflowId
  **/
  @javax.annotation.Nullable
  public String getCurrentTimeflowId() {
    return currentTimeflowId;
  }

  public void setCurrentTimeflowId(String currentTimeflowId) {
    this.currentTimeflowId = currentTimeflowId;
  }


  public VDB previousTimeflowId(String previousTimeflowId) {
    this.previousTimeflowId = previousTimeflowId;
    return this;
  }

   /**
   * A reference to the previous timeflow for this VDB.
   * @return previousTimeflowId
  **/
  @javax.annotation.Nullable
  public String getPreviousTimeflowId() {
    return previousTimeflowId;
  }

  public void setPreviousTimeflowId(String previousTimeflowId) {
    this.previousTimeflowId = previousTimeflowId;
  }


  public VDB lastRefreshedDate(OffsetDateTime lastRefreshedDate) {
    this.lastRefreshedDate = lastRefreshedDate;
    return this;
  }

   /**
   * The date this VDB was last refreshed.
   * @return lastRefreshedDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastRefreshedDate() {
    return lastRefreshedDate;
  }

  public void setLastRefreshedDate(OffsetDateTime lastRefreshedDate) {
    this.lastRefreshedDate = lastRefreshedDate;
  }


  public VDB vdbRestart(Boolean vdbRestart) {
    this.vdbRestart = vdbRestart;
    return this;
  }

   /**
   * Indicates whether the Engine should automatically restart this vdb when target host reboot is detected.
   * @return vdbRestart
  **/
  @javax.annotation.Nullable
  public Boolean getVdbRestart() {
    return vdbRestart;
  }

  public void setVdbRestart(Boolean vdbRestart) {
    this.vdbRestart = vdbRestart;
  }


  public VDB isAppdata(Boolean isAppdata) {
    this.isAppdata = isAppdata;
    return this;
  }

   /**
   * Indicates whether this VDB has an AppData database.
   * @return isAppdata
  **/
  @javax.annotation.Nullable
  public Boolean getIsAppdata() {
    return isAppdata;
  }

  public void setIsAppdata(Boolean isAppdata) {
    this.isAppdata = isAppdata;
  }


  public VDB toolkitId(String toolkitId) {
    this.toolkitId = toolkitId;
    return this;
  }

   /**
   * The ID of the toolkit associated with this VDB.
   * @return toolkitId
  **/
  @javax.annotation.Nullable
  public String getToolkitId() {
    return toolkitId;
  }

  public void setToolkitId(String toolkitId) {
    this.toolkitId = toolkitId;
  }


  public VDB pluginVersion(String pluginVersion) {
    this.pluginVersion = pluginVersion;
    return this;
  }

   /**
   * The version of the plugin associated with this VDB.
   * @return pluginVersion
  **/
  @javax.annotation.Nullable
  public String getPluginVersion() {
    return pluginVersion;
  }

  public void setPluginVersion(String pluginVersion) {
    this.pluginVersion = pluginVersion;
  }


  public VDB primaryObjectId(String primaryObjectId) {
    this.primaryObjectId = primaryObjectId;
    return this;
  }

   /**
   * The ID of the parent object from which replication was done.
   * @return primaryObjectId
  **/
  @javax.annotation.Nullable
  public String getPrimaryObjectId() {
    return primaryObjectId;
  }

  public void setPrimaryObjectId(String primaryObjectId) {
    this.primaryObjectId = primaryObjectId;
  }


  public VDB primaryEngineId(String primaryEngineId) {
    this.primaryEngineId = primaryEngineId;
    return this;
  }

   /**
   * The ID of the parent engine from which replication was done.
   * @return primaryEngineId
  **/
  @javax.annotation.Nullable
  public String getPrimaryEngineId() {
    return primaryEngineId;
  }

  public void setPrimaryEngineId(String primaryEngineId) {
    this.primaryEngineId = primaryEngineId;
  }


  public VDB primaryEngineName(String primaryEngineName) {
    this.primaryEngineName = primaryEngineName;
    return this;
  }

   /**
   * The name of the parent engine from which replication was done.
   * @return primaryEngineName
  **/
  @javax.annotation.Nullable
  public String getPrimaryEngineName() {
    return primaryEngineName;
  }

  public void setPrimaryEngineName(String primaryEngineName) {
    this.primaryEngineName = primaryEngineName;
  }


  public VDB replicas(List<Replica> replicas) {
    this.replicas = replicas;
    return this;
  }

  public VDB addReplicasItem(Replica replicasItem) {
    if (this.replicas == null) {
      this.replicas = new ArrayList<>();
    }
    this.replicas.add(replicasItem);
    return this;
  }

   /**
   * The list of replicas replicated from this object.
   * @return replicas
  **/
  @javax.annotation.Nullable
  public List<Replica> getReplicas() {
    return replicas;
  }

  public void setReplicas(List<Replica> replicas) {
    this.replicas = replicas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VDB VDB = (VDB) o;
    return Objects.equals(this.id, VDB.id) &&
        Objects.equals(this.databaseType, VDB.databaseType) &&
        Objects.equals(this.name, VDB.name) &&
        Objects.equals(this.namespaceId, VDB.namespaceId) &&
        Objects.equals(this.namespaceName, VDB.namespaceName) &&
        Objects.equals(this.isReplica, VDB.isReplica) &&
        Objects.equals(this.isLocked, VDB.isLocked) &&
        Objects.equals(this.lockedBy, VDB.lockedBy) &&
        Objects.equals(this.lockedByName, VDB.lockedByName) &&
        Objects.equals(this.databaseVersion, VDB.databaseVersion) &&
        Objects.equals(this.jdbcConnectionString, VDB.jdbcConnectionString) &&
        Objects.equals(this.size, VDB.size) &&
        Objects.equals(this.storageSize, VDB.storageSize) &&
        Objects.equals(this.engineId, VDB.engineId) &&
        Objects.equals(this.status, VDB.status) &&
        Objects.equals(this.masked, VDB.masked) &&
        Objects.equals(this.contentType, VDB.contentType) &&
        Objects.equals(this.parentTimeflowTimestamp, VDB.parentTimeflowTimestamp) &&
        Objects.equals(this.parentTimeflowTimezone, VDB.parentTimeflowTimezone) &&
        Objects.equals(this.environmentId, VDB.environmentId) &&
        Objects.equals(this.ipAddress, VDB.ipAddress) &&
        Objects.equals(this.fqdn, VDB.fqdn) &&
        Objects.equals(this.parentId, VDB.parentId) &&
        Objects.equals(this.parentDsourceId, VDB.parentDsourceId) &&
        Objects.equals(this.groupName, VDB.groupName) &&
        Objects.equals(this.engineName, VDB.engineName) &&
        Objects.equals(this.cdbId, VDB.cdbId) &&
        Objects.equals(this.tags, VDB.tags) &&
        Objects.equals(this.creationDate, VDB.creationDate) &&
        Objects.equals(this.hooks, VDB.hooks) &&
        Objects.equals(this.appdataSourceParams, VDB.appdataSourceParams) &&
        Objects.equals(this.templateId, VDB.templateId) &&
        Objects.equals(this.configParams, VDB.configParams) &&
        Objects.equals(this.additionalMountPoints, VDB.additionalMountPoints) &&
        Objects.equals(this.appdataConfigParams, VDB.appdataConfigParams) &&
        Objects.equals(this.mountPoint, VDB.mountPoint) &&
        Objects.equals(this.currentTimeflowId, VDB.currentTimeflowId) &&
        Objects.equals(this.previousTimeflowId, VDB.previousTimeflowId) &&
        Objects.equals(this.lastRefreshedDate, VDB.lastRefreshedDate) &&
        Objects.equals(this.vdbRestart, VDB.vdbRestart) &&
        Objects.equals(this.isAppdata, VDB.isAppdata) &&
        Objects.equals(this.toolkitId, VDB.toolkitId) &&
        Objects.equals(this.pluginVersion, VDB.pluginVersion) &&
        Objects.equals(this.primaryObjectId, VDB.primaryObjectId) &&
        Objects.equals(this.primaryEngineId, VDB.primaryEngineId) &&
        Objects.equals(this.primaryEngineName, VDB.primaryEngineName) &&
        Objects.equals(this.replicas, VDB.replicas);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, databaseType, name, namespaceId, namespaceName, isReplica, isLocked, lockedBy, lockedByName, databaseVersion, jdbcConnectionString, size, storageSize, engineId, status, masked, contentType, parentTimeflowTimestamp, parentTimeflowTimezone, environmentId, ipAddress, fqdn, parentId, parentDsourceId, groupName, engineName, cdbId, tags, creationDate, hooks, appdataSourceParams, templateId, configParams, additionalMountPoints, appdataConfigParams, mountPoint, currentTimeflowId, previousTimeflowId, lastRefreshedDate, vdbRestart, isAppdata, toolkitId, pluginVersion, primaryObjectId, primaryEngineId, primaryEngineName, replicas);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VDB {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    isReplica: ").append(toIndentedString(isReplica)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("    lockedByName: ").append(toIndentedString(lockedByName)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    jdbcConnectionString: ").append(toIndentedString(jdbcConnectionString)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    storageSize: ").append(toIndentedString(storageSize)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    parentTimeflowTimestamp: ").append(toIndentedString(parentTimeflowTimestamp)).append("\n");
    sb.append("    parentTimeflowTimezone: ").append(toIndentedString(parentTimeflowTimezone)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    parentDsourceId: ").append(toIndentedString(parentDsourceId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    engineName: ").append(toIndentedString(engineName)).append("\n");
    sb.append("    cdbId: ").append(toIndentedString(cdbId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    appdataSourceParams: ").append(toIndentedString(appdataSourceParams)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    configParams: ").append(toIndentedString(configParams)).append("\n");
    sb.append("    additionalMountPoints: ").append(toIndentedString(additionalMountPoints)).append("\n");
    sb.append("    appdataConfigParams: ").append(toIndentedString(appdataConfigParams)).append("\n");
    sb.append("    mountPoint: ").append(toIndentedString(mountPoint)).append("\n");
    sb.append("    currentTimeflowId: ").append(toIndentedString(currentTimeflowId)).append("\n");
    sb.append("    previousTimeflowId: ").append(toIndentedString(previousTimeflowId)).append("\n");
    sb.append("    lastRefreshedDate: ").append(toIndentedString(lastRefreshedDate)).append("\n");
    sb.append("    vdbRestart: ").append(toIndentedString(vdbRestart)).append("\n");
    sb.append("    isAppdata: ").append(toIndentedString(isAppdata)).append("\n");
    sb.append("    toolkitId: ").append(toIndentedString(toolkitId)).append("\n");
    sb.append("    pluginVersion: ").append(toIndentedString(pluginVersion)).append("\n");
    sb.append("    primaryObjectId: ").append(toIndentedString(primaryObjectId)).append("\n");
    sb.append("    primaryEngineId: ").append(toIndentedString(primaryEngineId)).append("\n");
    sb.append("    primaryEngineName: ").append(toIndentedString(primaryEngineName)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("database_type");
    openapiFields.add("name");
    openapiFields.add("namespace_id");
    openapiFields.add("namespace_name");
    openapiFields.add("is_replica");
    openapiFields.add("is_locked");
    openapiFields.add("locked_by");
    openapiFields.add("locked_by_name");
    openapiFields.add("database_version");
    openapiFields.add("jdbc_connection_string");
    openapiFields.add("size");
    openapiFields.add("storage_size");
    openapiFields.add("engine_id");
    openapiFields.add("status");
    openapiFields.add("masked");
    openapiFields.add("content_type");
    openapiFields.add("parent_timeflow_timestamp");
    openapiFields.add("parent_timeflow_timezone");
    openapiFields.add("environment_id");
    openapiFields.add("ip_address");
    openapiFields.add("fqdn");
    openapiFields.add("parent_id");
    openapiFields.add("parent_dsource_id");
    openapiFields.add("group_name");
    openapiFields.add("engine_name");
    openapiFields.add("cdb_id");
    openapiFields.add("tags");
    openapiFields.add("creation_date");
    openapiFields.add("hooks");
    openapiFields.add("appdata_source_params");
    openapiFields.add("template_id");
    openapiFields.add("config_params");
    openapiFields.add("additional_mount_points");
    openapiFields.add("appdata_config_params");
    openapiFields.add("mount_point");
    openapiFields.add("current_timeflow_id");
    openapiFields.add("previous_timeflow_id");
    openapiFields.add("last_refreshed_date");
    openapiFields.add("vdb_restart");
    openapiFields.add("is_appdata");
    openapiFields.add("toolkit_id");
    openapiFields.add("plugin_version");
    openapiFields.add("primary_object_id");
    openapiFields.add("primary_engine_id");
    openapiFields.add("primary_engine_name");
    openapiFields.add("replicas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VDB
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VDB.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VDB is not found in the empty JSON string", VDB.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VDB.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VDB` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("database_type") != null && !jsonObj.get("database_type").isJsonNull()) && !jsonObj.get("database_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("namespace_id") != null && !jsonObj.get("namespace_id").isJsonNull()) && !jsonObj.get("namespace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_id").toString()));
      }
      if ((jsonObj.get("namespace_name") != null && !jsonObj.get("namespace_name").isJsonNull()) && !jsonObj.get("namespace_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace_name").toString()));
      }
      if ((jsonObj.get("locked_by_name") != null && !jsonObj.get("locked_by_name").isJsonNull()) && !jsonObj.get("locked_by_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked_by_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked_by_name").toString()));
      }
      if ((jsonObj.get("database_version") != null && !jsonObj.get("database_version").isJsonNull()) && !jsonObj.get("database_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database_version").toString()));
      }
      if ((jsonObj.get("jdbc_connection_string") != null && !jsonObj.get("jdbc_connection_string").isJsonNull()) && !jsonObj.get("jdbc_connection_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jdbc_connection_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jdbc_connection_string").toString()));
      }
      if ((jsonObj.get("engine_id") != null && !jsonObj.get("engine_id").isJsonNull()) && !jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("parent_timeflow_timezone") != null && !jsonObj.get("parent_timeflow_timezone").isJsonNull()) && !jsonObj.get("parent_timeflow_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_timeflow_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_timeflow_timezone").toString()));
      }
      if ((jsonObj.get("environment_id") != null && !jsonObj.get("environment_id").isJsonNull()) && !jsonObj.get("environment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_id").toString()));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("parent_dsource_id") != null && !jsonObj.get("parent_dsource_id").isJsonNull()) && !jsonObj.get("parent_dsource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_dsource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_dsource_id").toString()));
      }
      if ((jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonNull()) && !jsonObj.get("group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name").toString()));
      }
      if ((jsonObj.get("engine_name") != null && !jsonObj.get("engine_name").isJsonNull()) && !jsonObj.get("engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_name").toString()));
      }
      if ((jsonObj.get("cdb_id") != null && !jsonObj.get("cdb_id").isJsonNull()) && !jsonObj.get("cdb_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdb_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cdb_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `hooks`
      if (jsonObj.get("hooks") != null && !jsonObj.get("hooks").isJsonNull()) {
        VirtualDatasetHooks.validateJsonElement(jsonObj.get("hooks"));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if (jsonObj.get("additional_mount_points") != null && !jsonObj.get("additional_mount_points").isJsonNull()) {
        JsonArray jsonArrayadditionalMountPoints = jsonObj.getAsJsonArray("additional_mount_points");
        if (jsonArrayadditionalMountPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additional_mount_points").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additional_mount_points` to be an array in the JSON string but got `%s`", jsonObj.get("additional_mount_points").toString()));
          }

          // validate the optional field `additional_mount_points` (array)
          for (int i = 0; i < jsonArrayadditionalMountPoints.size(); i++) {
            AdditionalMountPoint.validateJsonElement(jsonArrayadditionalMountPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("mount_point") != null && !jsonObj.get("mount_point").isJsonNull()) && !jsonObj.get("mount_point").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mount_point` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mount_point").toString()));
      }
      if ((jsonObj.get("current_timeflow_id") != null && !jsonObj.get("current_timeflow_id").isJsonNull()) && !jsonObj.get("current_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_timeflow_id").toString()));
      }
      if ((jsonObj.get("previous_timeflow_id") != null && !jsonObj.get("previous_timeflow_id").isJsonNull()) && !jsonObj.get("previous_timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_timeflow_id").toString()));
      }
      if ((jsonObj.get("toolkit_id") != null && !jsonObj.get("toolkit_id").isJsonNull()) && !jsonObj.get("toolkit_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolkit_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolkit_id").toString()));
      }
      if ((jsonObj.get("plugin_version") != null && !jsonObj.get("plugin_version").isJsonNull()) && !jsonObj.get("plugin_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugin_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plugin_version").toString()));
      }
      if ((jsonObj.get("primary_object_id") != null && !jsonObj.get("primary_object_id").isJsonNull()) && !jsonObj.get("primary_object_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_object_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_object_id").toString()));
      }
      if ((jsonObj.get("primary_engine_id") != null && !jsonObj.get("primary_engine_id").isJsonNull()) && !jsonObj.get("primary_engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_engine_id").toString()));
      }
      if ((jsonObj.get("primary_engine_name") != null && !jsonObj.get("primary_engine_name").isJsonNull()) && !jsonObj.get("primary_engine_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_engine_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_engine_name").toString()));
      }
      if (jsonObj.get("replicas") != null && !jsonObj.get("replicas").isJsonNull()) {
        JsonArray jsonArrayreplicas = jsonObj.getAsJsonArray("replicas");
        if (jsonArrayreplicas != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicas").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicas` to be an array in the JSON string but got `%s`", jsonObj.get("replicas").toString()));
          }

          // validate the optional field `replicas` (array)
          for (int i = 0; i < jsonArrayreplicas.size(); i++) {
            Replica.validateJsonElement(jsonArrayreplicas.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VDB.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VDB' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VDB> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VDB.class));

       return (TypeAdapter<T>) new TypeAdapter<VDB>() {
           @Override
           public void write(JsonWriter out, VDB value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VDB read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VDB given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VDB
  * @throws IOException if the JSON string is invalid with respect to VDB
  */
  public static VDB fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VDB.class);
  }

 /**
  * Convert an instance of VDB to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

