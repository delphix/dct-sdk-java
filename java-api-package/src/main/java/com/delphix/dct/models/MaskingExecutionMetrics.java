/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Metrics for a masking job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class MaskingExecutionMetrics {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MASKING_JOB_NAME = "masking_job_name";
  @SerializedName(SERIALIZED_NAME_MASKING_JOB_NAME)
  private String maskingJobName;

  /**
   * The type of the Masking job.
   */
  @JsonAdapter(MaskingJobTypeEnum.Adapter.class)
  public enum MaskingJobTypeEnum {
    STANDARD("STANDARD"),
    
    HYPERSCALE("HYPERSCALE");

    private String value;

    MaskingJobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaskingJobTypeEnum fromValue(String value) {
      for (MaskingJobTypeEnum b : MaskingJobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaskingJobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaskingJobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaskingJobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaskingJobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaskingJobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MASKING_JOB_TYPE = "masking_job_type";
  @SerializedName(SERIALIZED_NAME_MASKING_JOB_TYPE)
  private MaskingJobTypeEnum maskingJobType;

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connector_type";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private String connectorType;

  public static final String SERIALIZED_NAME_RULESET_NAME = "ruleset_name";
  @SerializedName(SERIALIZED_NAME_RULESET_NAME)
  private String rulesetName;

  public static final String SERIALIZED_NAME_ROWS_MASKED = "rows_masked";
  @SerializedName(SERIALIZED_NAME_ROWS_MASKED)
  private Long rowsMasked;

  public static final String SERIALIZED_NAME_ROWS_TOTAL = "rows_total";
  @SerializedName(SERIALIZED_NAME_ROWS_TOTAL)
  private Long rowsTotal;

  public static final String SERIALIZED_NAME_BYTES_MASKED = "bytes_masked";
  @SerializedName(SERIALIZED_NAME_BYTES_MASKED)
  private Long bytesMasked;

  public static final String SERIALIZED_NAME_BYTES_TOTAL = "bytes_total";
  @SerializedName(SERIALIZED_NAME_BYTES_TOTAL)
  private Long bytesTotal;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Long duration;

  public static final String SERIALIZED_NAME_TABLES_FILES_COUNT = "tables_files_count";
  @SerializedName(SERIALIZED_NAME_TABLES_FILES_COUNT)
  private Long tablesFilesCount;

  public static final String SERIALIZED_NAME_MASKED_TABLES_FILES_COUNT = "masked_tables_files_count";
  @SerializedName(SERIALIZED_NAME_MASKED_TABLES_FILES_COUNT)
  private Long maskedTablesFilesCount;

  public static final String SERIALIZED_NAME_COLUMNS_FIELDS_COUNT = "columns_fields_count";
  @SerializedName(SERIALIZED_NAME_COLUMNS_FIELDS_COUNT)
  private Long columnsFieldsCount;

  public static final String SERIALIZED_NAME_MASKED_COLUMNS_FIELDS_COUNT = "masked_columns_fields_count";
  @SerializedName(SERIALIZED_NAME_MASKED_COLUMNS_FIELDS_COUNT)
  private Long maskedColumnsFieldsCount;

  public MaskingExecutionMetrics() {
  }

  public MaskingExecutionMetrics id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The MaskingJob entity ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MaskingExecutionMetrics maskingJobName(String maskingJobName) {
    this.maskingJobName = maskingJobName;
    return this;
  }

   /**
   * The name of the MaskingJob.
   * @return maskingJobName
  **/
  @javax.annotation.Nullable
  public String getMaskingJobName() {
    return maskingJobName;
  }

  public void setMaskingJobName(String maskingJobName) {
    this.maskingJobName = maskingJobName;
  }


  public MaskingExecutionMetrics maskingJobType(MaskingJobTypeEnum maskingJobType) {
    this.maskingJobType = maskingJobType;
    return this;
  }

   /**
   * The type of the Masking job.
   * @return maskingJobType
  **/
  @javax.annotation.Nullable
  public MaskingJobTypeEnum getMaskingJobType() {
    return maskingJobType;
  }

  public void setMaskingJobType(MaskingJobTypeEnum maskingJobType) {
    this.maskingJobType = maskingJobType;
  }


  public MaskingExecutionMetrics connectorType(String connectorType) {
    this.connectorType = connectorType;
    return this;
  }

   /**
   * The type of data being masked by this Job. If the Masking Job is masking a database this is the type of the database, otherwise \&quot;FILE\&quot; or \&quot;MAINFRAME_DATASET\&quot;.
   * @return connectorType
  **/
  @javax.annotation.Nullable
  public String getConnectorType() {
    return connectorType;
  }

  public void setConnectorType(String connectorType) {
    this.connectorType = connectorType;
  }


  public MaskingExecutionMetrics rulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
    return this;
  }

   /**
   * Name of the ruleset for the Masking job.
   * @return rulesetName
  **/
  @javax.annotation.Nullable
  public String getRulesetName() {
    return rulesetName;
  }

  public void setRulesetName(String rulesetName) {
    this.rulesetName = rulesetName;
  }


  public MaskingExecutionMetrics rowsMasked(Long rowsMasked) {
    this.rowsMasked = rowsMasked;
    return this;
  }

   /**
   * The number of rows masked. This is not applicable for JSON file type.
   * @return rowsMasked
  **/
  @javax.annotation.Nullable
  public Long getRowsMasked() {
    return rowsMasked;
  }

  public void setRowsMasked(Long rowsMasked) {
    this.rowsMasked = rowsMasked;
  }


  public MaskingExecutionMetrics rowsTotal(Long rowsTotal) {
    this.rowsTotal = rowsTotal;
    return this;
  }

   /**
   * The total number of rows. This is not applicable for JSON file type.
   * @return rowsTotal
  **/
  @javax.annotation.Nullable
  public Long getRowsTotal() {
    return rowsTotal;
  }

  public void setRowsTotal(Long rowsTotal) {
    this.rowsTotal = rowsTotal;
  }


  public MaskingExecutionMetrics bytesMasked(Long bytesMasked) {
    this.bytesMasked = bytesMasked;
    return this;
  }

   /**
   * The number of bytes masked. This is only applicable for JSON file type.
   * @return bytesMasked
  **/
  @javax.annotation.Nullable
  public Long getBytesMasked() {
    return bytesMasked;
  }

  public void setBytesMasked(Long bytesMasked) {
    this.bytesMasked = bytesMasked;
  }


  public MaskingExecutionMetrics bytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
    return this;
  }

   /**
   * The total number of bytes. This is only applicable for JSON file type.
   * @return bytesTotal
  **/
  @javax.annotation.Nullable
  public Long getBytesTotal() {
    return bytesTotal;
  }

  public void setBytesTotal(Long bytesTotal) {
    this.bytesTotal = bytesTotal;
  }


  public MaskingExecutionMetrics duration(Long duration) {
    this.duration = duration;
    return this;
  }

   /**
   * The time taken by the execution in ms. Only available for successful executions.
   * @return duration
  **/
  @javax.annotation.Nullable
  public Long getDuration() {
    return duration;
  }

  public void setDuration(Long duration) {
    this.duration = duration;
  }


  public MaskingExecutionMetrics tablesFilesCount(Long tablesFilesCount) {
    this.tablesFilesCount = tablesFilesCount;
    return this;
  }

   /**
   * The number of tables or files in the ruleset associated to the Masking job.
   * @return tablesFilesCount
  **/
  @javax.annotation.Nullable
  public Long getTablesFilesCount() {
    return tablesFilesCount;
  }

  public void setTablesFilesCount(Long tablesFilesCount) {
    this.tablesFilesCount = tablesFilesCount;
  }


  public MaskingExecutionMetrics maskedTablesFilesCount(Long maskedTablesFilesCount) {
    this.maskedTablesFilesCount = maskedTablesFilesCount;
    return this;
  }

   /**
   * The number of tables or files in the ruleset associated to the Masking job for which at least one column or field is masked.
   * @return maskedTablesFilesCount
  **/
  @javax.annotation.Nullable
  public Long getMaskedTablesFilesCount() {
    return maskedTablesFilesCount;
  }

  public void setMaskedTablesFilesCount(Long maskedTablesFilesCount) {
    this.maskedTablesFilesCount = maskedTablesFilesCount;
  }


  public MaskingExecutionMetrics columnsFieldsCount(Long columnsFieldsCount) {
    this.columnsFieldsCount = columnsFieldsCount;
    return this;
  }

   /**
   * The number of columns or fields across all tables or files in the ruleset associated to the Masking job.
   * @return columnsFieldsCount
  **/
  @javax.annotation.Nullable
  public Long getColumnsFieldsCount() {
    return columnsFieldsCount;
  }

  public void setColumnsFieldsCount(Long columnsFieldsCount) {
    this.columnsFieldsCount = columnsFieldsCount;
  }


  public MaskingExecutionMetrics maskedColumnsFieldsCount(Long maskedColumnsFieldsCount) {
    this.maskedColumnsFieldsCount = maskedColumnsFieldsCount;
    return this;
  }

   /**
   * The number of columns or fields across all tables or files in the ruleset associated to the Masking job which are masked.
   * @return maskedColumnsFieldsCount
  **/
  @javax.annotation.Nullable
  public Long getMaskedColumnsFieldsCount() {
    return maskedColumnsFieldsCount;
  }

  public void setMaskedColumnsFieldsCount(Long maskedColumnsFieldsCount) {
    this.maskedColumnsFieldsCount = maskedColumnsFieldsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaskingExecutionMetrics maskingExecutionMetrics = (MaskingExecutionMetrics) o;
    return Objects.equals(this.id, maskingExecutionMetrics.id) &&
        Objects.equals(this.maskingJobName, maskingExecutionMetrics.maskingJobName) &&
        Objects.equals(this.maskingJobType, maskingExecutionMetrics.maskingJobType) &&
        Objects.equals(this.connectorType, maskingExecutionMetrics.connectorType) &&
        Objects.equals(this.rulesetName, maskingExecutionMetrics.rulesetName) &&
        Objects.equals(this.rowsMasked, maskingExecutionMetrics.rowsMasked) &&
        Objects.equals(this.rowsTotal, maskingExecutionMetrics.rowsTotal) &&
        Objects.equals(this.bytesMasked, maskingExecutionMetrics.bytesMasked) &&
        Objects.equals(this.bytesTotal, maskingExecutionMetrics.bytesTotal) &&
        Objects.equals(this.duration, maskingExecutionMetrics.duration) &&
        Objects.equals(this.tablesFilesCount, maskingExecutionMetrics.tablesFilesCount) &&
        Objects.equals(this.maskedTablesFilesCount, maskingExecutionMetrics.maskedTablesFilesCount) &&
        Objects.equals(this.columnsFieldsCount, maskingExecutionMetrics.columnsFieldsCount) &&
        Objects.equals(this.maskedColumnsFieldsCount, maskingExecutionMetrics.maskedColumnsFieldsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, maskingJobName, maskingJobType, connectorType, rulesetName, rowsMasked, rowsTotal, bytesMasked, bytesTotal, duration, tablesFilesCount, maskedTablesFilesCount, columnsFieldsCount, maskedColumnsFieldsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaskingExecutionMetrics {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maskingJobName: ").append(toIndentedString(maskingJobName)).append("\n");
    sb.append("    maskingJobType: ").append(toIndentedString(maskingJobType)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    rulesetName: ").append(toIndentedString(rulesetName)).append("\n");
    sb.append("    rowsMasked: ").append(toIndentedString(rowsMasked)).append("\n");
    sb.append("    rowsTotal: ").append(toIndentedString(rowsTotal)).append("\n");
    sb.append("    bytesMasked: ").append(toIndentedString(bytesMasked)).append("\n");
    sb.append("    bytesTotal: ").append(toIndentedString(bytesTotal)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    tablesFilesCount: ").append(toIndentedString(tablesFilesCount)).append("\n");
    sb.append("    maskedTablesFilesCount: ").append(toIndentedString(maskedTablesFilesCount)).append("\n");
    sb.append("    columnsFieldsCount: ").append(toIndentedString(columnsFieldsCount)).append("\n");
    sb.append("    maskedColumnsFieldsCount: ").append(toIndentedString(maskedColumnsFieldsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("masking_job_name");
    openapiFields.add("masking_job_type");
    openapiFields.add("connector_type");
    openapiFields.add("ruleset_name");
    openapiFields.add("rows_masked");
    openapiFields.add("rows_total");
    openapiFields.add("bytes_masked");
    openapiFields.add("bytes_total");
    openapiFields.add("duration");
    openapiFields.add("tables_files_count");
    openapiFields.add("masked_tables_files_count");
    openapiFields.add("columns_fields_count");
    openapiFields.add("masked_columns_fields_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MaskingExecutionMetrics
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaskingExecutionMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaskingExecutionMetrics is not found in the empty JSON string", MaskingExecutionMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaskingExecutionMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaskingExecutionMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("masking_job_name") != null && !jsonObj.get("masking_job_name").isJsonNull()) && !jsonObj.get("masking_job_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masking_job_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masking_job_name").toString()));
      }
      if ((jsonObj.get("masking_job_type") != null && !jsonObj.get("masking_job_type").isJsonNull()) && !jsonObj.get("masking_job_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masking_job_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masking_job_type").toString()));
      }
      // validate the optional field `masking_job_type`
      if (jsonObj.get("masking_job_type") != null && !jsonObj.get("masking_job_type").isJsonNull()) {
        MaskingJobTypeEnum.validateJsonElement(jsonObj.get("masking_job_type"));
      }
      if ((jsonObj.get("connector_type") != null && !jsonObj.get("connector_type").isJsonNull()) && !jsonObj.get("connector_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector_type").toString()));
      }
      if ((jsonObj.get("ruleset_name") != null && !jsonObj.get("ruleset_name").isJsonNull()) && !jsonObj.get("ruleset_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleset_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleset_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaskingExecutionMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaskingExecutionMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaskingExecutionMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaskingExecutionMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<MaskingExecutionMetrics>() {
           @Override
           public void write(JsonWriter out, MaskingExecutionMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaskingExecutionMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MaskingExecutionMetrics given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MaskingExecutionMetrics
  * @throws IOException if the JSON string is invalid with respect to MaskingExecutionMetrics
  */
  public static MaskingExecutionMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaskingExecutionMetrics.class);
  }

 /**
  * Convert an instance of MaskingExecutionMetrics to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

