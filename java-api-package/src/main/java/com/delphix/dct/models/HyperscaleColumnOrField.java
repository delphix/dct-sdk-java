/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * HyperscaleColumnOrField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class HyperscaleColumnOrField {
  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domain_name";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_ALGORITHM_NAME = "algorithm_name";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_NAME)
  private String algorithmName;

  public static final String SERIALIZED_NAME_DATE_FORMAT = "date_format";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private String dateFormat;

  public static final String SERIALIZED_NAME_ALGORITHM_FIELD_NAME = "algorithm_field_name";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_FIELD_NAME)
  private String algorithmFieldName;

  public static final String SERIALIZED_NAME_ALGORITHM_GROUP_NO = "algorithm_group_no";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_GROUP_NO)
  private Long algorithmGroupNo;

  public HyperscaleColumnOrField() {
  }

  public HyperscaleColumnOrField fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Name of the field.
   * @return fieldName
  **/
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public HyperscaleColumnOrField domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * The name of the domain assigned to this field.
   * @return domainName
  **/
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public HyperscaleColumnOrField algorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
    return this;
  }

   /**
   * The name of the algorithm assigned to this field.
   * @return algorithmName
  **/
  @javax.annotation.Nullable
  public String getAlgorithmName() {
    return algorithmName;
  }

  public void setAlgorithmName(String algorithmName) {
    this.algorithmName = algorithmName;
  }


  public HyperscaleColumnOrField dateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

   /**
   * The format of the date assigned to this field.
   * @return dateFormat
  **/
  @javax.annotation.Nullable
  public String getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(String dateFormat) {
    this.dateFormat = dateFormat;
  }


  public HyperscaleColumnOrField algorithmFieldName(String algorithmFieldName) {
    this.algorithmFieldName = algorithmFieldName;
    return this;
  }

   /**
   * The name of the algorithm field that is associated with this algorithm.
   * @return algorithmFieldName
  **/
  @javax.annotation.Nullable
  public String getAlgorithmFieldName() {
    return algorithmFieldName;
  }

  public void setAlgorithmFieldName(String algorithmFieldName) {
    this.algorithmFieldName = algorithmFieldName;
  }


  public HyperscaleColumnOrField algorithmGroupNo(Long algorithmGroupNo) {
    this.algorithmGroupNo = algorithmGroupNo;
    return this;
  }

   /**
   * The group number of the algorithm to identify a set of columns associated with one instance of algorithm.
   * @return algorithmGroupNo
  **/
  @javax.annotation.Nullable
  public Long getAlgorithmGroupNo() {
    return algorithmGroupNo;
  }

  public void setAlgorithmGroupNo(Long algorithmGroupNo) {
    this.algorithmGroupNo = algorithmGroupNo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HyperscaleColumnOrField hyperscaleColumnOrField = (HyperscaleColumnOrField) o;
    return Objects.equals(this.fieldName, hyperscaleColumnOrField.fieldName) &&
        Objects.equals(this.domainName, hyperscaleColumnOrField.domainName) &&
        Objects.equals(this.algorithmName, hyperscaleColumnOrField.algorithmName) &&
        Objects.equals(this.dateFormat, hyperscaleColumnOrField.dateFormat) &&
        Objects.equals(this.algorithmFieldName, hyperscaleColumnOrField.algorithmFieldName) &&
        Objects.equals(this.algorithmGroupNo, hyperscaleColumnOrField.algorithmGroupNo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, domainName, algorithmName, dateFormat, algorithmFieldName, algorithmGroupNo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HyperscaleColumnOrField {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    algorithmName: ").append(toIndentedString(algorithmName)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    algorithmFieldName: ").append(toIndentedString(algorithmFieldName)).append("\n");
    sb.append("    algorithmGroupNo: ").append(toIndentedString(algorithmGroupNo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field_name");
    openapiFields.add("domain_name");
    openapiFields.add("algorithm_name");
    openapiFields.add("date_format");
    openapiFields.add("algorithm_field_name");
    openapiFields.add("algorithm_group_no");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HyperscaleColumnOrField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HyperscaleColumnOrField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HyperscaleColumnOrField is not found in the empty JSON string", HyperscaleColumnOrField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HyperscaleColumnOrField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HyperscaleColumnOrField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonNull()) && !jsonObj.get("field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_name").toString()));
      }
      if ((jsonObj.get("domain_name") != null && !jsonObj.get("domain_name").isJsonNull()) && !jsonObj.get("domain_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_name").toString()));
      }
      if ((jsonObj.get("algorithm_name") != null && !jsonObj.get("algorithm_name").isJsonNull()) && !jsonObj.get("algorithm_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm_name").toString()));
      }
      if ((jsonObj.get("date_format") != null && !jsonObj.get("date_format").isJsonNull()) && !jsonObj.get("date_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_format").toString()));
      }
      if ((jsonObj.get("algorithm_field_name") != null && !jsonObj.get("algorithm_field_name").isJsonNull()) && !jsonObj.get("algorithm_field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm_field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm_field_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HyperscaleColumnOrField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HyperscaleColumnOrField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HyperscaleColumnOrField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HyperscaleColumnOrField.class));

       return (TypeAdapter<T>) new TypeAdapter<HyperscaleColumnOrField>() {
           @Override
           public void write(JsonWriter out, HyperscaleColumnOrField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HyperscaleColumnOrField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HyperscaleColumnOrField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HyperscaleColumnOrField
  * @throws IOException if the JSON string is invalid with respect to HyperscaleColumnOrField
  */
  public static HyperscaleColumnOrField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HyperscaleColumnOrField.class);
  }

 /**
  * Convert an instance of HyperscaleColumnOrField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

