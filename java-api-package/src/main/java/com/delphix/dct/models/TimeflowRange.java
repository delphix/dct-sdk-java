/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * Represents a time range within a timeflow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class TimeflowRange {
  public static final String SERIALIZED_NAME_START_POINT_LOCATION = "start_point_location";
  @SerializedName(SERIALIZED_NAME_START_POINT_LOCATION)
  private String startPointLocation;

  public static final String SERIALIZED_NAME_START_POINT_TIMESTAMP = "start_point_timestamp";
  @SerializedName(SERIALIZED_NAME_START_POINT_TIMESTAMP)
  private OffsetDateTime startPointTimestamp;

  public static final String SERIALIZED_NAME_END_POINT_LOCATION = "end_point_location";
  @SerializedName(SERIALIZED_NAME_END_POINT_LOCATION)
  private String endPointLocation;

  public static final String SERIALIZED_NAME_END_POINT_TIMESTAMP = "end_point_timestamp";
  @SerializedName(SERIALIZED_NAME_END_POINT_TIMESTAMP)
  private OffsetDateTime endPointTimestamp;

  public static final String SERIALIZED_NAME_TIMEFLOW_ID = "timeflow_id";
  @SerializedName(SERIALIZED_NAME_TIMEFLOW_ID)
  private String timeflowId;

  public static final String SERIALIZED_NAME_PROVISIONABLE = "provisionable";
  @SerializedName(SERIALIZED_NAME_PROVISIONABLE)
  private Boolean provisionable;

  public TimeflowRange() {
  }

  public TimeflowRange startPointLocation(String startPointLocation) {
    this.startPointLocation = startPointLocation;
    return this;
  }

   /**
   * The starting location of this range.
   * @return startPointLocation
  **/
  @javax.annotation.Nullable
  public String getStartPointLocation() {
    return startPointLocation;
  }

  public void setStartPointLocation(String startPointLocation) {
    this.startPointLocation = startPointLocation;
  }


  public TimeflowRange startPointTimestamp(OffsetDateTime startPointTimestamp) {
    this.startPointTimestamp = startPointTimestamp;
    return this;
  }

   /**
   * The starting timestamp of this range.
   * @return startPointTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartPointTimestamp() {
    return startPointTimestamp;
  }

  public void setStartPointTimestamp(OffsetDateTime startPointTimestamp) {
    this.startPointTimestamp = startPointTimestamp;
  }


  public TimeflowRange endPointLocation(String endPointLocation) {
    this.endPointLocation = endPointLocation;
    return this;
  }

   /**
   * The ending location of this range.
   * @return endPointLocation
  **/
  @javax.annotation.Nullable
  public String getEndPointLocation() {
    return endPointLocation;
  }

  public void setEndPointLocation(String endPointLocation) {
    this.endPointLocation = endPointLocation;
  }


  public TimeflowRange endPointTimestamp(OffsetDateTime endPointTimestamp) {
    this.endPointTimestamp = endPointTimestamp;
    return this;
  }

   /**
   * The ending timestamp of this range.
   * @return endPointTimestamp
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndPointTimestamp() {
    return endPointTimestamp;
  }

  public void setEndPointTimestamp(OffsetDateTime endPointTimestamp) {
    this.endPointTimestamp = endPointTimestamp;
  }


  public TimeflowRange timeflowId(String timeflowId) {
    this.timeflowId = timeflowId;
    return this;
  }

   /**
   * A reference to the timeflow of this range.
   * @return timeflowId
  **/
  @javax.annotation.Nullable
  public String getTimeflowId() {
    return timeflowId;
  }

  public void setTimeflowId(String timeflowId) {
    this.timeflowId = timeflowId;
  }


  public TimeflowRange provisionable(Boolean provisionable) {
    this.provisionable = provisionable;
    return this;
  }

   /**
   * Whether or not this range is provisionable.
   * @return provisionable
  **/
  @javax.annotation.Nullable
  public Boolean getProvisionable() {
    return provisionable;
  }

  public void setProvisionable(Boolean provisionable) {
    this.provisionable = provisionable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeflowRange timeflowRange = (TimeflowRange) o;
    return Objects.equals(this.startPointLocation, timeflowRange.startPointLocation) &&
        Objects.equals(this.startPointTimestamp, timeflowRange.startPointTimestamp) &&
        Objects.equals(this.endPointLocation, timeflowRange.endPointLocation) &&
        Objects.equals(this.endPointTimestamp, timeflowRange.endPointTimestamp) &&
        Objects.equals(this.timeflowId, timeflowRange.timeflowId) &&
        Objects.equals(this.provisionable, timeflowRange.provisionable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startPointLocation, startPointTimestamp, endPointLocation, endPointTimestamp, timeflowId, provisionable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeflowRange {\n");
    sb.append("    startPointLocation: ").append(toIndentedString(startPointLocation)).append("\n");
    sb.append("    startPointTimestamp: ").append(toIndentedString(startPointTimestamp)).append("\n");
    sb.append("    endPointLocation: ").append(toIndentedString(endPointLocation)).append("\n");
    sb.append("    endPointTimestamp: ").append(toIndentedString(endPointTimestamp)).append("\n");
    sb.append("    timeflowId: ").append(toIndentedString(timeflowId)).append("\n");
    sb.append("    provisionable: ").append(toIndentedString(provisionable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start_point_location");
    openapiFields.add("start_point_timestamp");
    openapiFields.add("end_point_location");
    openapiFields.add("end_point_timestamp");
    openapiFields.add("timeflow_id");
    openapiFields.add("provisionable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TimeflowRange
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeflowRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeflowRange is not found in the empty JSON string", TimeflowRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeflowRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeflowRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("start_point_location") != null && !jsonObj.get("start_point_location").isJsonNull()) && !jsonObj.get("start_point_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_point_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_point_location").toString()));
      }
      if ((jsonObj.get("end_point_location") != null && !jsonObj.get("end_point_location").isJsonNull()) && !jsonObj.get("end_point_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_point_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_point_location").toString()));
      }
      if ((jsonObj.get("timeflow_id") != null && !jsonObj.get("timeflow_id").isJsonNull()) && !jsonObj.get("timeflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeflow_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeflowRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeflowRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeflowRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeflowRange.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeflowRange>() {
           @Override
           public void write(JsonWriter out, TimeflowRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeflowRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeflowRange given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeflowRange
  * @throws IOException if the JSON string is invalid with respect to TimeflowRange
  */
  public static TimeflowRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeflowRange.class);
  }

 /**
  * Convert an instance of TimeflowRange to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

