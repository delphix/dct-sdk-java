/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.SourceOperation;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * OracleDSourceLinkSourceParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class OracleDSourceLinkSourceParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_ID = "source_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOG_SYNC_ENABLED = "log_sync_enabled";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_ENABLED)
  private Boolean logSyncEnabled = false;

  public static final String SERIALIZED_NAME_SYNC_POLICY_ID = "sync_policy_id";
  @SerializedName(SERIALIZED_NAME_SYNC_POLICY_ID)
  private String syncPolicyId;

  public static final String SERIALIZED_NAME_RETENTION_POLICY_ID = "retention_policy_id";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY_ID)
  private String retentionPolicyId;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_OPS_PRE_SYNC = "ops_pre_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_SYNC)
  private List<SourceOperation> opsPreSync;

  public static final String SERIALIZED_NAME_OPS_POST_SYNC = "ops_post_sync";
  @SerializedName(SERIALIZED_NAME_OPS_POST_SYNC)
  private List<SourceOperation> opsPostSync;

  public static final String SERIALIZED_NAME_EXTERNAL_FILE_PATH = "external_file_path";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_FILE_PATH)
  private String externalFilePath;

  public static final String SERIALIZED_NAME_ENVIRONMENT_USER_ID = "environment_user_id";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_USER_ID)
  private String environmentUserId;

  public static final String SERIALIZED_NAME_BACKUP_LEVEL_ENABLED = "backup_level_enabled";
  @SerializedName(SERIALIZED_NAME_BACKUP_LEVEL_ENABLED)
  private Boolean backupLevelEnabled;

  public static final String SERIALIZED_NAME_RMAN_CHANNELS = "rman_channels";
  @SerializedName(SERIALIZED_NAME_RMAN_CHANNELS)
  private Integer rmanChannels = 2;

  public static final String SERIALIZED_NAME_FILES_PER_SET = "files_per_set";
  @SerializedName(SERIALIZED_NAME_FILES_PER_SET)
  private Integer filesPerSet = 5;

  public static final String SERIALIZED_NAME_CHECK_LOGICAL = "check_logical";
  @SerializedName(SERIALIZED_NAME_CHECK_LOGICAL)
  private Boolean checkLogical = false;

  public static final String SERIALIZED_NAME_ENCRYPTED_LINKING_ENABLED = "encrypted_linking_enabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_LINKING_ENABLED)
  private Boolean encryptedLinkingEnabled = false;

  public static final String SERIALIZED_NAME_COMPRESSED_LINKING_ENABLED = "compressed_linking_enabled";
  @SerializedName(SERIALIZED_NAME_COMPRESSED_LINKING_ENABLED)
  private Boolean compressedLinkingEnabled = true;

  public static final String SERIALIZED_NAME_BANDWIDTH_LIMIT = "bandwidth_limit";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_LIMIT)
  private Integer bandwidthLimit = 0;

  public static final String SERIALIZED_NAME_NUMBER_OF_CONNECTIONS = "number_of_connections";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CONNECTIONS)
  private Integer numberOfConnections = 1;

  public static final String SERIALIZED_NAME_DIAGNOSE_NO_LOGGING_FAULTS = "diagnose_no_logging_faults";
  @SerializedName(SERIALIZED_NAME_DIAGNOSE_NO_LOGGING_FAULTS)
  private Boolean diagnoseNoLoggingFaults = true;

  public static final String SERIALIZED_NAME_PRE_PROVISIONING_ENABLED = "pre_provisioning_enabled";
  @SerializedName(SERIALIZED_NAME_PRE_PROVISIONING_ENABLED)
  private Boolean preProvisioningEnabled = false;

  public static final String SERIALIZED_NAME_LINK_NOW = "link_now";
  @SerializedName(SERIALIZED_NAME_LINK_NOW)
  private Boolean linkNow = false;

  public static final String SERIALIZED_NAME_FORCE_FULL_BACKUP = "force_full_backup";
  @SerializedName(SERIALIZED_NAME_FORCE_FULL_BACKUP)
  private Boolean forceFullBackup = false;

  public static final String SERIALIZED_NAME_DOUBLE_SYNC = "double_sync";
  @SerializedName(SERIALIZED_NAME_DOUBLE_SYNC)
  private Boolean doubleSync = false;

  public static final String SERIALIZED_NAME_SKIP_SPACE_CHECK = "skip_space_check";
  @SerializedName(SERIALIZED_NAME_SKIP_SPACE_CHECK)
  private Boolean skipSpaceCheck = false;

  public static final String SERIALIZED_NAME_DO_NOT_RESUME = "do_not_resume";
  @SerializedName(SERIALIZED_NAME_DO_NOT_RESUME)
  private Boolean doNotResume = false;

  public static final String SERIALIZED_NAME_FILES_FOR_FULL_BACKUP = "files_for_full_backup";
  @SerializedName(SERIALIZED_NAME_FILES_FOR_FULL_BACKUP)
  private List<Integer> filesForFullBackup;

  /**
   * LogSync operation mode for this database.
   */
  @JsonAdapter(LogSyncModeEnum.Adapter.class)
  public enum LogSyncModeEnum {
    ARCHIVE_ONLY_MODE("ARCHIVE_ONLY_MODE"),
    
    ARCHIVE_REDO_MODE("ARCHIVE_REDO_MODE"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    LogSyncModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogSyncModeEnum fromValue(String value) {
      for (LogSyncModeEnum b : LogSyncModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogSyncModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogSyncModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogSyncModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogSyncModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogSyncModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_SYNC_MODE = "log_sync_mode";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_MODE)
  private LogSyncModeEnum logSyncMode = LogSyncModeEnum.UNDEFINED;

  public static final String SERIALIZED_NAME_LOG_SYNC_INTERVAL = "log_sync_interval";
  @SerializedName(SERIALIZED_NAME_LOG_SYNC_INTERVAL)
  private Integer logSyncInterval = 5;

  public static final String SERIALIZED_NAME_NON_SYS_USERNAME = "non_sys_username";
  @SerializedName(SERIALIZED_NAME_NON_SYS_USERNAME)
  private String nonSysUsername;

  public static final String SERIALIZED_NAME_NON_SYS_PASSWORD = "non_sys_password";
  @SerializedName(SERIALIZED_NAME_NON_SYS_PASSWORD)
  private String nonSysPassword;

  public static final String SERIALIZED_NAME_NON_SYS_VAULT_USERNAME = "non_sys_vault_username";
  @SerializedName(SERIALIZED_NAME_NON_SYS_VAULT_USERNAME)
  private String nonSysVaultUsername;

  public static final String SERIALIZED_NAME_NON_SYS_VAULT = "non_sys_vault";
  @SerializedName(SERIALIZED_NAME_NON_SYS_VAULT)
  private String nonSysVault;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_ENGINE = "non_sys_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_ENGINE)
  private String nonSysHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_PATH = "non_sys_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_PATH)
  private String nonSysHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_USERNAME_KEY = "non_sys_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_USERNAME_KEY)
  private String nonSysHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_KEY = "non_sys_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_HASHICORP_VAULT_SECRET_KEY)
  private String nonSysHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_NAME = "non_sys_azure_vault_name";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_NAME)
  private String nonSysAzureVaultName;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_USERNAME_KEY = "non_sys_azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_USERNAME_KEY)
  private String nonSysAzureVaultUsernameKey;

  public static final String SERIALIZED_NAME_NON_SYS_AZURE_VAULT_SECRET_KEY = "non_sys_azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_NON_SYS_AZURE_VAULT_SECRET_KEY)
  private String nonSysAzureVaultSecretKey;

  public static final String SERIALIZED_NAME_NON_SYS_CYBERARK_VAULT_QUERY_STRING = "non_sys_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_NON_SYS_CYBERARK_VAULT_QUERY_STRING)
  private String nonSysCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_FALLBACK_USERNAME = "fallback_username";
  @SerializedName(SERIALIZED_NAME_FALLBACK_USERNAME)
  private String fallbackUsername;

  public static final String SERIALIZED_NAME_FALLBACK_PASSWORD = "fallback_password";
  @SerializedName(SERIALIZED_NAME_FALLBACK_PASSWORD)
  private String fallbackPassword;

  public static final String SERIALIZED_NAME_FALLBACK_VAULT_USERNAME = "fallback_vault_username";
  @SerializedName(SERIALIZED_NAME_FALLBACK_VAULT_USERNAME)
  private String fallbackVaultUsername;

  public static final String SERIALIZED_NAME_FALLBACK_VAULT = "fallback_vault";
  @SerializedName(SERIALIZED_NAME_FALLBACK_VAULT)
  private String fallbackVault;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_ENGINE = "fallback_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_ENGINE)
  private String fallbackHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_PATH = "fallback_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_PATH)
  private String fallbackHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_USERNAME_KEY = "fallback_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_USERNAME_KEY)
  private String fallbackHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_KEY = "fallback_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_HASHICORP_VAULT_SECRET_KEY)
  private String fallbackHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_NAME = "fallback_azure_vault_name";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_NAME)
  private String fallbackAzureVaultName;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_USERNAME_KEY = "fallback_azure_vault_username_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_USERNAME_KEY)
  private String fallbackAzureVaultUsernameKey;

  public static final String SERIALIZED_NAME_FALLBACK_AZURE_VAULT_SECRET_KEY = "fallback_azure_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_FALLBACK_AZURE_VAULT_SECRET_KEY)
  private String fallbackAzureVaultSecretKey;

  public static final String SERIALIZED_NAME_FALLBACK_CYBERARK_VAULT_QUERY_STRING = "fallback_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_FALLBACK_CYBERARK_VAULT_QUERY_STRING)
  private String fallbackCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_OPS_PRE_LOG_SYNC = "ops_pre_log_sync";
  @SerializedName(SERIALIZED_NAME_OPS_PRE_LOG_SYNC)
  private List<SourceOperation> opsPreLogSync;

  public OracleDSourceLinkSourceParameters() {
  }

  public OracleDSourceLinkSourceParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the dSource to be created.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OracleDSourceLinkSourceParameters sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Id of the source to link.
   * @return sourceId
  **/
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public OracleDSourceLinkSourceParameters groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Id of the dataset group where this dSource should belong to.
   * @return groupId
  **/
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public OracleDSourceLinkSourceParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The notes/description for the dSource.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OracleDSourceLinkSourceParameters logSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
    return this;
  }

   /**
   * True if LogSync should run for this database.
   * @return logSyncEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getLogSyncEnabled() {
    return logSyncEnabled;
  }

  public void setLogSyncEnabled(Boolean logSyncEnabled) {
    this.logSyncEnabled = logSyncEnabled;
  }


  public OracleDSourceLinkSourceParameters syncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
    return this;
  }

   /**
   * The ID of the SnapSync policy for the dSource.
   * @return syncPolicyId
  **/
  @javax.annotation.Nullable
  public String getSyncPolicyId() {
    return syncPolicyId;
  }

  public void setSyncPolicyId(String syncPolicyId) {
    this.syncPolicyId = syncPolicyId;
  }


  public OracleDSourceLinkSourceParameters retentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
    return this;
  }

   /**
   * The ID of the Retention policy for the dSource.
   * @return retentionPolicyId
  **/
  @javax.annotation.Nullable
  public String getRetentionPolicyId() {
    return retentionPolicyId;
  }

  public void setRetentionPolicyId(String retentionPolicyId) {
    this.retentionPolicyId = retentionPolicyId;
  }


  public OracleDSourceLinkSourceParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this reporting schedule must be configured as owner of the reporting schedule.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }


  public OracleDSourceLinkSourceParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public OracleDSourceLinkSourceParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for dSource.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public OracleDSourceLinkSourceParameters opsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
    return this;
  }

  public OracleDSourceLinkSourceParameters addOpsPreSyncItem(SourceOperation opsPreSyncItem) {
    if (this.opsPreSync == null) {
      this.opsPreSync = new ArrayList<>();
    }
    this.opsPreSync.add(opsPreSyncItem);
    return this;
  }

   /**
   * Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
   * @return opsPreSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPreSync() {
    return opsPreSync;
  }

  public void setOpsPreSync(List<SourceOperation> opsPreSync) {
    this.opsPreSync = opsPreSync;
  }


  public OracleDSourceLinkSourceParameters opsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
    return this;
  }

  public OracleDSourceLinkSourceParameters addOpsPostSyncItem(SourceOperation opsPostSyncItem) {
    if (this.opsPostSync == null) {
      this.opsPostSync = new ArrayList<>();
    }
    this.opsPostSync.add(opsPostSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource.
   * @return opsPostSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPostSync() {
    return opsPostSync;
  }

  public void setOpsPostSync(List<SourceOperation> opsPostSync) {
    this.opsPostSync = opsPostSync;
  }


  public OracleDSourceLinkSourceParameters externalFilePath(String externalFilePath) {
    this.externalFilePath = externalFilePath;
    return this;
  }

   /**
   * External file path.
   * @return externalFilePath
  **/
  @javax.annotation.Nullable
  public String getExternalFilePath() {
    return externalFilePath;
  }

  public void setExternalFilePath(String externalFilePath) {
    this.externalFilePath = externalFilePath;
  }


  public OracleDSourceLinkSourceParameters environmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
    return this;
  }

   /**
   * Id of the environment user to use for linking.
   * @return environmentUserId
  **/
  @javax.annotation.Nullable
  public String getEnvironmentUserId() {
    return environmentUserId;
  }

  public void setEnvironmentUserId(String environmentUserId) {
    this.environmentUserId = environmentUserId;
  }


  public OracleDSourceLinkSourceParameters backupLevelEnabled(Boolean backupLevelEnabled) {
    this.backupLevelEnabled = backupLevelEnabled;
    return this;
  }

   /**
   * Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.
   * @return backupLevelEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getBackupLevelEnabled() {
    return backupLevelEnabled;
  }

  public void setBackupLevelEnabled(Boolean backupLevelEnabled) {
    this.backupLevelEnabled = backupLevelEnabled;
  }


  public OracleDSourceLinkSourceParameters rmanChannels(Integer rmanChannels) {
    this.rmanChannels = rmanChannels;
    return this;
  }

   /**
   * Number of parallel channels to use.
   * minimum: 1
   * maximum: 32
   * @return rmanChannels
  **/
  @javax.annotation.Nullable
  public Integer getRmanChannels() {
    return rmanChannels;
  }

  public void setRmanChannels(Integer rmanChannels) {
    this.rmanChannels = rmanChannels;
  }


  public OracleDSourceLinkSourceParameters filesPerSet(Integer filesPerSet) {
    this.filesPerSet = filesPerSet;
    return this;
  }

   /**
   * Number of data files to include in each RMAN backup set.
   * minimum: 1
   * maximum: 64
   * @return filesPerSet
  **/
  @javax.annotation.Nullable
  public Integer getFilesPerSet() {
    return filesPerSet;
  }

  public void setFilesPerSet(Integer filesPerSet) {
    this.filesPerSet = filesPerSet;
  }


  public OracleDSourceLinkSourceParameters checkLogical(Boolean checkLogical) {
    this.checkLogical = checkLogical;
    return this;
  }

   /**
   * True if extended block checking should be used for this linked database.
   * @return checkLogical
  **/
  @javax.annotation.Nullable
  public Boolean getCheckLogical() {
    return checkLogical;
  }

  public void setCheckLogical(Boolean checkLogical) {
    this.checkLogical = checkLogical;
  }


  public OracleDSourceLinkSourceParameters encryptedLinkingEnabled(Boolean encryptedLinkingEnabled) {
    this.encryptedLinkingEnabled = encryptedLinkingEnabled;
    return this;
  }

   /**
   * True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.
   * @return encryptedLinkingEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getEncryptedLinkingEnabled() {
    return encryptedLinkingEnabled;
  }

  public void setEncryptedLinkingEnabled(Boolean encryptedLinkingEnabled) {
    this.encryptedLinkingEnabled = encryptedLinkingEnabled;
  }


  public OracleDSourceLinkSourceParameters compressedLinkingEnabled(Boolean compressedLinkingEnabled) {
    this.compressedLinkingEnabled = compressedLinkingEnabled;
    return this;
  }

   /**
   * True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.
   * @return compressedLinkingEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getCompressedLinkingEnabled() {
    return compressedLinkingEnabled;
  }

  public void setCompressedLinkingEnabled(Boolean compressedLinkingEnabled) {
    this.compressedLinkingEnabled = compressedLinkingEnabled;
  }


  public OracleDSourceLinkSourceParameters bandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
    return this;
  }

   /**
   * Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.
   * @return bandwidthLimit
  **/
  @javax.annotation.Nullable
  public Integer getBandwidthLimit() {
    return bandwidthLimit;
  }

  public void setBandwidthLimit(Integer bandwidthLimit) {
    this.bandwidthLimit = bandwidthLimit;
  }


  public OracleDSourceLinkSourceParameters numberOfConnections(Integer numberOfConnections) {
    this.numberOfConnections = numberOfConnections;
    return this;
  }

   /**
   * Total number of transport connections to use during SnapSync.
   * @return numberOfConnections
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfConnections() {
    return numberOfConnections;
  }

  public void setNumberOfConnections(Integer numberOfConnections) {
    this.numberOfConnections = numberOfConnections;
  }


  public OracleDSourceLinkSourceParameters diagnoseNoLoggingFaults(Boolean diagnoseNoLoggingFaults) {
    this.diagnoseNoLoggingFaults = diagnoseNoLoggingFaults;
    return this;
  }

   /**
   * If true, NOLOGGING operations on this container are treated as faults and cannot be resolved manually.
   * @return diagnoseNoLoggingFaults
  **/
  @javax.annotation.Nullable
  public Boolean getDiagnoseNoLoggingFaults() {
    return diagnoseNoLoggingFaults;
  }

  public void setDiagnoseNoLoggingFaults(Boolean diagnoseNoLoggingFaults) {
    this.diagnoseNoLoggingFaults = diagnoseNoLoggingFaults;
  }


  public OracleDSourceLinkSourceParameters preProvisioningEnabled(Boolean preProvisioningEnabled) {
    this.preProvisioningEnabled = preProvisioningEnabled;
    return this;
  }

   /**
   * If true, pre-provisioning will be performed after every sync.
   * @return preProvisioningEnabled
  **/
  @javax.annotation.Nullable
  public Boolean getPreProvisioningEnabled() {
    return preProvisioningEnabled;
  }

  public void setPreProvisioningEnabled(Boolean preProvisioningEnabled) {
    this.preProvisioningEnabled = preProvisioningEnabled;
  }


  public OracleDSourceLinkSourceParameters linkNow(Boolean linkNow) {
    this.linkNow = linkNow;
    return this;
  }

   /**
   * True if initial load should be done immediately.
   * @return linkNow
  **/
  @javax.annotation.Nullable
  public Boolean getLinkNow() {
    return linkNow;
  }

  public void setLinkNow(Boolean linkNow) {
    this.linkNow = linkNow;
  }


  public OracleDSourceLinkSourceParameters forceFullBackup(Boolean forceFullBackup) {
    this.forceFullBackup = forceFullBackup;
    return this;
  }

   /**
   * Whether or not to take another full backup of the source database.
   * @return forceFullBackup
  **/
  @javax.annotation.Nullable
  public Boolean getForceFullBackup() {
    return forceFullBackup;
  }

  public void setForceFullBackup(Boolean forceFullBackup) {
    this.forceFullBackup = forceFullBackup;
  }


  public OracleDSourceLinkSourceParameters doubleSync(Boolean doubleSync) {
    this.doubleSync = doubleSync;
    return this;
  }

   /**
   * True if two SnapSyncs should be performed in immediate succession to reduce the number of logs required to provision the snapshot. This may significantly reduce the time necessary to provision from a snapshot.
   * @return doubleSync
  **/
  @javax.annotation.Nullable
  public Boolean getDoubleSync() {
    return doubleSync;
  }

  public void setDoubleSync(Boolean doubleSync) {
    this.doubleSync = doubleSync;
  }


  public OracleDSourceLinkSourceParameters skipSpaceCheck(Boolean skipSpaceCheck) {
    this.skipSpaceCheck = skipSpaceCheck;
    return this;
  }

   /**
   * Skip check that tests if there is enough space available to store the database in the Delphix Engine. The Delphix Engine estimates how much space a database will occupy after compression and prevents SnapSync if insufficient space is available. This safeguard can be overridden using this option. This may be useful when linking highly compressible databases.
   * @return skipSpaceCheck
  **/
  @javax.annotation.Nullable
  public Boolean getSkipSpaceCheck() {
    return skipSpaceCheck;
  }

  public void setSkipSpaceCheck(Boolean skipSpaceCheck) {
    this.skipSpaceCheck = skipSpaceCheck;
  }


  public OracleDSourceLinkSourceParameters doNotResume(Boolean doNotResume) {
    this.doNotResume = doNotResume;
    return this;
  }

   /**
   * Indicates whether a fresh SnapSync must be started regardless if it was possible to resume the current SnapSync. If true, we will not resume but instead ignore previous progress and backup all datafiles even if already completed from previous failed SnapSync. This does not force a full backup, if an incremental was in progress this will start a new incremental snapshot.
   * @return doNotResume
  **/
  @javax.annotation.Nullable
  public Boolean getDoNotResume() {
    return doNotResume;
  }

  public void setDoNotResume(Boolean doNotResume) {
    this.doNotResume = doNotResume;
  }


  public OracleDSourceLinkSourceParameters filesForFullBackup(List<Integer> filesForFullBackup) {
    this.filesForFullBackup = filesForFullBackup;
    return this;
  }

  public OracleDSourceLinkSourceParameters addFilesForFullBackupItem(Integer filesForFullBackupItem) {
    if (this.filesForFullBackup == null) {
      this.filesForFullBackup = new ArrayList<>();
    }
    this.filesForFullBackup.add(filesForFullBackupItem);
    return this;
  }

   /**
   * List of datafiles to take a full backup of. This would be useful in situations where certain datafiles could not be backed up during previous SnapSync due to corruption or because they went offline.
   * @return filesForFullBackup
  **/
  @javax.annotation.Nullable
  public List<Integer> getFilesForFullBackup() {
    return filesForFullBackup;
  }

  public void setFilesForFullBackup(List<Integer> filesForFullBackup) {
    this.filesForFullBackup = filesForFullBackup;
  }


  public OracleDSourceLinkSourceParameters logSyncMode(LogSyncModeEnum logSyncMode) {
    this.logSyncMode = logSyncMode;
    return this;
  }

   /**
   * LogSync operation mode for this database.
   * @return logSyncMode
  **/
  @javax.annotation.Nullable
  public LogSyncModeEnum getLogSyncMode() {
    return logSyncMode;
  }

  public void setLogSyncMode(LogSyncModeEnum logSyncMode) {
    this.logSyncMode = logSyncMode;
  }


  public OracleDSourceLinkSourceParameters logSyncInterval(Integer logSyncInterval) {
    this.logSyncInterval = logSyncInterval;
    return this;
  }

   /**
   * Interval between LogSync requests, in seconds.
   * @return logSyncInterval
  **/
  @javax.annotation.Nullable
  public Integer getLogSyncInterval() {
    return logSyncInterval;
  }

  public void setLogSyncInterval(Integer logSyncInterval) {
    this.logSyncInterval = logSyncInterval;
  }


  public OracleDSourceLinkSourceParameters nonSysUsername(String nonSysUsername) {
    this.nonSysUsername = nonSysUsername;
    return this;
  }

   /**
   * Non-SYS database user to access this database. Only required for username-password auth (Single tenant only).
   * @return nonSysUsername
  **/
  @javax.annotation.Nullable
  public String getNonSysUsername() {
    return nonSysUsername;
  }

  public void setNonSysUsername(String nonSysUsername) {
    this.nonSysUsername = nonSysUsername;
  }


  public OracleDSourceLinkSourceParameters nonSysPassword(String nonSysPassword) {
    this.nonSysPassword = nonSysPassword;
    return this;
  }

   /**
   * Password for non sys user authentication (Single tenant only).
   * @return nonSysPassword
  **/
  @javax.annotation.Nullable
  public String getNonSysPassword() {
    return nonSysPassword;
  }

  public void setNonSysPassword(String nonSysPassword) {
    this.nonSysPassword = nonSysPassword;
  }


  public OracleDSourceLinkSourceParameters nonSysVaultUsername(String nonSysVaultUsername) {
    this.nonSysVaultUsername = nonSysVaultUsername;
    return this;
  }

   /**
   * Delphix display name for the non sys vault user(Single tenant only).
   * @return nonSysVaultUsername
  **/
  @javax.annotation.Nullable
  public String getNonSysVaultUsername() {
    return nonSysVaultUsername;
  }

  public void setNonSysVaultUsername(String nonSysVaultUsername) {
    this.nonSysVaultUsername = nonSysVaultUsername;
  }


  public OracleDSourceLinkSourceParameters nonSysVault(String nonSysVault) {
    this.nonSysVault = nonSysVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the database credentials (Single tenant only).
   * @return nonSysVault
  **/
  @javax.annotation.Nullable
  public String getNonSysVault() {
    return nonSysVault;
  }

  public void setNonSysVault(String nonSysVault) {
    this.nonSysVault = nonSysVault;
  }


  public OracleDSourceLinkSourceParameters nonSysHashicorpVaultEngine(String nonSysHashicorpVaultEngine) {
    this.nonSysHashicorpVaultEngine = nonSysHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored (Single tenant only).
   * @return nonSysHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getNonSysHashicorpVaultEngine() {
    return nonSysHashicorpVaultEngine;
  }

  public void setNonSysHashicorpVaultEngine(String nonSysHashicorpVaultEngine) {
    this.nonSysHashicorpVaultEngine = nonSysHashicorpVaultEngine;
  }


  public OracleDSourceLinkSourceParameters nonSysHashicorpVaultSecretPath(String nonSysHashicorpVaultSecretPath) {
    this.nonSysHashicorpVaultSecretPath = nonSysHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored (Single tenant only).
   * @return nonSysHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getNonSysHashicorpVaultSecretPath() {
    return nonSysHashicorpVaultSecretPath;
  }

  public void setNonSysHashicorpVaultSecretPath(String nonSysHashicorpVaultSecretPath) {
    this.nonSysHashicorpVaultSecretPath = nonSysHashicorpVaultSecretPath;
  }


  public OracleDSourceLinkSourceParameters nonSysHashicorpVaultUsernameKey(String nonSysHashicorpVaultUsernameKey) {
    this.nonSysHashicorpVaultUsernameKey = nonSysHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Hashicorp vault key for the username in the key-value store (Single tenant only).
   * @return nonSysHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getNonSysHashicorpVaultUsernameKey() {
    return nonSysHashicorpVaultUsernameKey;
  }

  public void setNonSysHashicorpVaultUsernameKey(String nonSysHashicorpVaultUsernameKey) {
    this.nonSysHashicorpVaultUsernameKey = nonSysHashicorpVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParameters nonSysHashicorpVaultSecretKey(String nonSysHashicorpVaultSecretKey) {
    this.nonSysHashicorpVaultSecretKey = nonSysHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Hashicorp vault key for the password in the key-value store (Single tenant only).
   * @return nonSysHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getNonSysHashicorpVaultSecretKey() {
    return nonSysHashicorpVaultSecretKey;
  }

  public void setNonSysHashicorpVaultSecretKey(String nonSysHashicorpVaultSecretKey) {
    this.nonSysHashicorpVaultSecretKey = nonSysHashicorpVaultSecretKey;
  }


  public OracleDSourceLinkSourceParameters nonSysAzureVaultName(String nonSysAzureVaultName) {
    this.nonSysAzureVaultName = nonSysAzureVaultName;
    return this;
  }

   /**
   * Azure key vault name (Single tenant only).
   * @return nonSysAzureVaultName
  **/
  @javax.annotation.Nullable
  public String getNonSysAzureVaultName() {
    return nonSysAzureVaultName;
  }

  public void setNonSysAzureVaultName(String nonSysAzureVaultName) {
    this.nonSysAzureVaultName = nonSysAzureVaultName;
  }


  public OracleDSourceLinkSourceParameters nonSysAzureVaultUsernameKey(String nonSysAzureVaultUsernameKey) {
    this.nonSysAzureVaultUsernameKey = nonSysAzureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store (Single tenant only).
   * @return nonSysAzureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getNonSysAzureVaultUsernameKey() {
    return nonSysAzureVaultUsernameKey;
  }

  public void setNonSysAzureVaultUsernameKey(String nonSysAzureVaultUsernameKey) {
    this.nonSysAzureVaultUsernameKey = nonSysAzureVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParameters nonSysAzureVaultSecretKey(String nonSysAzureVaultSecretKey) {
    this.nonSysAzureVaultSecretKey = nonSysAzureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store (Single tenant only).
   * @return nonSysAzureVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getNonSysAzureVaultSecretKey() {
    return nonSysAzureVaultSecretKey;
  }

  public void setNonSysAzureVaultSecretKey(String nonSysAzureVaultSecretKey) {
    this.nonSysAzureVaultSecretKey = nonSysAzureVaultSecretKey;
  }


  public OracleDSourceLinkSourceParameters nonSysCyberarkVaultQueryString(String nonSysCyberarkVaultQueryString) {
    this.nonSysCyberarkVaultQueryString = nonSysCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault (Single tenant only).
   * @return nonSysCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getNonSysCyberarkVaultQueryString() {
    return nonSysCyberarkVaultQueryString;
  }

  public void setNonSysCyberarkVaultQueryString(String nonSysCyberarkVaultQueryString) {
    this.nonSysCyberarkVaultQueryString = nonSysCyberarkVaultQueryString;
  }


  public OracleDSourceLinkSourceParameters fallbackUsername(String fallbackUsername) {
    this.fallbackUsername = fallbackUsername;
    return this;
  }

   /**
   * The database fallback username. Optional if bequeath connections are enabled (to be used in case of bequeath connection failures). Only required for username-password auth.
   * @return fallbackUsername
  **/
  @javax.annotation.Nullable
  public String getFallbackUsername() {
    return fallbackUsername;
  }

  public void setFallbackUsername(String fallbackUsername) {
    this.fallbackUsername = fallbackUsername;
  }


  public OracleDSourceLinkSourceParameters fallbackPassword(String fallbackPassword) {
    this.fallbackPassword = fallbackPassword;
    return this;
  }

   /**
   * Password for fallback username.
   * @return fallbackPassword
  **/
  @javax.annotation.Nullable
  public String getFallbackPassword() {
    return fallbackPassword;
  }

  public void setFallbackPassword(String fallbackPassword) {
    this.fallbackPassword = fallbackPassword;
  }


  public OracleDSourceLinkSourceParameters fallbackVaultUsername(String fallbackVaultUsername) {
    this.fallbackVaultUsername = fallbackVaultUsername;
    return this;
  }

   /**
   * Delphix display name for the fallback vault user.
   * @return fallbackVaultUsername
  **/
  @javax.annotation.Nullable
  public String getFallbackVaultUsername() {
    return fallbackVaultUsername;
  }

  public void setFallbackVaultUsername(String fallbackVaultUsername) {
    this.fallbackVaultUsername = fallbackVaultUsername;
  }


  public OracleDSourceLinkSourceParameters fallbackVault(String fallbackVault) {
    this.fallbackVault = fallbackVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the database credentials.
   * @return fallbackVault
  **/
  @javax.annotation.Nullable
  public String getFallbackVault() {
    return fallbackVault;
  }

  public void setFallbackVault(String fallbackVault) {
    this.fallbackVault = fallbackVault;
  }


  public OracleDSourceLinkSourceParameters fallbackHashicorpVaultEngine(String fallbackHashicorpVaultEngine) {
    this.fallbackHashicorpVaultEngine = fallbackHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return fallbackHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getFallbackHashicorpVaultEngine() {
    return fallbackHashicorpVaultEngine;
  }

  public void setFallbackHashicorpVaultEngine(String fallbackHashicorpVaultEngine) {
    this.fallbackHashicorpVaultEngine = fallbackHashicorpVaultEngine;
  }


  public OracleDSourceLinkSourceParameters fallbackHashicorpVaultSecretPath(String fallbackHashicorpVaultSecretPath) {
    this.fallbackHashicorpVaultSecretPath = fallbackHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return fallbackHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getFallbackHashicorpVaultSecretPath() {
    return fallbackHashicorpVaultSecretPath;
  }

  public void setFallbackHashicorpVaultSecretPath(String fallbackHashicorpVaultSecretPath) {
    this.fallbackHashicorpVaultSecretPath = fallbackHashicorpVaultSecretPath;
  }


  public OracleDSourceLinkSourceParameters fallbackHashicorpVaultUsernameKey(String fallbackHashicorpVaultUsernameKey) {
    this.fallbackHashicorpVaultUsernameKey = fallbackHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Hashicorp vault key for the username in the key-value store.
   * @return fallbackHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getFallbackHashicorpVaultUsernameKey() {
    return fallbackHashicorpVaultUsernameKey;
  }

  public void setFallbackHashicorpVaultUsernameKey(String fallbackHashicorpVaultUsernameKey) {
    this.fallbackHashicorpVaultUsernameKey = fallbackHashicorpVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParameters fallbackHashicorpVaultSecretKey(String fallbackHashicorpVaultSecretKey) {
    this.fallbackHashicorpVaultSecretKey = fallbackHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Hashicorp vault key for the password in the key-value store.
   * @return fallbackHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getFallbackHashicorpVaultSecretKey() {
    return fallbackHashicorpVaultSecretKey;
  }

  public void setFallbackHashicorpVaultSecretKey(String fallbackHashicorpVaultSecretKey) {
    this.fallbackHashicorpVaultSecretKey = fallbackHashicorpVaultSecretKey;
  }


  public OracleDSourceLinkSourceParameters fallbackAzureVaultName(String fallbackAzureVaultName) {
    this.fallbackAzureVaultName = fallbackAzureVaultName;
    return this;
  }

   /**
   * Azure key vault name.
   * @return fallbackAzureVaultName
  **/
  @javax.annotation.Nullable
  public String getFallbackAzureVaultName() {
    return fallbackAzureVaultName;
  }

  public void setFallbackAzureVaultName(String fallbackAzureVaultName) {
    this.fallbackAzureVaultName = fallbackAzureVaultName;
  }


  public OracleDSourceLinkSourceParameters fallbackAzureVaultUsernameKey(String fallbackAzureVaultUsernameKey) {
    this.fallbackAzureVaultUsernameKey = fallbackAzureVaultUsernameKey;
    return this;
  }

   /**
   * Azure vault key for the username in the key-value store.
   * @return fallbackAzureVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getFallbackAzureVaultUsernameKey() {
    return fallbackAzureVaultUsernameKey;
  }

  public void setFallbackAzureVaultUsernameKey(String fallbackAzureVaultUsernameKey) {
    this.fallbackAzureVaultUsernameKey = fallbackAzureVaultUsernameKey;
  }


  public OracleDSourceLinkSourceParameters fallbackAzureVaultSecretKey(String fallbackAzureVaultSecretKey) {
    this.fallbackAzureVaultSecretKey = fallbackAzureVaultSecretKey;
    return this;
  }

   /**
   * Azure vault key for the password in the key-value store.
   * @return fallbackAzureVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getFallbackAzureVaultSecretKey() {
    return fallbackAzureVaultSecretKey;
  }

  public void setFallbackAzureVaultSecretKey(String fallbackAzureVaultSecretKey) {
    this.fallbackAzureVaultSecretKey = fallbackAzureVaultSecretKey;
  }


  public OracleDSourceLinkSourceParameters fallbackCyberarkVaultQueryString(String fallbackCyberarkVaultQueryString) {
    this.fallbackCyberarkVaultQueryString = fallbackCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return fallbackCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getFallbackCyberarkVaultQueryString() {
    return fallbackCyberarkVaultQueryString;
  }

  public void setFallbackCyberarkVaultQueryString(String fallbackCyberarkVaultQueryString) {
    this.fallbackCyberarkVaultQueryString = fallbackCyberarkVaultQueryString;
  }


  public OracleDSourceLinkSourceParameters opsPreLogSync(List<SourceOperation> opsPreLogSync) {
    this.opsPreLogSync = opsPreLogSync;
    return this;
  }

  public OracleDSourceLinkSourceParameters addOpsPreLogSyncItem(SourceOperation opsPreLogSyncItem) {
    if (this.opsPreLogSync == null) {
      this.opsPreLogSync = new ArrayList<>();
    }
    this.opsPreLogSync.add(opsPreLogSyncItem);
    return this;
  }

   /**
   * Operations to perform after syncing a created dSource and before running the LogSync.
   * @return opsPreLogSync
  **/
  @javax.annotation.Nullable
  public List<SourceOperation> getOpsPreLogSync() {
    return opsPreLogSync;
  }

  public void setOpsPreLogSync(List<SourceOperation> opsPreLogSync) {
    this.opsPreLogSync = opsPreLogSync;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OracleDSourceLinkSourceParameters oracleDSourceLinkSourceParameters = (OracleDSourceLinkSourceParameters) o;
    return Objects.equals(this.name, oracleDSourceLinkSourceParameters.name) &&
        Objects.equals(this.sourceId, oracleDSourceLinkSourceParameters.sourceId) &&
        Objects.equals(this.groupId, oracleDSourceLinkSourceParameters.groupId) &&
        Objects.equals(this.description, oracleDSourceLinkSourceParameters.description) &&
        Objects.equals(this.logSyncEnabled, oracleDSourceLinkSourceParameters.logSyncEnabled) &&
        Objects.equals(this.syncPolicyId, oracleDSourceLinkSourceParameters.syncPolicyId) &&
        Objects.equals(this.retentionPolicyId, oracleDSourceLinkSourceParameters.retentionPolicyId) &&
        Objects.equals(this.makeCurrentAccountOwner, oracleDSourceLinkSourceParameters.makeCurrentAccountOwner) &&
        Objects.equals(this.tags, oracleDSourceLinkSourceParameters.tags) &&
        Objects.equals(this.opsPreSync, oracleDSourceLinkSourceParameters.opsPreSync) &&
        Objects.equals(this.opsPostSync, oracleDSourceLinkSourceParameters.opsPostSync) &&
        Objects.equals(this.externalFilePath, oracleDSourceLinkSourceParameters.externalFilePath) &&
        Objects.equals(this.environmentUserId, oracleDSourceLinkSourceParameters.environmentUserId) &&
        Objects.equals(this.backupLevelEnabled, oracleDSourceLinkSourceParameters.backupLevelEnabled) &&
        Objects.equals(this.rmanChannels, oracleDSourceLinkSourceParameters.rmanChannels) &&
        Objects.equals(this.filesPerSet, oracleDSourceLinkSourceParameters.filesPerSet) &&
        Objects.equals(this.checkLogical, oracleDSourceLinkSourceParameters.checkLogical) &&
        Objects.equals(this.encryptedLinkingEnabled, oracleDSourceLinkSourceParameters.encryptedLinkingEnabled) &&
        Objects.equals(this.compressedLinkingEnabled, oracleDSourceLinkSourceParameters.compressedLinkingEnabled) &&
        Objects.equals(this.bandwidthLimit, oracleDSourceLinkSourceParameters.bandwidthLimit) &&
        Objects.equals(this.numberOfConnections, oracleDSourceLinkSourceParameters.numberOfConnections) &&
        Objects.equals(this.diagnoseNoLoggingFaults, oracleDSourceLinkSourceParameters.diagnoseNoLoggingFaults) &&
        Objects.equals(this.preProvisioningEnabled, oracleDSourceLinkSourceParameters.preProvisioningEnabled) &&
        Objects.equals(this.linkNow, oracleDSourceLinkSourceParameters.linkNow) &&
        Objects.equals(this.forceFullBackup, oracleDSourceLinkSourceParameters.forceFullBackup) &&
        Objects.equals(this.doubleSync, oracleDSourceLinkSourceParameters.doubleSync) &&
        Objects.equals(this.skipSpaceCheck, oracleDSourceLinkSourceParameters.skipSpaceCheck) &&
        Objects.equals(this.doNotResume, oracleDSourceLinkSourceParameters.doNotResume) &&
        Objects.equals(this.filesForFullBackup, oracleDSourceLinkSourceParameters.filesForFullBackup) &&
        Objects.equals(this.logSyncMode, oracleDSourceLinkSourceParameters.logSyncMode) &&
        Objects.equals(this.logSyncInterval, oracleDSourceLinkSourceParameters.logSyncInterval) &&
        Objects.equals(this.nonSysUsername, oracleDSourceLinkSourceParameters.nonSysUsername) &&
        Objects.equals(this.nonSysPassword, oracleDSourceLinkSourceParameters.nonSysPassword) &&
        Objects.equals(this.nonSysVaultUsername, oracleDSourceLinkSourceParameters.nonSysVaultUsername) &&
        Objects.equals(this.nonSysVault, oracleDSourceLinkSourceParameters.nonSysVault) &&
        Objects.equals(this.nonSysHashicorpVaultEngine, oracleDSourceLinkSourceParameters.nonSysHashicorpVaultEngine) &&
        Objects.equals(this.nonSysHashicorpVaultSecretPath, oracleDSourceLinkSourceParameters.nonSysHashicorpVaultSecretPath) &&
        Objects.equals(this.nonSysHashicorpVaultUsernameKey, oracleDSourceLinkSourceParameters.nonSysHashicorpVaultUsernameKey) &&
        Objects.equals(this.nonSysHashicorpVaultSecretKey, oracleDSourceLinkSourceParameters.nonSysHashicorpVaultSecretKey) &&
        Objects.equals(this.nonSysAzureVaultName, oracleDSourceLinkSourceParameters.nonSysAzureVaultName) &&
        Objects.equals(this.nonSysAzureVaultUsernameKey, oracleDSourceLinkSourceParameters.nonSysAzureVaultUsernameKey) &&
        Objects.equals(this.nonSysAzureVaultSecretKey, oracleDSourceLinkSourceParameters.nonSysAzureVaultSecretKey) &&
        Objects.equals(this.nonSysCyberarkVaultQueryString, oracleDSourceLinkSourceParameters.nonSysCyberarkVaultQueryString) &&
        Objects.equals(this.fallbackUsername, oracleDSourceLinkSourceParameters.fallbackUsername) &&
        Objects.equals(this.fallbackPassword, oracleDSourceLinkSourceParameters.fallbackPassword) &&
        Objects.equals(this.fallbackVaultUsername, oracleDSourceLinkSourceParameters.fallbackVaultUsername) &&
        Objects.equals(this.fallbackVault, oracleDSourceLinkSourceParameters.fallbackVault) &&
        Objects.equals(this.fallbackHashicorpVaultEngine, oracleDSourceLinkSourceParameters.fallbackHashicorpVaultEngine) &&
        Objects.equals(this.fallbackHashicorpVaultSecretPath, oracleDSourceLinkSourceParameters.fallbackHashicorpVaultSecretPath) &&
        Objects.equals(this.fallbackHashicorpVaultUsernameKey, oracleDSourceLinkSourceParameters.fallbackHashicorpVaultUsernameKey) &&
        Objects.equals(this.fallbackHashicorpVaultSecretKey, oracleDSourceLinkSourceParameters.fallbackHashicorpVaultSecretKey) &&
        Objects.equals(this.fallbackAzureVaultName, oracleDSourceLinkSourceParameters.fallbackAzureVaultName) &&
        Objects.equals(this.fallbackAzureVaultUsernameKey, oracleDSourceLinkSourceParameters.fallbackAzureVaultUsernameKey) &&
        Objects.equals(this.fallbackAzureVaultSecretKey, oracleDSourceLinkSourceParameters.fallbackAzureVaultSecretKey) &&
        Objects.equals(this.fallbackCyberarkVaultQueryString, oracleDSourceLinkSourceParameters.fallbackCyberarkVaultQueryString) &&
        Objects.equals(this.opsPreLogSync, oracleDSourceLinkSourceParameters.opsPreLogSync);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sourceId, groupId, description, logSyncEnabled, syncPolicyId, retentionPolicyId, makeCurrentAccountOwner, tags, opsPreSync, opsPostSync, externalFilePath, environmentUserId, backupLevelEnabled, rmanChannels, filesPerSet, checkLogical, encryptedLinkingEnabled, compressedLinkingEnabled, bandwidthLimit, numberOfConnections, diagnoseNoLoggingFaults, preProvisioningEnabled, linkNow, forceFullBackup, doubleSync, skipSpaceCheck, doNotResume, filesForFullBackup, logSyncMode, logSyncInterval, nonSysUsername, nonSysPassword, nonSysVaultUsername, nonSysVault, nonSysHashicorpVaultEngine, nonSysHashicorpVaultSecretPath, nonSysHashicorpVaultUsernameKey, nonSysHashicorpVaultSecretKey, nonSysAzureVaultName, nonSysAzureVaultUsernameKey, nonSysAzureVaultSecretKey, nonSysCyberarkVaultQueryString, fallbackUsername, fallbackPassword, fallbackVaultUsername, fallbackVault, fallbackHashicorpVaultEngine, fallbackHashicorpVaultSecretPath, fallbackHashicorpVaultUsernameKey, fallbackHashicorpVaultSecretKey, fallbackAzureVaultName, fallbackAzureVaultUsernameKey, fallbackAzureVaultSecretKey, fallbackCyberarkVaultQueryString, opsPreLogSync);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OracleDSourceLinkSourceParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logSyncEnabled: ").append(toIndentedString(logSyncEnabled)).append("\n");
    sb.append("    syncPolicyId: ").append(toIndentedString(syncPolicyId)).append("\n");
    sb.append("    retentionPolicyId: ").append(toIndentedString(retentionPolicyId)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    opsPreSync: ").append(toIndentedString(opsPreSync)).append("\n");
    sb.append("    opsPostSync: ").append(toIndentedString(opsPostSync)).append("\n");
    sb.append("    externalFilePath: ").append(toIndentedString(externalFilePath)).append("\n");
    sb.append("    environmentUserId: ").append(toIndentedString(environmentUserId)).append("\n");
    sb.append("    backupLevelEnabled: ").append(toIndentedString(backupLevelEnabled)).append("\n");
    sb.append("    rmanChannels: ").append(toIndentedString(rmanChannels)).append("\n");
    sb.append("    filesPerSet: ").append(toIndentedString(filesPerSet)).append("\n");
    sb.append("    checkLogical: ").append(toIndentedString(checkLogical)).append("\n");
    sb.append("    encryptedLinkingEnabled: ").append(toIndentedString(encryptedLinkingEnabled)).append("\n");
    sb.append("    compressedLinkingEnabled: ").append(toIndentedString(compressedLinkingEnabled)).append("\n");
    sb.append("    bandwidthLimit: ").append(toIndentedString(bandwidthLimit)).append("\n");
    sb.append("    numberOfConnections: ").append(toIndentedString(numberOfConnections)).append("\n");
    sb.append("    diagnoseNoLoggingFaults: ").append(toIndentedString(diagnoseNoLoggingFaults)).append("\n");
    sb.append("    preProvisioningEnabled: ").append(toIndentedString(preProvisioningEnabled)).append("\n");
    sb.append("    linkNow: ").append(toIndentedString(linkNow)).append("\n");
    sb.append("    forceFullBackup: ").append(toIndentedString(forceFullBackup)).append("\n");
    sb.append("    doubleSync: ").append(toIndentedString(doubleSync)).append("\n");
    sb.append("    skipSpaceCheck: ").append(toIndentedString(skipSpaceCheck)).append("\n");
    sb.append("    doNotResume: ").append(toIndentedString(doNotResume)).append("\n");
    sb.append("    filesForFullBackup: ").append(toIndentedString(filesForFullBackup)).append("\n");
    sb.append("    logSyncMode: ").append(toIndentedString(logSyncMode)).append("\n");
    sb.append("    logSyncInterval: ").append(toIndentedString(logSyncInterval)).append("\n");
    sb.append("    nonSysUsername: ").append(toIndentedString(nonSysUsername)).append("\n");
    sb.append("    nonSysPassword: ").append(toIndentedString(nonSysPassword)).append("\n");
    sb.append("    nonSysVaultUsername: ").append(toIndentedString(nonSysVaultUsername)).append("\n");
    sb.append("    nonSysVault: ").append(toIndentedString(nonSysVault)).append("\n");
    sb.append("    nonSysHashicorpVaultEngine: ").append(toIndentedString(nonSysHashicorpVaultEngine)).append("\n");
    sb.append("    nonSysHashicorpVaultSecretPath: ").append(toIndentedString(nonSysHashicorpVaultSecretPath)).append("\n");
    sb.append("    nonSysHashicorpVaultUsernameKey: ").append(toIndentedString(nonSysHashicorpVaultUsernameKey)).append("\n");
    sb.append("    nonSysHashicorpVaultSecretKey: ").append(toIndentedString(nonSysHashicorpVaultSecretKey)).append("\n");
    sb.append("    nonSysAzureVaultName: ").append(toIndentedString(nonSysAzureVaultName)).append("\n");
    sb.append("    nonSysAzureVaultUsernameKey: ").append(toIndentedString(nonSysAzureVaultUsernameKey)).append("\n");
    sb.append("    nonSysAzureVaultSecretKey: ").append(toIndentedString(nonSysAzureVaultSecretKey)).append("\n");
    sb.append("    nonSysCyberarkVaultQueryString: ").append(toIndentedString(nonSysCyberarkVaultQueryString)).append("\n");
    sb.append("    fallbackUsername: ").append(toIndentedString(fallbackUsername)).append("\n");
    sb.append("    fallbackPassword: ").append(toIndentedString(fallbackPassword)).append("\n");
    sb.append("    fallbackVaultUsername: ").append(toIndentedString(fallbackVaultUsername)).append("\n");
    sb.append("    fallbackVault: ").append(toIndentedString(fallbackVault)).append("\n");
    sb.append("    fallbackHashicorpVaultEngine: ").append(toIndentedString(fallbackHashicorpVaultEngine)).append("\n");
    sb.append("    fallbackHashicorpVaultSecretPath: ").append(toIndentedString(fallbackHashicorpVaultSecretPath)).append("\n");
    sb.append("    fallbackHashicorpVaultUsernameKey: ").append(toIndentedString(fallbackHashicorpVaultUsernameKey)).append("\n");
    sb.append("    fallbackHashicorpVaultSecretKey: ").append(toIndentedString(fallbackHashicorpVaultSecretKey)).append("\n");
    sb.append("    fallbackAzureVaultName: ").append(toIndentedString(fallbackAzureVaultName)).append("\n");
    sb.append("    fallbackAzureVaultUsernameKey: ").append(toIndentedString(fallbackAzureVaultUsernameKey)).append("\n");
    sb.append("    fallbackAzureVaultSecretKey: ").append(toIndentedString(fallbackAzureVaultSecretKey)).append("\n");
    sb.append("    fallbackCyberarkVaultQueryString: ").append(toIndentedString(fallbackCyberarkVaultQueryString)).append("\n");
    sb.append("    opsPreLogSync: ").append(toIndentedString(opsPreLogSync)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("source_id");
    openapiFields.add("group_id");
    openapiFields.add("description");
    openapiFields.add("log_sync_enabled");
    openapiFields.add("sync_policy_id");
    openapiFields.add("retention_policy_id");
    openapiFields.add("make_current_account_owner");
    openapiFields.add("tags");
    openapiFields.add("ops_pre_sync");
    openapiFields.add("ops_post_sync");
    openapiFields.add("external_file_path");
    openapiFields.add("environment_user_id");
    openapiFields.add("backup_level_enabled");
    openapiFields.add("rman_channels");
    openapiFields.add("files_per_set");
    openapiFields.add("check_logical");
    openapiFields.add("encrypted_linking_enabled");
    openapiFields.add("compressed_linking_enabled");
    openapiFields.add("bandwidth_limit");
    openapiFields.add("number_of_connections");
    openapiFields.add("diagnose_no_logging_faults");
    openapiFields.add("pre_provisioning_enabled");
    openapiFields.add("link_now");
    openapiFields.add("force_full_backup");
    openapiFields.add("double_sync");
    openapiFields.add("skip_space_check");
    openapiFields.add("do_not_resume");
    openapiFields.add("files_for_full_backup");
    openapiFields.add("log_sync_mode");
    openapiFields.add("log_sync_interval");
    openapiFields.add("non_sys_username");
    openapiFields.add("non_sys_password");
    openapiFields.add("non_sys_vault_username");
    openapiFields.add("non_sys_vault");
    openapiFields.add("non_sys_hashicorp_vault_engine");
    openapiFields.add("non_sys_hashicorp_vault_secret_path");
    openapiFields.add("non_sys_hashicorp_vault_username_key");
    openapiFields.add("non_sys_hashicorp_vault_secret_key");
    openapiFields.add("non_sys_azure_vault_name");
    openapiFields.add("non_sys_azure_vault_username_key");
    openapiFields.add("non_sys_azure_vault_secret_key");
    openapiFields.add("non_sys_cyberark_vault_query_string");
    openapiFields.add("fallback_username");
    openapiFields.add("fallback_password");
    openapiFields.add("fallback_vault_username");
    openapiFields.add("fallback_vault");
    openapiFields.add("fallback_hashicorp_vault_engine");
    openapiFields.add("fallback_hashicorp_vault_secret_path");
    openapiFields.add("fallback_hashicorp_vault_username_key");
    openapiFields.add("fallback_hashicorp_vault_secret_key");
    openapiFields.add("fallback_azure_vault_name");
    openapiFields.add("fallback_azure_vault_username_key");
    openapiFields.add("fallback_azure_vault_secret_key");
    openapiFields.add("fallback_cyberark_vault_query_string");
    openapiFields.add("ops_pre_log_sync");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source_id");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OracleDSourceLinkSourceParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OracleDSourceLinkSourceParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OracleDSourceLinkSourceParameters is not found in the empty JSON string", OracleDSourceLinkSourceParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OracleDSourceLinkSourceParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OracleDSourceLinkSourceParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OracleDSourceLinkSourceParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("source_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_id").toString()));
      }
      if ((jsonObj.get("group_id") != null && !jsonObj.get("group_id").isJsonNull()) && !jsonObj.get("group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("sync_policy_id") != null && !jsonObj.get("sync_policy_id").isJsonNull()) && !jsonObj.get("sync_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sync_policy_id").toString()));
      }
      if ((jsonObj.get("retention_policy_id") != null && !jsonObj.get("retention_policy_id").isJsonNull()) && !jsonObj.get("retention_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retention_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retention_policy_id").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if (jsonObj.get("ops_pre_sync") != null && !jsonObj.get("ops_pre_sync").isJsonNull()) {
        JsonArray jsonArrayopsPreSync = jsonObj.getAsJsonArray("ops_pre_sync");
        if (jsonArrayopsPreSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_pre_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_pre_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_pre_sync").toString()));
          }

          // validate the optional field `ops_pre_sync` (array)
          for (int i = 0; i < jsonArrayopsPreSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPreSync.get(i));
          };
        }
      }
      if (jsonObj.get("ops_post_sync") != null && !jsonObj.get("ops_post_sync").isJsonNull()) {
        JsonArray jsonArrayopsPostSync = jsonObj.getAsJsonArray("ops_post_sync");
        if (jsonArrayopsPostSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_post_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_post_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_post_sync").toString()));
          }

          // validate the optional field `ops_post_sync` (array)
          for (int i = 0; i < jsonArrayopsPostSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPostSync.get(i));
          };
        }
      }
      if ((jsonObj.get("external_file_path") != null && !jsonObj.get("external_file_path").isJsonNull()) && !jsonObj.get("external_file_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_file_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_file_path").toString()));
      }
      if ((jsonObj.get("environment_user_id") != null && !jsonObj.get("environment_user_id").isJsonNull()) && !jsonObj.get("environment_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environment_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environment_user_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("files_for_full_backup") != null && !jsonObj.get("files_for_full_backup").isJsonNull() && !jsonObj.get("files_for_full_backup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `files_for_full_backup` to be an array in the JSON string but got `%s`", jsonObj.get("files_for_full_backup").toString()));
      }
      if ((jsonObj.get("log_sync_mode") != null && !jsonObj.get("log_sync_mode").isJsonNull()) && !jsonObj.get("log_sync_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_sync_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_sync_mode").toString()));
      }
      // validate the optional field `log_sync_mode`
      if (jsonObj.get("log_sync_mode") != null && !jsonObj.get("log_sync_mode").isJsonNull()) {
        LogSyncModeEnum.validateJsonElement(jsonObj.get("log_sync_mode"));
      }
      if ((jsonObj.get("non_sys_username") != null && !jsonObj.get("non_sys_username").isJsonNull()) && !jsonObj.get("non_sys_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_username").toString()));
      }
      if ((jsonObj.get("non_sys_password") != null && !jsonObj.get("non_sys_password").isJsonNull()) && !jsonObj.get("non_sys_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_password").toString()));
      }
      if ((jsonObj.get("non_sys_vault_username") != null && !jsonObj.get("non_sys_vault_username").isJsonNull()) && !jsonObj.get("non_sys_vault_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_vault_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_vault_username").toString()));
      }
      if ((jsonObj.get("non_sys_vault") != null && !jsonObj.get("non_sys_vault").isJsonNull()) && !jsonObj.get("non_sys_vault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_vault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_vault").toString()));
      }
      if ((jsonObj.get("non_sys_hashicorp_vault_engine") != null && !jsonObj.get("non_sys_hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("non_sys_hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("non_sys_hashicorp_vault_secret_path") != null && !jsonObj.get("non_sys_hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("non_sys_hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("non_sys_hashicorp_vault_username_key") != null && !jsonObj.get("non_sys_hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("non_sys_hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("non_sys_hashicorp_vault_secret_key") != null && !jsonObj.get("non_sys_hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("non_sys_hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("non_sys_azure_vault_name") != null && !jsonObj.get("non_sys_azure_vault_name").isJsonNull()) && !jsonObj.get("non_sys_azure_vault_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_azure_vault_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_azure_vault_name").toString()));
      }
      if ((jsonObj.get("non_sys_azure_vault_username_key") != null && !jsonObj.get("non_sys_azure_vault_username_key").isJsonNull()) && !jsonObj.get("non_sys_azure_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_azure_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_azure_vault_username_key").toString()));
      }
      if ((jsonObj.get("non_sys_azure_vault_secret_key") != null && !jsonObj.get("non_sys_azure_vault_secret_key").isJsonNull()) && !jsonObj.get("non_sys_azure_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_azure_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_azure_vault_secret_key").toString()));
      }
      if ((jsonObj.get("non_sys_cyberark_vault_query_string") != null && !jsonObj.get("non_sys_cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("non_sys_cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `non_sys_cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("non_sys_cyberark_vault_query_string").toString()));
      }
      if ((jsonObj.get("fallback_username") != null && !jsonObj.get("fallback_username").isJsonNull()) && !jsonObj.get("fallback_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_username").toString()));
      }
      if ((jsonObj.get("fallback_password") != null && !jsonObj.get("fallback_password").isJsonNull()) && !jsonObj.get("fallback_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_password").toString()));
      }
      if ((jsonObj.get("fallback_vault_username") != null && !jsonObj.get("fallback_vault_username").isJsonNull()) && !jsonObj.get("fallback_vault_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_vault_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_vault_username").toString()));
      }
      if ((jsonObj.get("fallback_vault") != null && !jsonObj.get("fallback_vault").isJsonNull()) && !jsonObj.get("fallback_vault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_vault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_vault").toString()));
      }
      if ((jsonObj.get("fallback_hashicorp_vault_engine") != null && !jsonObj.get("fallback_hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("fallback_hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("fallback_hashicorp_vault_secret_path") != null && !jsonObj.get("fallback_hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("fallback_hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("fallback_hashicorp_vault_username_key") != null && !jsonObj.get("fallback_hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("fallback_hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("fallback_hashicorp_vault_secret_key") != null && !jsonObj.get("fallback_hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("fallback_hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("fallback_azure_vault_name") != null && !jsonObj.get("fallback_azure_vault_name").isJsonNull()) && !jsonObj.get("fallback_azure_vault_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_azure_vault_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_azure_vault_name").toString()));
      }
      if ((jsonObj.get("fallback_azure_vault_username_key") != null && !jsonObj.get("fallback_azure_vault_username_key").isJsonNull()) && !jsonObj.get("fallback_azure_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_azure_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_azure_vault_username_key").toString()));
      }
      if ((jsonObj.get("fallback_azure_vault_secret_key") != null && !jsonObj.get("fallback_azure_vault_secret_key").isJsonNull()) && !jsonObj.get("fallback_azure_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_azure_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_azure_vault_secret_key").toString()));
      }
      if ((jsonObj.get("fallback_cyberark_vault_query_string") != null && !jsonObj.get("fallback_cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("fallback_cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback_cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback_cyberark_vault_query_string").toString()));
      }
      if (jsonObj.get("ops_pre_log_sync") != null && !jsonObj.get("ops_pre_log_sync").isJsonNull()) {
        JsonArray jsonArrayopsPreLogSync = jsonObj.getAsJsonArray("ops_pre_log_sync");
        if (jsonArrayopsPreLogSync != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ops_pre_log_sync").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ops_pre_log_sync` to be an array in the JSON string but got `%s`", jsonObj.get("ops_pre_log_sync").toString()));
          }

          // validate the optional field `ops_pre_log_sync` (array)
          for (int i = 0; i < jsonArrayopsPreLogSync.size(); i++) {
            SourceOperation.validateJsonElement(jsonArrayopsPreLogSync.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OracleDSourceLinkSourceParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OracleDSourceLinkSourceParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OracleDSourceLinkSourceParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OracleDSourceLinkSourceParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<OracleDSourceLinkSourceParameters>() {
           @Override
           public void write(JsonWriter out, OracleDSourceLinkSourceParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OracleDSourceLinkSourceParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OracleDSourceLinkSourceParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OracleDSourceLinkSourceParameters
  * @throws IOException if the JSON string is invalid with respect to OracleDSourceLinkSourceParameters
  */
  public static OracleDSourceLinkSourceParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OracleDSourceLinkSourceParameters.class);
  }

 /**
  * Convert an instance of OracleDSourceLinkSourceParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

