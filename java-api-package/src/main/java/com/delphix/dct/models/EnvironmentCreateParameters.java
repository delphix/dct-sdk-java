/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import java.util.Objects;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.delphix.dct.JSON;

/**
 * EnvironmentCreateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-03T12:02:33.321319+05:30[Asia/Kolkata]", comments = "Generator version: 7.4.0")
public class EnvironmentCreateParameters {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENGINE_ID = "engine_id";
  @SerializedName(SERIALIZED_NAME_ENGINE_ID)
  private String engineId;

  /**
   * Operating system type of the environment.
   */
  @JsonAdapter(OsNameEnum.Adapter.class)
  public enum OsNameEnum {
    UNIX("UNIX"),
    
    WINDOWS("WINDOWS");

    private String value;

    OsNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsNameEnum fromValue(String value) {
      for (OsNameEnum b : OsNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_NAME = "os_name";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private OsNameEnum osName;

  public static final String SERIALIZED_NAME_IS_CLUSTER = "is_cluster";
  @SerializedName(SERIALIZED_NAME_IS_CLUSTER)
  private Boolean isCluster = false;

  public static final String SERIALIZED_NAME_CLUSTER_HOME = "cluster_home";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HOME)
  private String clusterHome;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_STAGING_ENVIRONMENT = "staging_environment";
  @SerializedName(SERIALIZED_NAME_STAGING_ENVIRONMENT)
  private String stagingEnvironment;

  public static final String SERIALIZED_NAME_CONNECTOR_PORT = "connector_port";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_PORT)
  private Integer connectorPort;

  public static final String SERIALIZED_NAME_CONNECTOR_AUTHENTICATION_KEY = "connector_authentication_key";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_AUTHENTICATION_KEY)
  private String connectorAuthenticationKey;

  public static final String SERIALIZED_NAME_IS_TARGET = "is_target";
  @SerializedName(SERIALIZED_NAME_IS_TARGET)
  private Boolean isTarget;

  public static final String SERIALIZED_NAME_SSH_PORT = "ssh_port";
  @SerializedName(SERIALIZED_NAME_SSH_PORT)
  private Long sshPort = 22l;

  public static final String SERIALIZED_NAME_TOOLKIT_PATH = "toolkit_path";
  @SerializedName(SERIALIZED_NAME_TOOLKIT_PATH)
  private String toolkitPath;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_VAULT = "vault";
  @SerializedName(SERIALIZED_NAME_VAULT)
  private String vault;

  public static final String SERIALIZED_NAME_VAULT_USERNAME = "vault_username";
  @SerializedName(SERIALIZED_NAME_VAULT_USERNAME)
  private String vaultUsername;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_ENGINE = "hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_ENGINE)
  private String hashicorpVaultEngine;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_SECRET_PATH = "hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_SECRET_PATH)
  private String hashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_KEY = "hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_USERNAME_KEY)
  private String hashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_HASHICORP_VAULT_SECRET_KEY = "hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_HASHICORP_VAULT_SECRET_KEY)
  private String hashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_CYBERARK_VAULT_QUERY_STRING = "cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_CYBERARK_VAULT_QUERY_STRING)
  private String cyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_USE_KERBEROS_AUTHENTICATION = "use_kerberos_authentication";
  @SerializedName(SERIALIZED_NAME_USE_KERBEROS_AUTHENTICATION)
  private Boolean useKerberosAuthentication;

  public static final String SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY = "use_engine_public_key";
  @SerializedName(SERIALIZED_NAME_USE_ENGINE_PUBLIC_KEY)
  private Boolean useEnginePublicKey;

  public static final String SERIALIZED_NAME_NFS_ADDRESSES = "nfs_addresses";
  @SerializedName(SERIALIZED_NAME_NFS_ADDRESSES)
  private List<String> nfsAddresses;

  public static final String SERIALIZED_NAME_ASE_DB_VAULT_USERNAME = "ase_db_vault_username";
  @SerializedName(SERIALIZED_NAME_ASE_DB_VAULT_USERNAME)
  private String aseDbVaultUsername;

  public static final String SERIALIZED_NAME_ASE_DB_USERNAME = "ase_db_username";
  @SerializedName(SERIALIZED_NAME_ASE_DB_USERNAME)
  private String aseDbUsername;

  public static final String SERIALIZED_NAME_ASE_DB_PASSWORD = "ase_db_password";
  @SerializedName(SERIALIZED_NAME_ASE_DB_PASSWORD)
  private String aseDbPassword;

  public static final String SERIALIZED_NAME_ASE_DB_VAULT = "ase_db_vault";
  @SerializedName(SERIALIZED_NAME_ASE_DB_VAULT)
  private String aseDbVault;

  public static final String SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_ENGINE = "ase_db_hashicorp_vault_engine";
  @SerializedName(SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_ENGINE)
  private String aseDbHashicorpVaultEngine;

  public static final String SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_SECRET_PATH = "ase_db_hashicorp_vault_secret_path";
  @SerializedName(SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_SECRET_PATH)
  private String aseDbHashicorpVaultSecretPath;

  public static final String SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_USERNAME_KEY = "ase_db_hashicorp_vault_username_key";
  @SerializedName(SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_USERNAME_KEY)
  private String aseDbHashicorpVaultUsernameKey;

  public static final String SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_SECRET_KEY = "ase_db_hashicorp_vault_secret_key";
  @SerializedName(SERIALIZED_NAME_ASE_DB_HASHICORP_VAULT_SECRET_KEY)
  private String aseDbHashicorpVaultSecretKey;

  public static final String SERIALIZED_NAME_ASE_DB_CYBERARK_VAULT_QUERY_STRING = "ase_db_cyberark_vault_query_string";
  @SerializedName(SERIALIZED_NAME_ASE_DB_CYBERARK_VAULT_QUERY_STRING)
  private String aseDbCyberarkVaultQueryString;

  public static final String SERIALIZED_NAME_ASE_DB_USE_KERBEROS_AUTHENTICATION = "ase_db_use_kerberos_authentication";
  @SerializedName(SERIALIZED_NAME_ASE_DB_USE_KERBEROS_AUTHENTICATION)
  private Boolean aseDbUseKerberosAuthentication;

  public static final String SERIALIZED_NAME_JAVA_HOME = "java_home";
  @SerializedName(SERIALIZED_NAME_JAVA_HOME)
  private String javaHome;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_PATH = "dsp_keystore_path";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_PATH)
  private String dspKeystorePath;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_PASSWORD = "dsp_keystore_password";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_PASSWORD)
  private String dspKeystorePassword;

  public static final String SERIALIZED_NAME_DSP_KEYSTORE_ALIAS = "dsp_keystore_alias";
  @SerializedName(SERIALIZED_NAME_DSP_KEYSTORE_ALIAS)
  private String dspKeystoreAlias;

  public static final String SERIALIZED_NAME_DSP_TRUSTSTORE_PATH = "dsp_truststore_path";
  @SerializedName(SERIALIZED_NAME_DSP_TRUSTSTORE_PATH)
  private String dspTruststorePath;

  public static final String SERIALIZED_NAME_DSP_TRUSTSTORE_PASSWORD = "dsp_truststore_password";
  @SerializedName(SERIALIZED_NAME_DSP_TRUSTSTORE_PASSWORD)
  private String dspTruststorePassword;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER = "make_current_account_owner";
  @SerializedName(SERIALIZED_NAME_MAKE_CURRENT_ACCOUNT_OWNER)
  private Boolean makeCurrentAccountOwner = true;

  public EnvironmentCreateParameters() {
  }

  public EnvironmentCreateParameters name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the environment.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EnvironmentCreateParameters engineId(String engineId) {
    this.engineId = engineId;
    return this;
  }

   /**
   * The ID of the Engine onto which to create the environment.
   * @return engineId
  **/
  @javax.annotation.Nonnull
  public String getEngineId() {
    return engineId;
  }

  public void setEngineId(String engineId) {
    this.engineId = engineId;
  }


  public EnvironmentCreateParameters osName(OsNameEnum osName) {
    this.osName = osName;
    return this;
  }

   /**
   * Operating system type of the environment.
   * @return osName
  **/
  @javax.annotation.Nonnull
  public OsNameEnum getOsName() {
    return osName;
  }

  public void setOsName(OsNameEnum osName) {
    this.osName = osName;
  }


  public EnvironmentCreateParameters isCluster(Boolean isCluster) {
    this.isCluster = isCluster;
    return this;
  }

   /**
   * Whether the environment to be created is a cluster.
   * @return isCluster
  **/
  @javax.annotation.Nullable
  public Boolean getIsCluster() {
    return isCluster;
  }

  public void setIsCluster(Boolean isCluster) {
    this.isCluster = isCluster;
  }


  public EnvironmentCreateParameters clusterHome(String clusterHome) {
    this.clusterHome = clusterHome;
    return this;
  }

   /**
   * Absolute path to cluster home drectory. This parameter is mandatory for UNIX cluster environments.
   * @return clusterHome
  **/
  @javax.annotation.Nullable
  public String getClusterHome() {
    return clusterHome;
  }

  public void setClusterHome(String clusterHome) {
    this.clusterHome = clusterHome;
  }


  public EnvironmentCreateParameters hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * host address of the machine.
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public EnvironmentCreateParameters stagingEnvironment(String stagingEnvironment) {
    this.stagingEnvironment = stagingEnvironment;
    return this;
  }

   /**
   * Id of the connector environment which is used to connect to this source environment. This is mandatory parameter when creating Windows source environments.
   * @return stagingEnvironment
  **/
  @javax.annotation.Nullable
  public String getStagingEnvironment() {
    return stagingEnvironment;
  }

  public void setStagingEnvironment(String stagingEnvironment) {
    this.stagingEnvironment = stagingEnvironment;
  }


  public EnvironmentCreateParameters connectorPort(Integer connectorPort) {
    this.connectorPort = connectorPort;
    return this;
  }

   /**
   * Specify port on which Delphix connector will run. This is mandatory parameter when creating Windows target environments.
   * minimum: 1
   * maximum: 65535
   * @return connectorPort
  **/
  @javax.annotation.Nullable
  public Integer getConnectorPort() {
    return connectorPort;
  }

  public void setConnectorPort(Integer connectorPort) {
    this.connectorPort = connectorPort;
  }


  public EnvironmentCreateParameters connectorAuthenticationKey(String connectorAuthenticationKey) {
    this.connectorAuthenticationKey = connectorAuthenticationKey;
    return this;
  }

   /**
   * Unique per Delphix key used to authenticate with the remote Delphix Connector.
   * @return connectorAuthenticationKey
  **/
  @javax.annotation.Nullable
  public String getConnectorAuthenticationKey() {
    return connectorAuthenticationKey;
  }

  public void setConnectorAuthenticationKey(String connectorAuthenticationKey) {
    this.connectorAuthenticationKey = connectorAuthenticationKey;
  }


  public EnvironmentCreateParameters isTarget(Boolean isTarget) {
    this.isTarget = isTarget;
    return this;
  }

   /**
   * Whether the environment to be created is a target cluster environment. This property is used only when creating Windows cluster environments.
   * @return isTarget
  **/
  @javax.annotation.Nullable
  public Boolean getIsTarget() {
    return isTarget;
  }

  public void setIsTarget(Boolean isTarget) {
    this.isTarget = isTarget;
  }


  public EnvironmentCreateParameters sshPort(Long sshPort) {
    this.sshPort = sshPort;
    return this;
  }

   /**
   * ssh port of the host.
   * minimum: 1
   * maximum: 65535
   * @return sshPort
  **/
  @javax.annotation.Nullable
  public Long getSshPort() {
    return sshPort;
  }

  public void setSshPort(Long sshPort) {
    this.sshPort = sshPort;
  }


  public EnvironmentCreateParameters toolkitPath(String toolkitPath) {
    this.toolkitPath = toolkitPath;
    return this;
  }

   /**
   * The path for the toolkit that resides on the host.
   * @return toolkitPath
  **/
  @javax.annotation.Nullable
  public String getToolkitPath() {
    return toolkitPath;
  }

  public void setToolkitPath(String toolkitPath) {
    this.toolkitPath = toolkitPath;
  }


  public EnvironmentCreateParameters username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username of the OS.
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public EnvironmentCreateParameters password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password of the OS.
   * @return password
  **/
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public EnvironmentCreateParameters vault(String vault) {
    this.vault = vault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the host credentials.
   * @return vault
  **/
  @javax.annotation.Nullable
  public String getVault() {
    return vault;
  }

  public void setVault(String vault) {
    this.vault = vault;
  }


  public EnvironmentCreateParameters vaultUsername(String vaultUsername) {
    this.vaultUsername = vaultUsername;
    return this;
  }

   /**
   * Delphix display name for the vault user
   * @return vaultUsername
  **/
  @javax.annotation.Nullable
  public String getVaultUsername() {
    return vaultUsername;
  }

  public void setVaultUsername(String vaultUsername) {
    this.vaultUsername = vaultUsername;
  }


  public EnvironmentCreateParameters hashicorpVaultEngine(String hashicorpVaultEngine) {
    this.hashicorpVaultEngine = hashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return hashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultEngine() {
    return hashicorpVaultEngine;
  }

  public void setHashicorpVaultEngine(String hashicorpVaultEngine) {
    this.hashicorpVaultEngine = hashicorpVaultEngine;
  }


  public EnvironmentCreateParameters hashicorpVaultSecretPath(String hashicorpVaultSecretPath) {
    this.hashicorpVaultSecretPath = hashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return hashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultSecretPath() {
    return hashicorpVaultSecretPath;
  }

  public void setHashicorpVaultSecretPath(String hashicorpVaultSecretPath) {
    this.hashicorpVaultSecretPath = hashicorpVaultSecretPath;
  }


  public EnvironmentCreateParameters hashicorpVaultUsernameKey(String hashicorpVaultUsernameKey) {
    this.hashicorpVaultUsernameKey = hashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Key for the username in the key-value store.
   * @return hashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultUsernameKey() {
    return hashicorpVaultUsernameKey;
  }

  public void setHashicorpVaultUsernameKey(String hashicorpVaultUsernameKey) {
    this.hashicorpVaultUsernameKey = hashicorpVaultUsernameKey;
  }


  public EnvironmentCreateParameters hashicorpVaultSecretKey(String hashicorpVaultSecretKey) {
    this.hashicorpVaultSecretKey = hashicorpVaultSecretKey;
    return this;
  }

   /**
   * Key for the password in the key-value store.
   * @return hashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getHashicorpVaultSecretKey() {
    return hashicorpVaultSecretKey;
  }

  public void setHashicorpVaultSecretKey(String hashicorpVaultSecretKey) {
    this.hashicorpVaultSecretKey = hashicorpVaultSecretKey;
  }


  public EnvironmentCreateParameters cyberarkVaultQueryString(String cyberarkVaultQueryString) {
    this.cyberarkVaultQueryString = cyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return cyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getCyberarkVaultQueryString() {
    return cyberarkVaultQueryString;
  }

  public void setCyberarkVaultQueryString(String cyberarkVaultQueryString) {
    this.cyberarkVaultQueryString = cyberarkVaultQueryString;
  }


  public EnvironmentCreateParameters useKerberosAuthentication(Boolean useKerberosAuthentication) {
    this.useKerberosAuthentication = useKerberosAuthentication;
    return this;
  }

   /**
   * Whether to use kerberos authentication.
   * @return useKerberosAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getUseKerberosAuthentication() {
    return useKerberosAuthentication;
  }

  public void setUseKerberosAuthentication(Boolean useKerberosAuthentication) {
    this.useKerberosAuthentication = useKerberosAuthentication;
  }


  public EnvironmentCreateParameters useEnginePublicKey(Boolean useEnginePublicKey) {
    this.useEnginePublicKey = useEnginePublicKey;
    return this;
  }

   /**
   * Whether to use public key authentication.
   * @return useEnginePublicKey
  **/
  @javax.annotation.Nullable
  public Boolean getUseEnginePublicKey() {
    return useEnginePublicKey;
  }

  public void setUseEnginePublicKey(Boolean useEnginePublicKey) {
    this.useEnginePublicKey = useEnginePublicKey;
  }


  public EnvironmentCreateParameters nfsAddresses(List<String> nfsAddresses) {
    this.nfsAddresses = nfsAddresses;
    return this;
  }

  public EnvironmentCreateParameters addNfsAddressesItem(String nfsAddressesItem) {
    if (this.nfsAddresses == null) {
      this.nfsAddresses = new ArrayList<>();
    }
    this.nfsAddresses.add(nfsAddressesItem);
    return this;
  }

   /**
   * array of ip address or hostnames
   * @return nfsAddresses
  **/
  @javax.annotation.Nullable
  public List<String> getNfsAddresses() {
    return nfsAddresses;
  }

  public void setNfsAddresses(List<String> nfsAddresses) {
    this.nfsAddresses = nfsAddresses;
  }


  public EnvironmentCreateParameters aseDbVaultUsername(String aseDbVaultUsername) {
    this.aseDbVaultUsername = aseDbVaultUsername;
    return this;
  }

   /**
   * Delphix display name for the vault user
   * @return aseDbVaultUsername
  **/
  @javax.annotation.Nullable
  public String getAseDbVaultUsername() {
    return aseDbVaultUsername;
  }

  public void setAseDbVaultUsername(String aseDbVaultUsername) {
    this.aseDbVaultUsername = aseDbVaultUsername;
  }


  public EnvironmentCreateParameters aseDbUsername(String aseDbUsername) {
    this.aseDbUsername = aseDbUsername;
    return this;
  }

   /**
   * username of the SAP ASE database.
   * @return aseDbUsername
  **/
  @javax.annotation.Nullable
  public String getAseDbUsername() {
    return aseDbUsername;
  }

  public void setAseDbUsername(String aseDbUsername) {
    this.aseDbUsername = aseDbUsername;
  }


  public EnvironmentCreateParameters aseDbPassword(String aseDbPassword) {
    this.aseDbPassword = aseDbPassword;
    return this;
  }

   /**
   * password of the SAP ASE database.
   * @return aseDbPassword
  **/
  @javax.annotation.Nullable
  public String getAseDbPassword() {
    return aseDbPassword;
  }

  public void setAseDbPassword(String aseDbPassword) {
    this.aseDbPassword = aseDbPassword;
  }


  public EnvironmentCreateParameters aseDbVault(String aseDbVault) {
    this.aseDbVault = aseDbVault;
    return this;
  }

   /**
   * The name or reference of the vault from which to read the ASE database credentials.
   * @return aseDbVault
  **/
  @javax.annotation.Nullable
  public String getAseDbVault() {
    return aseDbVault;
  }

  public void setAseDbVault(String aseDbVault) {
    this.aseDbVault = aseDbVault;
  }


  public EnvironmentCreateParameters aseDbHashicorpVaultEngine(String aseDbHashicorpVaultEngine) {
    this.aseDbHashicorpVaultEngine = aseDbHashicorpVaultEngine;
    return this;
  }

   /**
   * Vault engine name where the credential is stored.
   * @return aseDbHashicorpVaultEngine
  **/
  @javax.annotation.Nullable
  public String getAseDbHashicorpVaultEngine() {
    return aseDbHashicorpVaultEngine;
  }

  public void setAseDbHashicorpVaultEngine(String aseDbHashicorpVaultEngine) {
    this.aseDbHashicorpVaultEngine = aseDbHashicorpVaultEngine;
  }


  public EnvironmentCreateParameters aseDbHashicorpVaultSecretPath(String aseDbHashicorpVaultSecretPath) {
    this.aseDbHashicorpVaultSecretPath = aseDbHashicorpVaultSecretPath;
    return this;
  }

   /**
   * Path in the vault engine where the credential is stored.
   * @return aseDbHashicorpVaultSecretPath
  **/
  @javax.annotation.Nullable
  public String getAseDbHashicorpVaultSecretPath() {
    return aseDbHashicorpVaultSecretPath;
  }

  public void setAseDbHashicorpVaultSecretPath(String aseDbHashicorpVaultSecretPath) {
    this.aseDbHashicorpVaultSecretPath = aseDbHashicorpVaultSecretPath;
  }


  public EnvironmentCreateParameters aseDbHashicorpVaultUsernameKey(String aseDbHashicorpVaultUsernameKey) {
    this.aseDbHashicorpVaultUsernameKey = aseDbHashicorpVaultUsernameKey;
    return this;
  }

   /**
   * Key for the username in the key-value store.
   * @return aseDbHashicorpVaultUsernameKey
  **/
  @javax.annotation.Nullable
  public String getAseDbHashicorpVaultUsernameKey() {
    return aseDbHashicorpVaultUsernameKey;
  }

  public void setAseDbHashicorpVaultUsernameKey(String aseDbHashicorpVaultUsernameKey) {
    this.aseDbHashicorpVaultUsernameKey = aseDbHashicorpVaultUsernameKey;
  }


  public EnvironmentCreateParameters aseDbHashicorpVaultSecretKey(String aseDbHashicorpVaultSecretKey) {
    this.aseDbHashicorpVaultSecretKey = aseDbHashicorpVaultSecretKey;
    return this;
  }

   /**
   * Key for the password in the key-value store.
   * @return aseDbHashicorpVaultSecretKey
  **/
  @javax.annotation.Nullable
  public String getAseDbHashicorpVaultSecretKey() {
    return aseDbHashicorpVaultSecretKey;
  }

  public void setAseDbHashicorpVaultSecretKey(String aseDbHashicorpVaultSecretKey) {
    this.aseDbHashicorpVaultSecretKey = aseDbHashicorpVaultSecretKey;
  }


  public EnvironmentCreateParameters aseDbCyberarkVaultQueryString(String aseDbCyberarkVaultQueryString) {
    this.aseDbCyberarkVaultQueryString = aseDbCyberarkVaultQueryString;
    return this;
  }

   /**
   * Query to find a credential in the CyberArk vault.
   * @return aseDbCyberarkVaultQueryString
  **/
  @javax.annotation.Nullable
  public String getAseDbCyberarkVaultQueryString() {
    return aseDbCyberarkVaultQueryString;
  }

  public void setAseDbCyberarkVaultQueryString(String aseDbCyberarkVaultQueryString) {
    this.aseDbCyberarkVaultQueryString = aseDbCyberarkVaultQueryString;
  }


  public EnvironmentCreateParameters aseDbUseKerberosAuthentication(Boolean aseDbUseKerberosAuthentication) {
    this.aseDbUseKerberosAuthentication = aseDbUseKerberosAuthentication;
    return this;
  }

   /**
   * Whether to use kerberos authentication for ASE DB discovery.
   * @return aseDbUseKerberosAuthentication
  **/
  @javax.annotation.Nullable
  public Boolean getAseDbUseKerberosAuthentication() {
    return aseDbUseKerberosAuthentication;
  }

  public void setAseDbUseKerberosAuthentication(Boolean aseDbUseKerberosAuthentication) {
    this.aseDbUseKerberosAuthentication = aseDbUseKerberosAuthentication;
  }


  public EnvironmentCreateParameters javaHome(String javaHome) {
    this.javaHome = javaHome;
    return this;
  }

   /**
   * The path to the user managed Java Development Kit (JDK). If not specified, then the OpenJDK will be used.
   * @return javaHome
  **/
  @javax.annotation.Nullable
  public String getJavaHome() {
    return javaHome;
  }

  public void setJavaHome(String javaHome) {
    this.javaHome = javaHome;
  }


  public EnvironmentCreateParameters dspKeystorePath(String dspKeystorePath) {
    this.dspKeystorePath = dspKeystorePath;
    return this;
  }

   /**
   * DSP keystore path.
   * @return dspKeystorePath
  **/
  @javax.annotation.Nullable
  public String getDspKeystorePath() {
    return dspKeystorePath;
  }

  public void setDspKeystorePath(String dspKeystorePath) {
    this.dspKeystorePath = dspKeystorePath;
  }


  public EnvironmentCreateParameters dspKeystorePassword(String dspKeystorePassword) {
    this.dspKeystorePassword = dspKeystorePassword;
    return this;
  }

   /**
   * DSP keystore password.
   * @return dspKeystorePassword
  **/
  @javax.annotation.Nullable
  public String getDspKeystorePassword() {
    return dspKeystorePassword;
  }

  public void setDspKeystorePassword(String dspKeystorePassword) {
    this.dspKeystorePassword = dspKeystorePassword;
  }


  public EnvironmentCreateParameters dspKeystoreAlias(String dspKeystoreAlias) {
    this.dspKeystoreAlias = dspKeystoreAlias;
    return this;
  }

   /**
   * DSP keystore alias.
   * @return dspKeystoreAlias
  **/
  @javax.annotation.Nullable
  public String getDspKeystoreAlias() {
    return dspKeystoreAlias;
  }

  public void setDspKeystoreAlias(String dspKeystoreAlias) {
    this.dspKeystoreAlias = dspKeystoreAlias;
  }


  public EnvironmentCreateParameters dspTruststorePath(String dspTruststorePath) {
    this.dspTruststorePath = dspTruststorePath;
    return this;
  }

   /**
   * DSP truststore path.
   * @return dspTruststorePath
  **/
  @javax.annotation.Nullable
  public String getDspTruststorePath() {
    return dspTruststorePath;
  }

  public void setDspTruststorePath(String dspTruststorePath) {
    this.dspTruststorePath = dspTruststorePath;
  }


  public EnvironmentCreateParameters dspTruststorePassword(String dspTruststorePassword) {
    this.dspTruststorePassword = dspTruststorePassword;
    return this;
  }

   /**
   * DSP truststore password.
   * @return dspTruststorePassword
  **/
  @javax.annotation.Nullable
  public String getDspTruststorePassword() {
    return dspTruststorePassword;
  }

  public void setDspTruststorePassword(String dspTruststorePassword) {
    this.dspTruststorePassword = dspTruststorePassword;
  }


  public EnvironmentCreateParameters description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The environment description.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EnvironmentCreateParameters tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public EnvironmentCreateParameters addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags to be created for this environment.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public EnvironmentCreateParameters makeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
    return this;
  }

   /**
   * Whether the account creating this environment must be configured as owner of the environment.
   * @return makeCurrentAccountOwner
  **/
  @javax.annotation.Nullable
  public Boolean getMakeCurrentAccountOwner() {
    return makeCurrentAccountOwner;
  }

  public void setMakeCurrentAccountOwner(Boolean makeCurrentAccountOwner) {
    this.makeCurrentAccountOwner = makeCurrentAccountOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvironmentCreateParameters environmentCreateParameters = (EnvironmentCreateParameters) o;
    return Objects.equals(this.name, environmentCreateParameters.name) &&
        Objects.equals(this.engineId, environmentCreateParameters.engineId) &&
        Objects.equals(this.osName, environmentCreateParameters.osName) &&
        Objects.equals(this.isCluster, environmentCreateParameters.isCluster) &&
        Objects.equals(this.clusterHome, environmentCreateParameters.clusterHome) &&
        Objects.equals(this.hostname, environmentCreateParameters.hostname) &&
        Objects.equals(this.stagingEnvironment, environmentCreateParameters.stagingEnvironment) &&
        Objects.equals(this.connectorPort, environmentCreateParameters.connectorPort) &&
        Objects.equals(this.connectorAuthenticationKey, environmentCreateParameters.connectorAuthenticationKey) &&
        Objects.equals(this.isTarget, environmentCreateParameters.isTarget) &&
        Objects.equals(this.sshPort, environmentCreateParameters.sshPort) &&
        Objects.equals(this.toolkitPath, environmentCreateParameters.toolkitPath) &&
        Objects.equals(this.username, environmentCreateParameters.username) &&
        Objects.equals(this.password, environmentCreateParameters.password) &&
        Objects.equals(this.vault, environmentCreateParameters.vault) &&
        Objects.equals(this.vaultUsername, environmentCreateParameters.vaultUsername) &&
        Objects.equals(this.hashicorpVaultEngine, environmentCreateParameters.hashicorpVaultEngine) &&
        Objects.equals(this.hashicorpVaultSecretPath, environmentCreateParameters.hashicorpVaultSecretPath) &&
        Objects.equals(this.hashicorpVaultUsernameKey, environmentCreateParameters.hashicorpVaultUsernameKey) &&
        Objects.equals(this.hashicorpVaultSecretKey, environmentCreateParameters.hashicorpVaultSecretKey) &&
        Objects.equals(this.cyberarkVaultQueryString, environmentCreateParameters.cyberarkVaultQueryString) &&
        Objects.equals(this.useKerberosAuthentication, environmentCreateParameters.useKerberosAuthentication) &&
        Objects.equals(this.useEnginePublicKey, environmentCreateParameters.useEnginePublicKey) &&
        Objects.equals(this.nfsAddresses, environmentCreateParameters.nfsAddresses) &&
        Objects.equals(this.aseDbVaultUsername, environmentCreateParameters.aseDbVaultUsername) &&
        Objects.equals(this.aseDbUsername, environmentCreateParameters.aseDbUsername) &&
        Objects.equals(this.aseDbPassword, environmentCreateParameters.aseDbPassword) &&
        Objects.equals(this.aseDbVault, environmentCreateParameters.aseDbVault) &&
        Objects.equals(this.aseDbHashicorpVaultEngine, environmentCreateParameters.aseDbHashicorpVaultEngine) &&
        Objects.equals(this.aseDbHashicorpVaultSecretPath, environmentCreateParameters.aseDbHashicorpVaultSecretPath) &&
        Objects.equals(this.aseDbHashicorpVaultUsernameKey, environmentCreateParameters.aseDbHashicorpVaultUsernameKey) &&
        Objects.equals(this.aseDbHashicorpVaultSecretKey, environmentCreateParameters.aseDbHashicorpVaultSecretKey) &&
        Objects.equals(this.aseDbCyberarkVaultQueryString, environmentCreateParameters.aseDbCyberarkVaultQueryString) &&
        Objects.equals(this.aseDbUseKerberosAuthentication, environmentCreateParameters.aseDbUseKerberosAuthentication) &&
        Objects.equals(this.javaHome, environmentCreateParameters.javaHome) &&
        Objects.equals(this.dspKeystorePath, environmentCreateParameters.dspKeystorePath) &&
        Objects.equals(this.dspKeystorePassword, environmentCreateParameters.dspKeystorePassword) &&
        Objects.equals(this.dspKeystoreAlias, environmentCreateParameters.dspKeystoreAlias) &&
        Objects.equals(this.dspTruststorePath, environmentCreateParameters.dspTruststorePath) &&
        Objects.equals(this.dspTruststorePassword, environmentCreateParameters.dspTruststorePassword) &&
        Objects.equals(this.description, environmentCreateParameters.description) &&
        Objects.equals(this.tags, environmentCreateParameters.tags) &&
        Objects.equals(this.makeCurrentAccountOwner, environmentCreateParameters.makeCurrentAccountOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, engineId, osName, isCluster, clusterHome, hostname, stagingEnvironment, connectorPort, connectorAuthenticationKey, isTarget, sshPort, toolkitPath, username, password, vault, vaultUsername, hashicorpVaultEngine, hashicorpVaultSecretPath, hashicorpVaultUsernameKey, hashicorpVaultSecretKey, cyberarkVaultQueryString, useKerberosAuthentication, useEnginePublicKey, nfsAddresses, aseDbVaultUsername, aseDbUsername, aseDbPassword, aseDbVault, aseDbHashicorpVaultEngine, aseDbHashicorpVaultSecretPath, aseDbHashicorpVaultUsernameKey, aseDbHashicorpVaultSecretKey, aseDbCyberarkVaultQueryString, aseDbUseKerberosAuthentication, javaHome, dspKeystorePath, dspKeystorePassword, dspKeystoreAlias, dspTruststorePath, dspTruststorePassword, description, tags, makeCurrentAccountOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvironmentCreateParameters {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    engineId: ").append(toIndentedString(engineId)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    isCluster: ").append(toIndentedString(isCluster)).append("\n");
    sb.append("    clusterHome: ").append(toIndentedString(clusterHome)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    stagingEnvironment: ").append(toIndentedString(stagingEnvironment)).append("\n");
    sb.append("    connectorPort: ").append(toIndentedString(connectorPort)).append("\n");
    sb.append("    connectorAuthenticationKey: ").append(toIndentedString(connectorAuthenticationKey)).append("\n");
    sb.append("    isTarget: ").append(toIndentedString(isTarget)).append("\n");
    sb.append("    sshPort: ").append(toIndentedString(sshPort)).append("\n");
    sb.append("    toolkitPath: ").append(toIndentedString(toolkitPath)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    vault: ").append(toIndentedString(vault)).append("\n");
    sb.append("    vaultUsername: ").append(toIndentedString(vaultUsername)).append("\n");
    sb.append("    hashicorpVaultEngine: ").append(toIndentedString(hashicorpVaultEngine)).append("\n");
    sb.append("    hashicorpVaultSecretPath: ").append(toIndentedString(hashicorpVaultSecretPath)).append("\n");
    sb.append("    hashicorpVaultUsernameKey: ").append(toIndentedString(hashicorpVaultUsernameKey)).append("\n");
    sb.append("    hashicorpVaultSecretKey: ").append(toIndentedString(hashicorpVaultSecretKey)).append("\n");
    sb.append("    cyberarkVaultQueryString: ").append(toIndentedString(cyberarkVaultQueryString)).append("\n");
    sb.append("    useKerberosAuthentication: ").append(toIndentedString(useKerberosAuthentication)).append("\n");
    sb.append("    useEnginePublicKey: ").append(toIndentedString(useEnginePublicKey)).append("\n");
    sb.append("    nfsAddresses: ").append(toIndentedString(nfsAddresses)).append("\n");
    sb.append("    aseDbVaultUsername: ").append(toIndentedString(aseDbVaultUsername)).append("\n");
    sb.append("    aseDbUsername: ").append(toIndentedString(aseDbUsername)).append("\n");
    sb.append("    aseDbPassword: ").append(toIndentedString(aseDbPassword)).append("\n");
    sb.append("    aseDbVault: ").append(toIndentedString(aseDbVault)).append("\n");
    sb.append("    aseDbHashicorpVaultEngine: ").append(toIndentedString(aseDbHashicorpVaultEngine)).append("\n");
    sb.append("    aseDbHashicorpVaultSecretPath: ").append(toIndentedString(aseDbHashicorpVaultSecretPath)).append("\n");
    sb.append("    aseDbHashicorpVaultUsernameKey: ").append(toIndentedString(aseDbHashicorpVaultUsernameKey)).append("\n");
    sb.append("    aseDbHashicorpVaultSecretKey: ").append(toIndentedString(aseDbHashicorpVaultSecretKey)).append("\n");
    sb.append("    aseDbCyberarkVaultQueryString: ").append(toIndentedString(aseDbCyberarkVaultQueryString)).append("\n");
    sb.append("    aseDbUseKerberosAuthentication: ").append(toIndentedString(aseDbUseKerberosAuthentication)).append("\n");
    sb.append("    javaHome: ").append(toIndentedString(javaHome)).append("\n");
    sb.append("    dspKeystorePath: ").append(toIndentedString(dspKeystorePath)).append("\n");
    sb.append("    dspKeystorePassword: ").append(toIndentedString(dspKeystorePassword)).append("\n");
    sb.append("    dspKeystoreAlias: ").append(toIndentedString(dspKeystoreAlias)).append("\n");
    sb.append("    dspTruststorePath: ").append(toIndentedString(dspTruststorePath)).append("\n");
    sb.append("    dspTruststorePassword: ").append(toIndentedString(dspTruststorePassword)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    makeCurrentAccountOwner: ").append(toIndentedString(makeCurrentAccountOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("engine_id");
    openapiFields.add("os_name");
    openapiFields.add("is_cluster");
    openapiFields.add("cluster_home");
    openapiFields.add("hostname");
    openapiFields.add("staging_environment");
    openapiFields.add("connector_port");
    openapiFields.add("connector_authentication_key");
    openapiFields.add("is_target");
    openapiFields.add("ssh_port");
    openapiFields.add("toolkit_path");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("vault");
    openapiFields.add("vault_username");
    openapiFields.add("hashicorp_vault_engine");
    openapiFields.add("hashicorp_vault_secret_path");
    openapiFields.add("hashicorp_vault_username_key");
    openapiFields.add("hashicorp_vault_secret_key");
    openapiFields.add("cyberark_vault_query_string");
    openapiFields.add("use_kerberos_authentication");
    openapiFields.add("use_engine_public_key");
    openapiFields.add("nfs_addresses");
    openapiFields.add("ase_db_vault_username");
    openapiFields.add("ase_db_username");
    openapiFields.add("ase_db_password");
    openapiFields.add("ase_db_vault");
    openapiFields.add("ase_db_hashicorp_vault_engine");
    openapiFields.add("ase_db_hashicorp_vault_secret_path");
    openapiFields.add("ase_db_hashicorp_vault_username_key");
    openapiFields.add("ase_db_hashicorp_vault_secret_key");
    openapiFields.add("ase_db_cyberark_vault_query_string");
    openapiFields.add("ase_db_use_kerberos_authentication");
    openapiFields.add("java_home");
    openapiFields.add("dsp_keystore_path");
    openapiFields.add("dsp_keystore_password");
    openapiFields.add("dsp_keystore_alias");
    openapiFields.add("dsp_truststore_path");
    openapiFields.add("dsp_truststore_password");
    openapiFields.add("description");
    openapiFields.add("tags");
    openapiFields.add("make_current_account_owner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engine_id");
    openapiRequiredFields.add("os_name");
    openapiRequiredFields.add("hostname");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnvironmentCreateParameters
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvironmentCreateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvironmentCreateParameters is not found in the empty JSON string", EnvironmentCreateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvironmentCreateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvironmentCreateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnvironmentCreateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("engine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engine_id").toString()));
      }
      if (!jsonObj.get("os_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_name").toString()));
      }
      // validate the required field `os_name`
      OsNameEnum.validateJsonElement(jsonObj.get("os_name"));
      if ((jsonObj.get("cluster_home") != null && !jsonObj.get("cluster_home").isJsonNull()) && !jsonObj.get("cluster_home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_home").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("staging_environment") != null && !jsonObj.get("staging_environment").isJsonNull()) && !jsonObj.get("staging_environment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staging_environment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staging_environment").toString()));
      }
      if ((jsonObj.get("connector_authentication_key") != null && !jsonObj.get("connector_authentication_key").isJsonNull()) && !jsonObj.get("connector_authentication_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connector_authentication_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connector_authentication_key").toString()));
      }
      if ((jsonObj.get("toolkit_path") != null && !jsonObj.get("toolkit_path").isJsonNull()) && !jsonObj.get("toolkit_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toolkit_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toolkit_path").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("vault") != null && !jsonObj.get("vault").isJsonNull()) && !jsonObj.get("vault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault").toString()));
      }
      if ((jsonObj.get("vault_username") != null && !jsonObj.get("vault_username").isJsonNull()) && !jsonObj.get("vault_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault_username").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_engine") != null && !jsonObj.get("hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_secret_path") != null && !jsonObj.get("hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_username_key") != null && !jsonObj.get("hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("hashicorp_vault_secret_key") != null && !jsonObj.get("hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("cyberark_vault_query_string") != null && !jsonObj.get("cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cyberark_vault_query_string").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nfs_addresses") != null && !jsonObj.get("nfs_addresses").isJsonNull() && !jsonObj.get("nfs_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfs_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("nfs_addresses").toString()));
      }
      if ((jsonObj.get("ase_db_vault_username") != null && !jsonObj.get("ase_db_vault_username").isJsonNull()) && !jsonObj.get("ase_db_vault_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_vault_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_vault_username").toString()));
      }
      if ((jsonObj.get("ase_db_username") != null && !jsonObj.get("ase_db_username").isJsonNull()) && !jsonObj.get("ase_db_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_username").toString()));
      }
      if ((jsonObj.get("ase_db_password") != null && !jsonObj.get("ase_db_password").isJsonNull()) && !jsonObj.get("ase_db_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_password").toString()));
      }
      if ((jsonObj.get("ase_db_vault") != null && !jsonObj.get("ase_db_vault").isJsonNull()) && !jsonObj.get("ase_db_vault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_vault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_vault").toString()));
      }
      if ((jsonObj.get("ase_db_hashicorp_vault_engine") != null && !jsonObj.get("ase_db_hashicorp_vault_engine").isJsonNull()) && !jsonObj.get("ase_db_hashicorp_vault_engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_hashicorp_vault_engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_hashicorp_vault_engine").toString()));
      }
      if ((jsonObj.get("ase_db_hashicorp_vault_secret_path") != null && !jsonObj.get("ase_db_hashicorp_vault_secret_path").isJsonNull()) && !jsonObj.get("ase_db_hashicorp_vault_secret_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_hashicorp_vault_secret_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_hashicorp_vault_secret_path").toString()));
      }
      if ((jsonObj.get("ase_db_hashicorp_vault_username_key") != null && !jsonObj.get("ase_db_hashicorp_vault_username_key").isJsonNull()) && !jsonObj.get("ase_db_hashicorp_vault_username_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_hashicorp_vault_username_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_hashicorp_vault_username_key").toString()));
      }
      if ((jsonObj.get("ase_db_hashicorp_vault_secret_key") != null && !jsonObj.get("ase_db_hashicorp_vault_secret_key").isJsonNull()) && !jsonObj.get("ase_db_hashicorp_vault_secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_hashicorp_vault_secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_hashicorp_vault_secret_key").toString()));
      }
      if ((jsonObj.get("ase_db_cyberark_vault_query_string") != null && !jsonObj.get("ase_db_cyberark_vault_query_string").isJsonNull()) && !jsonObj.get("ase_db_cyberark_vault_query_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ase_db_cyberark_vault_query_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ase_db_cyberark_vault_query_string").toString()));
      }
      if ((jsonObj.get("java_home") != null && !jsonObj.get("java_home").isJsonNull()) && !jsonObj.get("java_home").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `java_home` to be a primitive type in the JSON string but got `%s`", jsonObj.get("java_home").toString()));
      }
      if ((jsonObj.get("dsp_keystore_path") != null && !jsonObj.get("dsp_keystore_path").isJsonNull()) && !jsonObj.get("dsp_keystore_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_keystore_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_keystore_path").toString()));
      }
      if ((jsonObj.get("dsp_keystore_password") != null && !jsonObj.get("dsp_keystore_password").isJsonNull()) && !jsonObj.get("dsp_keystore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_keystore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_keystore_password").toString()));
      }
      if ((jsonObj.get("dsp_keystore_alias") != null && !jsonObj.get("dsp_keystore_alias").isJsonNull()) && !jsonObj.get("dsp_keystore_alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_keystore_alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_keystore_alias").toString()));
      }
      if ((jsonObj.get("dsp_truststore_path") != null && !jsonObj.get("dsp_truststore_path").isJsonNull()) && !jsonObj.get("dsp_truststore_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_truststore_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_truststore_path").toString()));
      }
      if ((jsonObj.get("dsp_truststore_password") != null && !jsonObj.get("dsp_truststore_password").isJsonNull()) && !jsonObj.get("dsp_truststore_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsp_truststore_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsp_truststore_password").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvironmentCreateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvironmentCreateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvironmentCreateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvironmentCreateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvironmentCreateParameters>() {
           @Override
           public void write(JsonWriter out, EnvironmentCreateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvironmentCreateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnvironmentCreateParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnvironmentCreateParameters
  * @throws IOException if the JSON string is invalid with respect to EnvironmentCreateParameters
  */
  public static EnvironmentCreateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvironmentCreateParameters.class);
  }

 /**
  * Convert an instance of EnvironmentCreateParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

