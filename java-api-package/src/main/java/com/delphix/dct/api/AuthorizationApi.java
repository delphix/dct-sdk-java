/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiCallback;
import com.delphix.dct.ApiClient;
import com.delphix.dct.ApiException;
import com.delphix.dct.ApiResponse;
import com.delphix.dct.Configuration;
import com.delphix.dct.Pair;
import com.delphix.dct.ProgressRequestBody;
import com.delphix.dct.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.delphix.dct.models.AccessGroup;
import com.delphix.dct.models.AccessGroupAccountIdsRequest;
import com.delphix.dct.models.AccessGroupScope;
import com.delphix.dct.models.AccessGroupScopesRequest;
import com.delphix.dct.models.AccessGroupUpdateParameters;
import com.delphix.dct.models.AllObjectPermissionsResponse;
import com.delphix.dct.models.AlwaysAllowedPermissionRequest;
import com.delphix.dct.models.CreateRole;
import com.delphix.dct.models.DeleteScopeObjectTags;
import com.delphix.dct.models.DeleteScopedObjectItem;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListAccessGroupsResponse;
import com.delphix.dct.models.ListRolesResponse;
import com.delphix.dct.models.ObjectPermissionsResponse;
import com.delphix.dct.models.PermissionsRequest;
import com.delphix.dct.models.Role;
import com.delphix.dct.models.RoleUpdateParameters;
import com.delphix.dct.models.ScopeTagsRequest;
import com.delphix.dct.models.ScopeTagsResponse;
import com.delphix.dct.models.ScopedObjectItemsResponse;
import com.delphix.dct.models.ScopedObjectsRequest;
import com.delphix.dct.models.SearchAccessGroupsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchRolesResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateAccessGroupScope;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAccessGroupAccountIds
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupAccountIdsRequest Account ids to add to the Access group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupAccountIdsCall(String accessGroupId, AccessGroupAccountIdsRequest accessGroupAccountIdsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessGroupAccountIdsRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/account-ids"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccessGroupAccountIdsValidateBeforeCall(String accessGroupId, AccessGroupAccountIdsRequest accessGroupAccountIdsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addAccessGroupAccountIds(Async)");
        }

        // verify the required parameter 'accessGroupAccountIdsRequest' is set
        if (accessGroupAccountIdsRequest == null) {
            throw new ApiException("Missing the required parameter 'accessGroupAccountIdsRequest' when calling addAccessGroupAccountIds(Async)");
        }

        return addAccessGroupAccountIdsCall(accessGroupId, accessGroupAccountIdsRequest, _callback);

    }

    /**
     * Add account ids to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupAccountIdsRequest Account ids to add to the Access group. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup addAccessGroupAccountIds(String accessGroupId, AccessGroupAccountIdsRequest accessGroupAccountIdsRequest) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = addAccessGroupAccountIdsWithHttpInfo(accessGroupId, accessGroupAccountIdsRequest);
        return localVarResp.getData();
    }

    /**
     * Add account ids to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupAccountIdsRequest Account ids to add to the Access group. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> addAccessGroupAccountIdsWithHttpInfo(String accessGroupId, AccessGroupAccountIdsRequest accessGroupAccountIdsRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccessGroupAccountIdsValidateBeforeCall(accessGroupId, accessGroupAccountIdsRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add account ids to an Access group (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupAccountIdsRequest Account ids to add to the Access group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupAccountIdsAsync(String accessGroupId, AccessGroupAccountIdsRequest accessGroupAccountIdsRequest, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccessGroupAccountIdsValidateBeforeCall(accessGroupId, accessGroupAccountIdsRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccessGroupAccountTags
     * @param accessGroupId The ID of the Access group. (required)
     * @param tagsRequest Account Tags to add to the Access group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupAccountTagsCall(String accessGroupId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/tags"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccessGroupAccountTagsValidateBeforeCall(String accessGroupId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addAccessGroupAccountTags(Async)");
        }

        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling addAccessGroupAccountTags(Async)");
        }

        return addAccessGroupAccountTagsCall(accessGroupId, tagsRequest, _callback);

    }

    /**
     * Add account tags to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param tagsRequest Account Tags to add to the Access group. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup addAccessGroupAccountTags(String accessGroupId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = addAccessGroupAccountTagsWithHttpInfo(accessGroupId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Add account tags to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param tagsRequest Account Tags to add to the Access group. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> addAccessGroupAccountTagsWithHttpInfo(String accessGroupId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccessGroupAccountTagsValidateBeforeCall(accessGroupId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add account tags to an Access group (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param tagsRequest Account Tags to add to the Access group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupAccountTagsAsync(String accessGroupId, TagsRequest tagsRequest, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccessGroupAccountTagsValidateBeforeCall(accessGroupId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccessGroupScopes
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupScopesRequest Scopes to add to the Access group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupScopesCall(String accessGroupId, AccessGroupScopesRequest accessGroupScopesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessGroupScopesRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccessGroupScopesValidateBeforeCall(String accessGroupId, AccessGroupScopesRequest accessGroupScopesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addAccessGroupScopes(Async)");
        }

        // verify the required parameter 'accessGroupScopesRequest' is set
        if (accessGroupScopesRequest == null) {
            throw new ApiException("Missing the required parameter 'accessGroupScopesRequest' when calling addAccessGroupScopes(Async)");
        }

        return addAccessGroupScopesCall(accessGroupId, accessGroupScopesRequest, _callback);

    }

    /**
     * Add scopes to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupScopesRequest Scopes to add to the Access group. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup addAccessGroupScopes(String accessGroupId, AccessGroupScopesRequest accessGroupScopesRequest) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = addAccessGroupScopesWithHttpInfo(accessGroupId, accessGroupScopesRequest);
        return localVarResp.getData();
    }

    /**
     * Add scopes to an Access group
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupScopesRequest Scopes to add to the Access group. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> addAccessGroupScopesWithHttpInfo(String accessGroupId, AccessGroupScopesRequest accessGroupScopesRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccessGroupScopesValidateBeforeCall(accessGroupId, accessGroupScopesRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add scopes to an Access group (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupScopesRequest Scopes to add to the Access group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessGroupScopesAsync(String accessGroupId, AccessGroupScopesRequest accessGroupScopesRequest, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccessGroupScopesValidateBeforeCall(accessGroupId, accessGroupScopesRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAlwaysAllowedPermissions
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Add always allowed permissions for given object type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAlwaysAllowedPermissionsCall(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alwaysAllowedPermissionRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAlwaysAllowedPermissionsValidateBeforeCall(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addAlwaysAllowedPermissions(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling addAlwaysAllowedPermissions(Async)");
        }

        // verify the required parameter 'alwaysAllowedPermissionRequest' is set
        if (alwaysAllowedPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'alwaysAllowedPermissionRequest' when calling addAlwaysAllowedPermissions(Async)");
        }

        return addAlwaysAllowedPermissionsCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, _callback);

    }

    /**
     * Add always allowed permissions for given object type.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Add always allowed permissions for given object type. (required)
     * @return AccessGroupScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupScope addAlwaysAllowedPermissions(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest) throws ApiException {
        ApiResponse<AccessGroupScope> localVarResp = addAlwaysAllowedPermissionsWithHttpInfo(accessGroupId, scopeId, alwaysAllowedPermissionRequest);
        return localVarResp.getData();
    }

    /**
     * Add always allowed permissions for given object type.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Add always allowed permissions for given object type. (required)
     * @return ApiResponse&lt;AccessGroupScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupScope> addAlwaysAllowedPermissionsWithHttpInfo(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = addAlwaysAllowedPermissionsValidateBeforeCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add always allowed permissions for given object type. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Add always allowed permissions for given object type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAlwaysAllowedPermissionsAsync(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback<AccessGroupScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAlwaysAllowedPermissionsValidateBeforeCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addObjectsToAccessGroupScope
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopedObjectsRequest Add objects to the access group scope. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addObjectsToAccessGroupScopeCall(String accessGroupId, String scopeId, ScopedObjectsRequest scopedObjectsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopedObjectsRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/objects"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addObjectsToAccessGroupScopeValidateBeforeCall(String accessGroupId, String scopeId, ScopedObjectsRequest scopedObjectsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addObjectsToAccessGroupScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling addObjectsToAccessGroupScope(Async)");
        }

        // verify the required parameter 'scopedObjectsRequest' is set
        if (scopedObjectsRequest == null) {
            throw new ApiException("Missing the required parameter 'scopedObjectsRequest' when calling addObjectsToAccessGroupScope(Async)");
        }

        return addObjectsToAccessGroupScopeCall(accessGroupId, scopeId, scopedObjectsRequest, _callback);

    }

    /**
     * Add objects to the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopedObjectsRequest Add objects to the access group scope. (required)
     * @return ScopedObjectItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ScopedObjectItemsResponse addObjectsToAccessGroupScope(String accessGroupId, String scopeId, ScopedObjectsRequest scopedObjectsRequest) throws ApiException {
        ApiResponse<ScopedObjectItemsResponse> localVarResp = addObjectsToAccessGroupScopeWithHttpInfo(accessGroupId, scopeId, scopedObjectsRequest);
        return localVarResp.getData();
    }

    /**
     * Add objects to the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopedObjectsRequest Add objects to the access group scope. (required)
     * @return ApiResponse&lt;ScopedObjectItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopedObjectItemsResponse> addObjectsToAccessGroupScopeWithHttpInfo(String accessGroupId, String scopeId, ScopedObjectsRequest scopedObjectsRequest) throws ApiException {
        okhttp3.Call localVarCall = addObjectsToAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, scopedObjectsRequest, null);
        Type localVarReturnType = new TypeToken<ScopedObjectItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add objects to the access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopedObjectsRequest Add objects to the access group scope. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addObjectsToAccessGroupScopeAsync(String accessGroupId, String scopeId, ScopedObjectsRequest scopedObjectsRequest, final ApiCallback<ScopedObjectItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addObjectsToAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, scopedObjectsRequest, _callback);
        Type localVarReturnType = new TypeToken<ScopedObjectItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRolePermissions
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to add to the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRolePermissionsCall(String roleId, PermissionsRequest permissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsRequest;

        // create path and map variables
        String localVarPath = "/roles/{roleId}/permissions"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRolePermissionsValidateBeforeCall(String roleId, PermissionsRequest permissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addRolePermissions(Async)");
        }

        // verify the required parameter 'permissionsRequest' is set
        if (permissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'permissionsRequest' when calling addRolePermissions(Async)");
        }

        return addRolePermissionsCall(roleId, permissionsRequest, _callback);

    }

    /**
     * Add permissions to a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to add to the role. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public Role addRolePermissions(String roleId, PermissionsRequest permissionsRequest) throws ApiException {
        ApiResponse<Role> localVarResp = addRolePermissionsWithHttpInfo(roleId, permissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add permissions to a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to add to the role. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> addRolePermissionsWithHttpInfo(String roleId, PermissionsRequest permissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = addRolePermissionsValidateBeforeCall(roleId, permissionsRequest, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add permissions to a role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to add to the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRolePermissionsAsync(String roleId, PermissionsRequest permissionsRequest, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRolePermissionsValidateBeforeCall(roleId, permissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTagsToScope
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopeTagsRequest Object tags for the access group scope. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToScopeCall(String accessGroupId, String scopeId, ScopeTagsRequest scopeTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeTagsRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/object-tags"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsToScopeValidateBeforeCall(String accessGroupId, String scopeId, ScopeTagsRequest scopeTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling addTagsToScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling addTagsToScope(Async)");
        }

        // verify the required parameter 'scopeTagsRequest' is set
        if (scopeTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'scopeTagsRequest' when calling addTagsToScope(Async)");
        }

        return addTagsToScopeCall(accessGroupId, scopeId, scopeTagsRequest, _callback);

    }

    /**
     * Add object tags to the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopeTagsRequest Object tags for the access group scope. (required)
     * @return ScopeTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ScopeTagsResponse addTagsToScope(String accessGroupId, String scopeId, ScopeTagsRequest scopeTagsRequest) throws ApiException {
        ApiResponse<ScopeTagsResponse> localVarResp = addTagsToScopeWithHttpInfo(accessGroupId, scopeId, scopeTagsRequest);
        return localVarResp.getData();
    }

    /**
     * Add object tags to the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopeTagsRequest Object tags for the access group scope. (required)
     * @return ApiResponse&lt;ScopeTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeTagsResponse> addTagsToScopeWithHttpInfo(String accessGroupId, String scopeId, ScopeTagsRequest scopeTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = addTagsToScopeValidateBeforeCall(accessGroupId, scopeId, scopeTagsRequest, null);
        Type localVarReturnType = new TypeToken<ScopeTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add object tags to the access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param scopeTagsRequest Object tags for the access group scope. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTagsToScopeAsync(String accessGroupId, String scopeId, ScopeTagsRequest scopeTagsRequest, final ApiCallback<ScopeTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsToScopeValidateBeforeCall(accessGroupId, scopeId, scopeTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<ScopeTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccessGroup
     * @param accessGroup  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessGroupCall(AccessGroup accessGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessGroup;

        // create path and map variables
        String localVarPath = "/access-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccessGroupValidateBeforeCall(AccessGroup accessGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroup' is set
        if (accessGroup == null) {
            throw new ApiException("Missing the required parameter 'accessGroup' when calling createAccessGroup(Async)");
        }

        return createAccessGroupCall(accessGroup, _callback);

    }

    /**
     * Create a new access group.
     * 
     * @param accessGroup  (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup createAccessGroup(AccessGroup accessGroup) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = createAccessGroupWithHttpInfo(accessGroup);
        return localVarResp.getData();
    }

    /**
     * Create a new access group.
     * 
     * @param accessGroup  (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> createAccessGroupWithHttpInfo(AccessGroup accessGroup) throws ApiException {
        okhttp3.Call localVarCall = createAccessGroupValidateBeforeCall(accessGroup, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new access group. (asynchronously)
     * 
     * @param accessGroup  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns the newly created access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccessGroupAsync(AccessGroup accessGroup, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccessGroupValidateBeforeCall(accessGroup, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param createRole  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(CreateRole createRole, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRole;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(CreateRole createRole, final ApiCallback _callback) throws ApiException {
        return createRoleCall(createRole, _callback);

    }

    /**
     * Create custom role
     * 
     * @param createRole  (optional)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created role. </td><td>  -  </td></tr>
     </table>
     */
    public Role createRole(CreateRole createRole) throws ApiException {
        ApiResponse<Role> localVarResp = createRoleWithHttpInfo(createRole);
        return localVarResp.getData();
    }

    /**
     * Create custom role
     * 
     * @param createRole  (optional)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created role. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> createRoleWithHttpInfo(CreateRole createRole) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createRole, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create custom role (asynchronously)
     * 
     * @param createRole  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the newly created role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(CreateRole createRole, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(createRole, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoleTags
     * @param roleId The ID of the role. (required)
     * @param tagsRequest Tags information for Roles. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleTagsCall(String roleId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/roles/{roleId}/tags"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleTagsValidateBeforeCall(String roleId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling createRoleTags(Async)");
        }

        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling createRoleTags(Async)");
        }

        return createRoleTagsCall(roleId, tagsRequest, _callback);

    }

    /**
     * Create tags for a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param tagsRequest Tags information for Roles. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse createRoleTags(String roleId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = createRoleTagsWithHttpInfo(roleId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create tags for a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param tagsRequest Tags information for Roles. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> createRoleTagsWithHttpInfo(String roleId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createRoleTagsValidateBeforeCall(roleId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tags for a role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param tagsRequest Tags information for Roles. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleTagsAsync(String roleId, TagsRequest tagsRequest, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleTagsValidateBeforeCall(roleId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessGroup
     * @param accessGroupId The ID of the Access group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupCall(String accessGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessGroupValidateBeforeCall(String accessGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling deleteAccessGroup(Async)");
        }

        return deleteAccessGroupCall(accessGroupId, _callback);

    }

    /**
     * Delete an Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccessGroup(String accessGroupId) throws ApiException {
        deleteAccessGroupWithHttpInfo(accessGroupId);
    }

    /**
     * Delete an Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccessGroupWithHttpInfo(String accessGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessGroupValidateBeforeCall(accessGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an Access group. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupAsync(String accessGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessGroupValidateBeforeCall(accessGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessGroupScopeObjectTags
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopeObjectTags The parameters to delete scope objects tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupScopeObjectTagsCall(String accessGroupId, String scopeId, DeleteScopeObjectTags deleteScopeObjectTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteScopeObjectTags;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/object-tags/delete"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessGroupScopeObjectTagsValidateBeforeCall(String accessGroupId, String scopeId, DeleteScopeObjectTags deleteScopeObjectTags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling deleteAccessGroupScopeObjectTags(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling deleteAccessGroupScopeObjectTags(Async)");
        }

        return deleteAccessGroupScopeObjectTagsCall(accessGroupId, scopeId, deleteScopeObjectTags, _callback);

    }

    /**
     * Remove tags from the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopeObjectTags The parameters to delete scope objects tags (optional)
     * @return ScopeTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ScopeTagsResponse deleteAccessGroupScopeObjectTags(String accessGroupId, String scopeId, DeleteScopeObjectTags deleteScopeObjectTags) throws ApiException {
        ApiResponse<ScopeTagsResponse> localVarResp = deleteAccessGroupScopeObjectTagsWithHttpInfo(accessGroupId, scopeId, deleteScopeObjectTags);
        return localVarResp.getData();
    }

    /**
     * Remove tags from the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopeObjectTags The parameters to delete scope objects tags (optional)
     * @return ApiResponse&lt;ScopeTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeTagsResponse> deleteAccessGroupScopeObjectTagsWithHttpInfo(String accessGroupId, String scopeId, DeleteScopeObjectTags deleteScopeObjectTags) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessGroupScopeObjectTagsValidateBeforeCall(accessGroupId, scopeId, deleteScopeObjectTags, null);
        Type localVarReturnType = new TypeToken<ScopeTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove tags from the access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopeObjectTags The parameters to delete scope objects tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupScopeObjectTagsAsync(String accessGroupId, String scopeId, DeleteScopeObjectTags deleteScopeObjectTags, final ApiCallback<ScopeTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessGroupScopeObjectTagsValidateBeforeCall(accessGroupId, scopeId, deleteScopeObjectTags, _callback);
        Type localVarReturnType = new TypeToken<ScopeTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessGroupScopeObjects
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopedObjectItem The parameters to delete scope objects (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupScopeObjectsCall(String accessGroupId, String scopeId, DeleteScopedObjectItem deleteScopedObjectItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteScopedObjectItem;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/objects/delete"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessGroupScopeObjectsValidateBeforeCall(String accessGroupId, String scopeId, DeleteScopedObjectItem deleteScopedObjectItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling deleteAccessGroupScopeObjects(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling deleteAccessGroupScopeObjects(Async)");
        }

        return deleteAccessGroupScopeObjectsCall(accessGroupId, scopeId, deleteScopedObjectItem, _callback);

    }

    /**
     * Remove objects from the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopedObjectItem The parameters to delete scope objects (optional)
     * @return ScopedObjectItemsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ScopedObjectItemsResponse deleteAccessGroupScopeObjects(String accessGroupId, String scopeId, DeleteScopedObjectItem deleteScopedObjectItem) throws ApiException {
        ApiResponse<ScopedObjectItemsResponse> localVarResp = deleteAccessGroupScopeObjectsWithHttpInfo(accessGroupId, scopeId, deleteScopedObjectItem);
        return localVarResp.getData();
    }

    /**
     * Remove objects from the access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopedObjectItem The parameters to delete scope objects (optional)
     * @return ApiResponse&lt;ScopedObjectItemsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopedObjectItemsResponse> deleteAccessGroupScopeObjectsWithHttpInfo(String accessGroupId, String scopeId, DeleteScopedObjectItem deleteScopedObjectItem) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessGroupScopeObjectsValidateBeforeCall(accessGroupId, scopeId, deleteScopedObjectItem, null);
        Type localVarReturnType = new TypeToken<ScopedObjectItemsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove objects from the access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param deleteScopedObjectItem The parameters to delete scope objects (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessGroupScopeObjectsAsync(String accessGroupId, String scopeId, DeleteScopedObjectItem deleteScopedObjectItem, final ApiCallback<ScopedObjectItemsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessGroupScopeObjectsValidateBeforeCall(accessGroupId, scopeId, deleteScopedObjectItem, _callback);
        Type localVarReturnType = new TypeToken<ScopedObjectItemsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param roleId The ID of the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRole(Async)");
        }

        return deleteRoleCall(roleId, _callback);

    }

    /**
     * Delete role by ID.
     * 
     * @param roleId The ID of the role. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String roleId) throws ApiException {
        deleteRoleWithHttpInfo(roleId);
    }

    /**
     * Delete role by ID.
     * 
     * @param roleId The ID of the role. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete role by ID. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleTag
     * @param roleId The ID of the role. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleTagCall(String roleId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/roles/{roleId}/tags/delete"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleTagValidateBeforeCall(String roleId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRoleTag(Async)");
        }

        return deleteRoleTagCall(roleId, deleteTag, _callback);

    }

    /**
     * Delete tags for a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRoleTag(String roleId, DeleteTag deleteTag) throws ApiException {
        deleteRoleTagWithHttpInfo(roleId, deleteTag);
    }

    /**
     * Delete tags for a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleTagWithHttpInfo(String roleId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleTagValidateBeforeCall(roleId, deleteTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tags for a Role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleTagAsync(String roleId, DeleteTag deleteTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleTagValidateBeforeCall(roleId, deleteTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccessGroupById
     * @param accessGroupId The ID of the Access group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupByIdCall(String accessGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessGroupByIdValidateBeforeCall(String accessGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling getAccessGroupById(Async)");
        }

        return getAccessGroupByIdCall(accessGroupId, _callback);

    }

    /**
     * Returns an Access group by ID.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup getAccessGroupById(String accessGroupId) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = getAccessGroupByIdWithHttpInfo(accessGroupId);
        return localVarResp.getData();
    }

    /**
     * Returns an Access group by ID.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> getAccessGroupByIdWithHttpInfo(String accessGroupId) throws ApiException {
        okhttp3.Call localVarCall = getAccessGroupByIdValidateBeforeCall(accessGroupId, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns an Access group by ID. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupByIdAsync(String accessGroupId, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessGroupByIdValidateBeforeCall(accessGroupId, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccessGroupScope
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupScopeCall(String accessGroupId, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessGroupScopeValidateBeforeCall(String accessGroupId, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling getAccessGroupScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling getAccessGroupScope(Async)");
        }

        return getAccessGroupScopeCall(accessGroupId, scopeId, _callback);

    }

    /**
     * Get access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @return AccessGroupScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupScope getAccessGroupScope(String accessGroupId, String scopeId) throws ApiException {
        ApiResponse<AccessGroupScope> localVarResp = getAccessGroupScopeWithHttpInfo(accessGroupId, scopeId);
        return localVarResp.getData();
    }

    /**
     * Get access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @return ApiResponse&lt;AccessGroupScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupScope> getAccessGroupScopeWithHttpInfo(String accessGroupId, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = getAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, null);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupScopeAsync(String accessGroupId, String scopeId, final ApiCallback<AccessGroupScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccessGroups
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupsCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessGroupsValidateBeforeCall(Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        return getAccessGroupsCall(limit, cursor, sort, _callback);

    }

    /**
     * List all access groups.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListAccessGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAccessGroupsResponse getAccessGroups(Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListAccessGroupsResponse> localVarResp = getAccessGroupsWithHttpInfo(limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * List all access groups.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListAccessGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccessGroupsResponse> getAccessGroupsWithHttpInfo(Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAccessGroupsValidateBeforeCall(limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListAccessGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all access groups. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccessGroupsAsync(Integer limit, String cursor, String sort, final ApiCallback<ListAccessGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessGroupsValidateBeforeCall(limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListAccessGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllObjectPermissions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllObjectPermissionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/object-permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObjectPermissionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllObjectPermissionsCall(_callback);

    }

    /**
     * Returns all of the possible permissions for all of the objects.
     * 
     * @return AllObjectPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AllObjectPermissionsResponse getAllObjectPermissions() throws ApiException {
        ApiResponse<AllObjectPermissionsResponse> localVarResp = getAllObjectPermissionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns all of the possible permissions for all of the objects.
     * 
     * @return ApiResponse&lt;AllObjectPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllObjectPermissionsResponse> getAllObjectPermissionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllObjectPermissionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AllObjectPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all of the possible permissions for all of the objects. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllObjectPermissionsAsync(final ApiCallback<AllObjectPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObjectPermissionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AllObjectPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectPermissions
     * @param objectType The type of the DCT object. (required)
     * @param objectId The ID of the DCT Object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectPermissionsCall(String objectType, String objectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/permissions/objects/{objectType}/{objectId}"
            .replace("{" + "objectType" + "}", localVarApiClient.escapeString(objectType.toString()))
            .replace("{" + "objectId" + "}", localVarApiClient.escapeString(objectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectPermissionsValidateBeforeCall(String objectType, String objectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new ApiException("Missing the required parameter 'objectType' when calling getObjectPermissions(Async)");
        }

        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling getObjectPermissions(Async)");
        }

        return getObjectPermissionsCall(objectType, objectId, _callback);

    }

    /**
     * Returns permissions for given object.
     * 
     * @param objectType The type of the DCT object. (required)
     * @param objectId The ID of the DCT Object. (required)
     * @return ObjectPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ObjectPermissionsResponse getObjectPermissions(String objectType, String objectId) throws ApiException {
        ApiResponse<ObjectPermissionsResponse> localVarResp = getObjectPermissionsWithHttpInfo(objectType, objectId);
        return localVarResp.getData();
    }

    /**
     * Returns permissions for given object.
     * 
     * @param objectType The type of the DCT object. (required)
     * @param objectId The ID of the DCT Object. (required)
     * @return ApiResponse&lt;ObjectPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectPermissionsResponse> getObjectPermissionsWithHttpInfo(String objectType, String objectId) throws ApiException {
        okhttp3.Call localVarCall = getObjectPermissionsValidateBeforeCall(objectType, objectId, null);
        Type localVarReturnType = new TypeToken<ObjectPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns permissions for given object. (asynchronously)
     * 
     * @param objectType The type of the DCT object. (required)
     * @param objectId The ID of the DCT Object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectPermissionsAsync(String objectType, String objectId, final ApiCallback<ObjectPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectPermissionsValidateBeforeCall(objectType, objectId, _callback);
        Type localVarReturnType = new TypeToken<ObjectPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleById
     * @param roleId The ID of the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleByIdCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleByIdValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleById(Async)");
        }

        return getRoleByIdCall(roleId, _callback);

    }

    /**
     * Returns role by ID.
     * 
     * @param roleId The ID of the role. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Role getRoleById(String roleId) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleByIdWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Returns role by ID.
     * 
     * @param roleId The ID of the role. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleByIdWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = getRoleByIdValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns role by ID. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleByIdAsync(String roleId, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleByIdValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleTags
     * @param roleId The ID of the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleTagsCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles/{roleId}/tags"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleTagsValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleTags(Async)");
        }

        return getRoleTagsCall(roleId, _callback);

    }

    /**
     * Get tags for a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse getRoleTags(String roleId) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = getRoleTagsWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> getRoleTagsWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = getRoleTagsValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a Role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleTagsAsync(String roleId, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleTagsValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRolesCall(_callback);

    }

    /**
     * List all roles
     * 
     * @return ListRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRolesResponse getRoles() throws ApiException {
        ApiResponse<ListRolesResponse> localVarResp = getRolesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all roles
     * 
     * @return ApiResponse&lt;ListRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRolesResponse> getRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all roles (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRolesAsync(final ApiCallback<ListRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAccessGroupAccountId
     * @param accessGroupId The ID of the Access group. (required)
     * @param accountId The ID of the account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupAccountIdCall(String accessGroupId, Long accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/account-ids/{accountId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccessGroupAccountIdValidateBeforeCall(String accessGroupId, Long accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling removeAccessGroupAccountId(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeAccessGroupAccountId(Async)");
        }

        return removeAccessGroupAccountIdCall(accessGroupId, accountId, _callback);

    }

    /**
     * Remove the account from the access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accountId The ID of the account. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup removeAccessGroupAccountId(String accessGroupId, Long accountId) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = removeAccessGroupAccountIdWithHttpInfo(accessGroupId, accountId);
        return localVarResp.getData();
    }

    /**
     * Remove the account from the access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accountId The ID of the account. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> removeAccessGroupAccountIdWithHttpInfo(String accessGroupId, Long accountId) throws ApiException {
        okhttp3.Call localVarCall = removeAccessGroupAccountIdValidateBeforeCall(accessGroupId, accountId, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the account from the access group. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accountId The ID of the account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupAccountIdAsync(String accessGroupId, Long accountId, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccessGroupAccountIdValidateBeforeCall(accessGroupId, accountId, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAccessGroupAccountTags
     * @param accessGroupId The ID of the Access group. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupAccountTagsCall(String accessGroupId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/tags/delete"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccessGroupAccountTagsValidateBeforeCall(String accessGroupId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling removeAccessGroupAccountTags(Async)");
        }

        return removeAccessGroupAccountTagsCall(accessGroupId, deleteTag, _callback);

    }

    /**
     * Remove account tags from an access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup removeAccessGroupAccountTags(String accessGroupId, DeleteTag deleteTag) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = removeAccessGroupAccountTagsWithHttpInfo(accessGroupId, deleteTag);
        return localVarResp.getData();
    }

    /**
     * Remove account tags from an access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> removeAccessGroupAccountTagsWithHttpInfo(String accessGroupId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = removeAccessGroupAccountTagsValidateBeforeCall(accessGroupId, deleteTag, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove account tags from an access group. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupAccountTagsAsync(String accessGroupId, DeleteTag deleteTag, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccessGroupAccountTagsValidateBeforeCall(accessGroupId, deleteTag, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAccessGroupScope
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupScopeCall(String accessGroupId, String scopeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccessGroupScopeValidateBeforeCall(String accessGroupId, String scopeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling removeAccessGroupScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling removeAccessGroupScope(Async)");
        }

        return removeAccessGroupScopeCall(accessGroupId, scopeId, _callback);

    }

    /**
     * Remove the scope from the Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup removeAccessGroupScope(String accessGroupId, String scopeId) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = removeAccessGroupScopeWithHttpInfo(accessGroupId, scopeId);
        return localVarResp.getData();
    }

    /**
     * Remove the scope from the Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> removeAccessGroupScopeWithHttpInfo(String accessGroupId, String scopeId) throws ApiException {
        okhttp3.Call localVarCall = removeAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the scope from the Access group. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated Access group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAccessGroupScopeAsync(String accessGroupId, String scopeId, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeAlwaysAllowedPermissions
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Remove always allowed permissions for given object type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlwaysAllowedPermissionsCall(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alwaysAllowedPermissionRequest;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}/always_allowed_permissions/delete"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAlwaysAllowedPermissionsValidateBeforeCall(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling removeAlwaysAllowedPermissions(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling removeAlwaysAllowedPermissions(Async)");
        }

        // verify the required parameter 'alwaysAllowedPermissionRequest' is set
        if (alwaysAllowedPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'alwaysAllowedPermissionRequest' when calling removeAlwaysAllowedPermissions(Async)");
        }

        return removeAlwaysAllowedPermissionsCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, _callback);

    }

    /**
     * Remove always allowed permissions for given object type.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Remove always allowed permissions for given object type. (required)
     * @return AccessGroupScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupScope removeAlwaysAllowedPermissions(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest) throws ApiException {
        ApiResponse<AccessGroupScope> localVarResp = removeAlwaysAllowedPermissionsWithHttpInfo(accessGroupId, scopeId, alwaysAllowedPermissionRequest);
        return localVarResp.getData();
    }

    /**
     * Remove always allowed permissions for given object type.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Remove always allowed permissions for given object type. (required)
     * @return ApiResponse&lt;AccessGroupScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupScope> removeAlwaysAllowedPermissionsWithHttpInfo(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest) throws ApiException {
        okhttp3.Call localVarCall = removeAlwaysAllowedPermissionsValidateBeforeCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, null);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove always allowed permissions for given object type. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param alwaysAllowedPermissionRequest Remove always allowed permissions for given object type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeAlwaysAllowedPermissionsAsync(String accessGroupId, String scopeId, AlwaysAllowedPermissionRequest alwaysAllowedPermissionRequest, final ApiCallback<AccessGroupScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAlwaysAllowedPermissionsValidateBeforeCall(accessGroupId, scopeId, alwaysAllowedPermissionRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRolePermissions
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to remove from the role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRolePermissionsCall(String roleId, PermissionsRequest permissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissionsRequest;

        // create path and map variables
        String localVarPath = "/roles/{roleId}/permissions/delete"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRolePermissionsValidateBeforeCall(String roleId, PermissionsRequest permissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRolePermissions(Async)");
        }

        // verify the required parameter 'permissionsRequest' is set
        if (permissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'permissionsRequest' when calling removeRolePermissions(Async)");
        }

        return removeRolePermissionsCall(roleId, permissionsRequest, _callback);

    }

    /**
     * Remove permissions from a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to remove from the role. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public Role removeRolePermissions(String roleId, PermissionsRequest permissionsRequest) throws ApiException {
        ApiResponse<Role> localVarResp = removeRolePermissionsWithHttpInfo(roleId, permissionsRequest);
        return localVarResp.getData();
    }

    /**
     * Remove permissions from a role.
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to remove from the role. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> removeRolePermissionsWithHttpInfo(String roleId, PermissionsRequest permissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeRolePermissionsValidateBeforeCall(roleId, permissionsRequest, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove permissions from a role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param permissionsRequest Permissions to remove from the role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated role. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRolePermissionsAsync(String roleId, PermissionsRequest permissionsRequest, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRolePermissionsValidateBeforeCall(roleId, permissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAccessGroups
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAccessGroupsCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/access-groups/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAccessGroupsValidateBeforeCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchAccessGroupsCall(limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search for access groups.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchAccessGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchAccessGroupsResponse searchAccessGroups(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchAccessGroupsResponse> localVarResp = searchAccessGroupsWithHttpInfo(limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for access groups.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchAccessGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAccessGroupsResponse> searchAccessGroupsWithHttpInfo(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchAccessGroupsValidateBeforeCall(limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchAccessGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for access groups. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAccessGroupsAsync(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchAccessGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAccessGroupsValidateBeforeCall(limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchAccessGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRoles
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRolesCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/roles/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRolesValidateBeforeCall(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchRolesCall(limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search for roles.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchRolesResponse searchRoles(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchRolesResponse> localVarResp = searchRolesWithHttpInfo(limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for roles.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchRolesResponse> searchRolesWithHttpInfo(Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchRolesValidateBeforeCall(limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for roles. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchRolesAsync(Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRolesValidateBeforeCall(limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessGroup
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupUpdateParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessGroupCall(String accessGroupId, AccessGroupUpdateParameters accessGroupUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessGroupUpdateParameters;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessGroupValidateBeforeCall(String accessGroupId, AccessGroupUpdateParameters accessGroupUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling updateAccessGroup(Async)");
        }

        return updateAccessGroupCall(accessGroupId, accessGroupUpdateParameters, _callback);

    }

    /**
     * Update an Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupUpdateParameters  (optional)
     * @return AccessGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroup updateAccessGroup(String accessGroupId, AccessGroupUpdateParameters accessGroupUpdateParameters) throws ApiException {
        ApiResponse<AccessGroup> localVarResp = updateAccessGroupWithHttpInfo(accessGroupId, accessGroupUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update an Access group.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupUpdateParameters  (optional)
     * @return ApiResponse&lt;AccessGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroup> updateAccessGroupWithHttpInfo(String accessGroupId, AccessGroupUpdateParameters accessGroupUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateAccessGroupValidateBeforeCall(accessGroupId, accessGroupUpdateParameters, null);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Access group. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param accessGroupUpdateParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessGroupAsync(String accessGroupId, AccessGroupUpdateParameters accessGroupUpdateParameters, final ApiCallback<AccessGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessGroupValidateBeforeCall(accessGroupId, accessGroupUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<AccessGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessGroupScope
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param updateAccessGroupScope Access group scope to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessGroupScopeCall(String accessGroupId, String scopeId, UpdateAccessGroupScope updateAccessGroupScope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccessGroupScope;

        // create path and map variables
        String localVarPath = "/access-groups/{accessGroupId}/scopes/{scopeId}"
            .replace("{" + "accessGroupId" + "}", localVarApiClient.escapeString(accessGroupId.toString()))
            .replace("{" + "scopeId" + "}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessGroupScopeValidateBeforeCall(String accessGroupId, String scopeId, UpdateAccessGroupScope updateAccessGroupScope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessGroupId' is set
        if (accessGroupId == null) {
            throw new ApiException("Missing the required parameter 'accessGroupId' when calling updateAccessGroupScope(Async)");
        }

        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling updateAccessGroupScope(Async)");
        }

        // verify the required parameter 'updateAccessGroupScope' is set
        if (updateAccessGroupScope == null) {
            throw new ApiException("Missing the required parameter 'updateAccessGroupScope' when calling updateAccessGroupScope(Async)");
        }

        return updateAccessGroupScopeCall(accessGroupId, scopeId, updateAccessGroupScope, _callback);

    }

    /**
     * Update access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param updateAccessGroupScope Access group scope to update. (required)
     * @return AccessGroupScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public AccessGroupScope updateAccessGroupScope(String accessGroupId, String scopeId, UpdateAccessGroupScope updateAccessGroupScope) throws ApiException {
        ApiResponse<AccessGroupScope> localVarResp = updateAccessGroupScopeWithHttpInfo(accessGroupId, scopeId, updateAccessGroupScope);
        return localVarResp.getData();
    }

    /**
     * Update access group scope.
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param updateAccessGroupScope Access group scope to update. (required)
     * @return ApiResponse&lt;AccessGroupScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessGroupScope> updateAccessGroupScopeWithHttpInfo(String accessGroupId, String scopeId, UpdateAccessGroupScope updateAccessGroupScope) throws ApiException {
        okhttp3.Call localVarCall = updateAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, updateAccessGroupScope, null);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update access group scope. (asynchronously)
     * 
     * @param accessGroupId The ID of the Access group. (required)
     * @param scopeId The ID of the Access group scope. (required)
     * @param updateAccessGroupScope Access group scope to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated access group scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessGroupScopeAsync(String accessGroupId, String scopeId, UpdateAccessGroupScope updateAccessGroupScope, final ApiCallback<AccessGroupScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessGroupScopeValidateBeforeCall(accessGroupId, scopeId, updateAccessGroupScope, _callback);
        Type localVarReturnType = new TypeToken<AccessGroupScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param roleId The ID of the role. (required)
     * @param roleUpdateParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String roleId, RoleUpdateParameters roleUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleUpdateParameters;

        // create path and map variables
        String localVarPath = "/roles/{roleId}"
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String roleId, RoleUpdateParameters roleUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRole(Async)");
        }

        return updateRoleCall(roleId, roleUpdateParameters, _callback);

    }

    /**
     * Update a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @param roleUpdateParameters  (optional)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Role updateRole(String roleId, RoleUpdateParameters roleUpdateParameters) throws ApiException {
        ApiResponse<Role> localVarResp = updateRoleWithHttpInfo(roleId, roleUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a Role.
     * 
     * @param roleId The ID of the role. (required)
     * @param roleUpdateParameters  (optional)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> updateRoleWithHttpInfo(String roleId, RoleUpdateParameters roleUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, roleUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a Role. (asynchronously)
     * 
     * @param roleId The ID of the role. (required)
     * @param roleUpdateParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String roleId, RoleUpdateParameters roleUpdateParameters, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, roleUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
