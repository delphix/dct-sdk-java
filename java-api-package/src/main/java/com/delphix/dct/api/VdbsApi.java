/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiCallback;
import com.delphix.dct.ApiClient;
import com.delphix.dct.ApiException;
import com.delphix.dct.ApiResponse;
import com.delphix.dct.Configuration;
import com.delphix.dct.Pair;
import com.delphix.dct.ProgressRequestBody;
import com.delphix.dct.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.DeleteVDBParameters;
import com.delphix.dct.models.DeleteVDBResponse;
import com.delphix.dct.models.DisableVDBParameters;
import com.delphix.dct.models.DisableVDBResponse;
import com.delphix.dct.models.EnableVDBParameters;
import com.delphix.dct.models.EnableVDBResponse;
import com.delphix.dct.models.ListBookmarksByVDBResponse;
import com.delphix.dct.models.ListSnapshotsResponse;
import com.delphix.dct.models.ListVDBsResponse;
import com.delphix.dct.models.LockVDBParameters;
import com.delphix.dct.models.PermissionEnum;
import com.delphix.dct.models.ProvisionVDBByLocationDefaultsRequest;
import com.delphix.dct.models.ProvisionVDBByLocationParameters;
import com.delphix.dct.models.ProvisionVDBBySnapshotDefaultsRequest;
import com.delphix.dct.models.ProvisionVDBBySnapshotParameters;
import com.delphix.dct.models.ProvisionVDBByTimestampDefaultsRequest;
import com.delphix.dct.models.ProvisionVDBByTimestampParameters;
import com.delphix.dct.models.ProvisionVDBFromBookmarkDefaultsRequest;
import com.delphix.dct.models.ProvisionVDBFromBookmarkParameters;
import com.delphix.dct.models.ProvisionVDBResponse;
import com.delphix.dct.models.RefreshVDBByLocationParameters;
import com.delphix.dct.models.RefreshVDBByLocationResponse;
import com.delphix.dct.models.RefreshVDBBySnapshotParameters;
import com.delphix.dct.models.RefreshVDBBySnapshotResponse;
import com.delphix.dct.models.RefreshVDBByTimestampParameters;
import com.delphix.dct.models.RefreshVDBByTimestampResponse;
import com.delphix.dct.models.RefreshVDBFromBookmarkParameters;
import com.delphix.dct.models.RefreshVDBFromBookmarkResponse;
import com.delphix.dct.models.RollbackVDBBySnapshotParameters;
import com.delphix.dct.models.RollbackVDBBySnapshotResponse;
import com.delphix.dct.models.RollbackVDBByTimestampParameters;
import com.delphix.dct.models.RollbackVDBByTimestampResponse;
import com.delphix.dct.models.RollbackVDBFromBookmarkParameters;
import com.delphix.dct.models.RollbackVDBFromBookmarkResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchBookmarksByVDBResponse;
import com.delphix.dct.models.SearchVDBsResponse;
import com.delphix.dct.models.SnapshotVDBResponse;
import com.delphix.dct.models.StartVDBResponse;
import com.delphix.dct.models.StopVDBResponse;
import com.delphix.dct.models.SwitchTimeflowParameters;
import com.delphix.dct.models.SwitchTimeflowResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateVDBParameters;
import com.delphix.dct.models.UpdateVDBResponse;
import com.delphix.dct.models.VDB;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VdbsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VdbsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VdbsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createVdbTags
     * @param vdbId The ID of the VDB. (required)
     * @param tagsRequest Tags information for VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdbTagsCall(String vdbId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsRequest;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/tags"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVdbTagsValidateBeforeCall(String vdbId, TagsRequest tagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling createVdbTags(Async)");
        }

        // verify the required parameter 'tagsRequest' is set
        if (tagsRequest == null) {
            throw new ApiException("Missing the required parameter 'tagsRequest' when calling createVdbTags(Async)");
        }

        return createVdbTagsCall(vdbId, tagsRequest, _callback);

    }

    /**
     * Create tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param tagsRequest Tags information for VDB. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse createVdbTags(String vdbId, TagsRequest tagsRequest) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = createVdbTagsWithHttpInfo(vdbId, tagsRequest);
        return localVarResp.getData();
    }

    /**
     * Create tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param tagsRequest Tags information for VDB. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> createVdbTagsWithHttpInfo(String vdbId, TagsRequest tagsRequest) throws ApiException {
        okhttp3.Call localVarCall = createVdbTagsValidateBeforeCall(vdbId, tagsRequest, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create tags for a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param tagsRequest Tags information for VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVdbTagsAsync(String vdbId, TagsRequest tagsRequest, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVdbTagsValidateBeforeCall(vdbId, tagsRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVdb
     * @param vdbId The ID of the VDB. (required)
     * @param deleteVDBParameters The parameters to delete a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB delete initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdbCall(String vdbId, DeleteVDBParameters deleteVDBParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteVDBParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/delete"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVdbValidateBeforeCall(String vdbId, DeleteVDBParameters deleteVDBParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling deleteVdb(Async)");
        }

        return deleteVdbCall(vdbId, deleteVDBParameters, _callback);

    }

    /**
     * Delete a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteVDBParameters The parameters to delete a VDB. (optional)
     * @return DeleteVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB delete initiated. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVDBResponse deleteVdb(String vdbId, DeleteVDBParameters deleteVDBParameters) throws ApiException {
        ApiResponse<DeleteVDBResponse> localVarResp = deleteVdbWithHttpInfo(vdbId, deleteVDBParameters);
        return localVarResp.getData();
    }

    /**
     * Delete a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteVDBParameters The parameters to delete a VDB. (optional)
     * @return ApiResponse&lt;DeleteVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB delete initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVDBResponse> deleteVdbWithHttpInfo(String vdbId, DeleteVDBParameters deleteVDBParameters) throws ApiException {
        okhttp3.Call localVarCall = deleteVdbValidateBeforeCall(vdbId, deleteVDBParameters, null);
        Type localVarReturnType = new TypeToken<DeleteVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteVDBParameters The parameters to delete a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB delete initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdbAsync(String vdbId, DeleteVDBParameters deleteVDBParameters, final ApiCallback<DeleteVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVdbValidateBeforeCall(vdbId, deleteVDBParameters, _callback);
        Type localVarReturnType = new TypeToken<DeleteVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVdbTags
     * @param vdbId The ID of the VDB. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdbTagsCall(String vdbId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTag;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/tags/delete"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVdbTagsValidateBeforeCall(String vdbId, DeleteTag deleteTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling deleteVdbTags(Async)");
        }

        return deleteVdbTagsCall(vdbId, deleteTag, _callback);

    }

    /**
     * Delete tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVdbTags(String vdbId, DeleteTag deleteTag) throws ApiException {
        deleteVdbTagsWithHttpInfo(vdbId, deleteTag);
    }

    /**
     * Delete tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVdbTagsWithHttpInfo(String vdbId, DeleteTag deleteTag) throws ApiException {
        okhttp3.Call localVarCall = deleteVdbTagsValidateBeforeCall(vdbId, deleteTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete tags for a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param deleteTag The parameters to delete tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVdbTagsAsync(String vdbId, DeleteTag deleteTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVdbTagsValidateBeforeCall(vdbId, deleteTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableVdb
     * @param vdbId The ID of the VDB. (required)
     * @param disableVDBParameters The parameters to disable a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB disable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableVdbCall(String vdbId, DisableVDBParameters disableVDBParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableVDBParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/disable"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableVdbValidateBeforeCall(String vdbId, DisableVDBParameters disableVDBParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling disableVdb(Async)");
        }

        return disableVdbCall(vdbId, disableVDBParameters, _callback);

    }

    /**
     * Disable a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param disableVDBParameters The parameters to disable a VDB. (optional)
     * @return DisableVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB disable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public DisableVDBResponse disableVdb(String vdbId, DisableVDBParameters disableVDBParameters) throws ApiException {
        ApiResponse<DisableVDBResponse> localVarResp = disableVdbWithHttpInfo(vdbId, disableVDBParameters);
        return localVarResp.getData();
    }

    /**
     * Disable a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param disableVDBParameters The parameters to disable a VDB. (optional)
     * @return ApiResponse&lt;DisableVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB disable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableVDBResponse> disableVdbWithHttpInfo(String vdbId, DisableVDBParameters disableVDBParameters) throws ApiException {
        okhttp3.Call localVarCall = disableVdbValidateBeforeCall(vdbId, disableVDBParameters, null);
        Type localVarReturnType = new TypeToken<DisableVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Disable a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param disableVDBParameters The parameters to disable a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB disable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableVdbAsync(String vdbId, DisableVDBParameters disableVDBParameters, final ApiCallback<DisableVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableVdbValidateBeforeCall(vdbId, disableVDBParameters, _callback);
        Type localVarReturnType = new TypeToken<DisableVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableVdb
     * @param vdbId The ID of the VDB. (required)
     * @param enableVDBParameters The parameters to enable a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB enable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableVdbCall(String vdbId, EnableVDBParameters enableVDBParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableVDBParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/enable"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableVdbValidateBeforeCall(String vdbId, EnableVDBParameters enableVDBParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling enableVdb(Async)");
        }

        return enableVdbCall(vdbId, enableVDBParameters, _callback);

    }

    /**
     * Enable a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param enableVDBParameters The parameters to enable a VDB. (optional)
     * @return EnableVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB enable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public EnableVDBResponse enableVdb(String vdbId, EnableVDBParameters enableVDBParameters) throws ApiException {
        ApiResponse<EnableVDBResponse> localVarResp = enableVdbWithHttpInfo(vdbId, enableVDBParameters);
        return localVarResp.getData();
    }

    /**
     * Enable a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param enableVDBParameters The parameters to enable a VDB. (optional)
     * @return ApiResponse&lt;EnableVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB enable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableVDBResponse> enableVdbWithHttpInfo(String vdbId, EnableVDBParameters enableVDBParameters) throws ApiException {
        okhttp3.Call localVarCall = enableVdbValidateBeforeCall(vdbId, enableVDBParameters, null);
        Type localVarReturnType = new TypeToken<EnableVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enable a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param enableVDBParameters The parameters to enable a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB enable initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableVdbAsync(String vdbId, EnableVDBParameters enableVDBParameters, final ApiCallback<EnableVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableVdbValidateBeforeCall(vdbId, enableVDBParameters, _callback);
        Type localVarReturnType = new TypeToken<EnableVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBookmarksByVdb
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookmarksByVdbCall(String vdbId, Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/bookmarks"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBookmarksByVdbValidateBeforeCall(String vdbId, Integer limit, String cursor, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling getBookmarksByVdb(Async)");
        }

        return getBookmarksByVdbCall(vdbId, limit, cursor, sort, _callback);

    }

    /**
     * List Bookmarks compatible with this VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ListBookmarksByVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBookmarksByVDBResponse getBookmarksByVdb(String vdbId, Integer limit, String cursor, String sort) throws ApiException {
        ApiResponse<ListBookmarksByVDBResponse> localVarResp = getBookmarksByVdbWithHttpInfo(vdbId, limit, cursor, sort);
        return localVarResp.getData();
    }

    /**
     * List Bookmarks compatible with this VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @return ApiResponse&lt;ListBookmarksByVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBookmarksByVDBResponse> getBookmarksByVdbWithHttpInfo(String vdbId, Integer limit, String cursor, String sort) throws ApiException {
        okhttp3.Call localVarCall = getBookmarksByVdbValidateBeforeCall(vdbId, limit, cursor, sort, null);
        Type localVarReturnType = new TypeToken<ListBookmarksByVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bookmarks compatible with this VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookmarksByVdbAsync(String vdbId, Integer limit, String cursor, String sort, final ApiCallback<ListBookmarksByVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBookmarksByVdbValidateBeforeCall(vdbId, limit, cursor, sort, _callback);
        Type localVarReturnType = new TypeToken<ListBookmarksByVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagsVdb
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsVdbCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/tags"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsVdbValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling getTagsVdb(Async)");
        }

        return getTagsVdbCall(vdbId, _callback);

    }

    /**
     * Get tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return TagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public TagsResponse getTagsVdb(String vdbId) throws ApiException {
        ApiResponse<TagsResponse> localVarResp = getTagsVdbWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Get tags for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;TagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsResponse> getTagsVdbWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = getTagsVdbValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags for a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsVdbAsync(String vdbId, final ApiCallback<TagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsVdbValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<TagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVdbById
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbByIdCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVdbByIdValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling getVdbById(Async)");
        }

        return getVdbByIdCall(vdbId, _callback);

    }

    /**
     * Get a VDB by ID.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return VDB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VDB getVdbById(String vdbId) throws ApiException {
        ApiResponse<VDB> localVarResp = getVdbByIdWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Get a VDB by ID.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;VDB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VDB> getVdbByIdWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = getVdbByIdValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a VDB by ID. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbByIdAsync(String vdbId, final ApiCallback<VDB> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVdbByIdValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVdbSnapshots
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbSnapshotsCall(String vdbId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/snapshots"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVdbSnapshotsValidateBeforeCall(String vdbId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling getVdbSnapshots(Async)");
        }

        return getVdbSnapshotsCall(vdbId, limit, cursor, _callback);

    }

    /**
     * List Snapshots for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @return ListSnapshotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSnapshotsResponse getVdbSnapshots(String vdbId, Integer limit, String cursor) throws ApiException {
        ApiResponse<ListSnapshotsResponse> localVarResp = getVdbSnapshotsWithHttpInfo(vdbId, limit, cursor);
        return localVarResp.getData();
    }

    /**
     * List Snapshots for a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @return ApiResponse&lt;ListSnapshotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSnapshotsResponse> getVdbSnapshotsWithHttpInfo(String vdbId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getVdbSnapshotsValidateBeforeCall(vdbId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<ListSnapshotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Snapshots for a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbSnapshotsAsync(String vdbId, Integer limit, String cursor, final ApiCallback<ListSnapshotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVdbSnapshotsValidateBeforeCall(vdbId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<ListSnapshotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVdbs
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbsCall(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVdbsValidateBeforeCall(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback _callback) throws ApiException {
        return getVdbsCall(limit, cursor, sort, permission, _callback);

    }

    /**
     * List all vdbs.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @return ListVDBsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListVDBsResponse getVdbs(Integer limit, String cursor, String sort, PermissionEnum permission) throws ApiException {
        ApiResponse<ListVDBsResponse> localVarResp = getVdbsWithHttpInfo(limit, cursor, sort, permission);
        return localVarResp.getData();
    }

    /**
     * List all vdbs.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @return ApiResponse&lt;ListVDBsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVDBsResponse> getVdbsWithHttpInfo(Integer limit, String cursor, String sort, PermissionEnum permission) throws ApiException {
        okhttp3.Call localVarCall = getVdbsValidateBeforeCall(limit, cursor, sort, permission, null);
        Type localVarReturnType = new TypeToken<ListVDBsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all vdbs. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVdbsAsync(Integer limit, String cursor, String sort, PermissionEnum permission, final ApiCallback<ListVDBsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVdbsValidateBeforeCall(limit, cursor, sort, permission, _callback);
        Type localVarReturnType = new TypeToken<ListVDBsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockVdb
     * @param vdbId The ID of the VDB. (required)
     * @param lockVDBParameters The parameters to lock a VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is locked. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockVdbCall(String vdbId, LockVDBParameters lockVDBParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lockVDBParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/lock"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockVdbValidateBeforeCall(String vdbId, LockVDBParameters lockVDBParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling lockVdb(Async)");
        }

        // verify the required parameter 'lockVDBParameters' is set
        if (lockVDBParameters == null) {
            throw new ApiException("Missing the required parameter 'lockVDBParameters' when calling lockVdb(Async)");
        }

        return lockVdbCall(vdbId, lockVDBParameters, _callback);

    }

    /**
     * Lock a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param lockVDBParameters The parameters to lock a VDB. (required)
     * @return VDB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is locked. </td><td>  -  </td></tr>
     </table>
     */
    public VDB lockVdb(String vdbId, LockVDBParameters lockVDBParameters) throws ApiException {
        ApiResponse<VDB> localVarResp = lockVdbWithHttpInfo(vdbId, lockVDBParameters);
        return localVarResp.getData();
    }

    /**
     * Lock a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param lockVDBParameters The parameters to lock a VDB. (required)
     * @return ApiResponse&lt;VDB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is locked. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VDB> lockVdbWithHttpInfo(String vdbId, LockVDBParameters lockVDBParameters) throws ApiException {
        okhttp3.Call localVarCall = lockVdbValidateBeforeCall(vdbId, lockVDBParameters, null);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lock a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param lockVDBParameters The parameters to lock a VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is locked. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockVdbAsync(String vdbId, LockVDBParameters lockVDBParameters, final ApiCallback<VDB> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockVdbValidateBeforeCall(vdbId, lockVDBParameters, _callback);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbByLocation
     * @param provisionVDBByLocationParameters The parameters to provision a VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByLocationCall(ProvisionVDBByLocationParameters provisionVDBByLocationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBByLocationParameters;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbByLocationValidateBeforeCall(ProvisionVDBByLocationParameters provisionVDBByLocationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBByLocationParameters' is set
        if (provisionVDBByLocationParameters == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBByLocationParameters' when calling provisionVdbByLocation(Async)");
        }

        return provisionVdbByLocationCall(provisionVDBByLocationParameters, _callback);

    }

    /**
     * Provision a new VDB by location.
     * 
     * @param provisionVDBByLocationParameters The parameters to provision a VDB. (required)
     * @return ProvisionVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBResponse provisionVdbByLocation(ProvisionVDBByLocationParameters provisionVDBByLocationParameters) throws ApiException {
        ApiResponse<ProvisionVDBResponse> localVarResp = provisionVdbByLocationWithHttpInfo(provisionVDBByLocationParameters);
        return localVarResp.getData();
    }

    /**
     * Provision a new VDB by location.
     * 
     * @param provisionVDBByLocationParameters The parameters to provision a VDB. (required)
     * @return ApiResponse&lt;ProvisionVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBResponse> provisionVdbByLocationWithHttpInfo(ProvisionVDBByLocationParameters provisionVDBByLocationParameters) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbByLocationValidateBeforeCall(provisionVDBByLocationParameters, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision a new VDB by location. (asynchronously)
     * 
     * @param provisionVDBByLocationParameters The parameters to provision a VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByLocationAsync(ProvisionVDBByLocationParameters provisionVDBByLocationParameters, final ApiCallback<ProvisionVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbByLocationValidateBeforeCall(provisionVDBByLocationParameters, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbByLocationDefaults
     * @param provisionVDBByLocationDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by location. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByLocationDefaultsCall(ProvisionVDBByLocationDefaultsRequest provisionVDBByLocationDefaultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBByLocationDefaultsRequest;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_location/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbByLocationDefaultsValidateBeforeCall(ProvisionVDBByLocationDefaultsRequest provisionVDBByLocationDefaultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBByLocationDefaultsRequest' is set
        if (provisionVDBByLocationDefaultsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBByLocationDefaultsRequest' when calling provisionVdbByLocationDefaults(Async)");
        }

        return provisionVdbByLocationDefaultsCall(provisionVDBByLocationDefaultsRequest, _callback);

    }

    /**
     * Get default provision parameters for provisioning a new VDB by location.
     * 
     * @param provisionVDBByLocationDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by location. (required)
     * @return ProvisionVDBByLocationParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBByLocationParameters provisionVdbByLocationDefaults(ProvisionVDBByLocationDefaultsRequest provisionVDBByLocationDefaultsRequest) throws ApiException {
        ApiResponse<ProvisionVDBByLocationParameters> localVarResp = provisionVdbByLocationDefaultsWithHttpInfo(provisionVDBByLocationDefaultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get default provision parameters for provisioning a new VDB by location.
     * 
     * @param provisionVDBByLocationDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by location. (required)
     * @return ApiResponse&lt;ProvisionVDBByLocationParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBByLocationParameters> provisionVdbByLocationDefaultsWithHttpInfo(ProvisionVDBByLocationDefaultsRequest provisionVDBByLocationDefaultsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbByLocationDefaultsValidateBeforeCall(provisionVDBByLocationDefaultsRequest, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBByLocationParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default provision parameters for provisioning a new VDB by location. (asynchronously)
     * 
     * @param provisionVDBByLocationDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by location. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByLocationDefaultsAsync(ProvisionVDBByLocationDefaultsRequest provisionVDBByLocationDefaultsRequest, final ApiCallback<ProvisionVDBByLocationParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbByLocationDefaultsValidateBeforeCall(provisionVDBByLocationDefaultsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBByLocationParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbBySnapshot
     * @param provisionVDBBySnapshotParameters The parameters to provision a VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbBySnapshotCall(ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBBySnapshotParameters;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbBySnapshotValidateBeforeCall(ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBBySnapshotParameters' is set
        if (provisionVDBBySnapshotParameters == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBBySnapshotParameters' when calling provisionVdbBySnapshot(Async)");
        }

        return provisionVdbBySnapshotCall(provisionVDBBySnapshotParameters, _callback);

    }

    /**
     * Provision a new VDB by snapshot.
     * 
     * @param provisionVDBBySnapshotParameters The parameters to provision a VDB. (required)
     * @return ProvisionVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBResponse provisionVdbBySnapshot(ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters) throws ApiException {
        ApiResponse<ProvisionVDBResponse> localVarResp = provisionVdbBySnapshotWithHttpInfo(provisionVDBBySnapshotParameters);
        return localVarResp.getData();
    }

    /**
     * Provision a new VDB by snapshot.
     * 
     * @param provisionVDBBySnapshotParameters The parameters to provision a VDB. (required)
     * @return ApiResponse&lt;ProvisionVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBResponse> provisionVdbBySnapshotWithHttpInfo(ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbBySnapshotValidateBeforeCall(provisionVDBBySnapshotParameters, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision a new VDB by snapshot. (asynchronously)
     * 
     * @param provisionVDBBySnapshotParameters The parameters to provision a VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbBySnapshotAsync(ProvisionVDBBySnapshotParameters provisionVDBBySnapshotParameters, final ApiCallback<ProvisionVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbBySnapshotValidateBeforeCall(provisionVDBBySnapshotParameters, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbBySnapshotDefaults
     * @param provisionVDBBySnapshotDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by snapshot. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbBySnapshotDefaultsCall(ProvisionVDBBySnapshotDefaultsRequest provisionVDBBySnapshotDefaultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBBySnapshotDefaultsRequest;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_snapshot/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbBySnapshotDefaultsValidateBeforeCall(ProvisionVDBBySnapshotDefaultsRequest provisionVDBBySnapshotDefaultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBBySnapshotDefaultsRequest' is set
        if (provisionVDBBySnapshotDefaultsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBBySnapshotDefaultsRequest' when calling provisionVdbBySnapshotDefaults(Async)");
        }

        return provisionVdbBySnapshotDefaultsCall(provisionVDBBySnapshotDefaultsRequest, _callback);

    }

    /**
     * Get default provision parameters for provisioning a new VDB by snapshot.
     * 
     * @param provisionVDBBySnapshotDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by snapshot. (required)
     * @return ProvisionVDBBySnapshotParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBBySnapshotParameters provisionVdbBySnapshotDefaults(ProvisionVDBBySnapshotDefaultsRequest provisionVDBBySnapshotDefaultsRequest) throws ApiException {
        ApiResponse<ProvisionVDBBySnapshotParameters> localVarResp = provisionVdbBySnapshotDefaultsWithHttpInfo(provisionVDBBySnapshotDefaultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get default provision parameters for provisioning a new VDB by snapshot.
     * 
     * @param provisionVDBBySnapshotDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by snapshot. (required)
     * @return ApiResponse&lt;ProvisionVDBBySnapshotParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBBySnapshotParameters> provisionVdbBySnapshotDefaultsWithHttpInfo(ProvisionVDBBySnapshotDefaultsRequest provisionVDBBySnapshotDefaultsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbBySnapshotDefaultsValidateBeforeCall(provisionVDBBySnapshotDefaultsRequest, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBBySnapshotParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default provision parameters for provisioning a new VDB by snapshot. (asynchronously)
     * 
     * @param provisionVDBBySnapshotDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by snapshot. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbBySnapshotDefaultsAsync(ProvisionVDBBySnapshotDefaultsRequest provisionVDBBySnapshotDefaultsRequest, final ApiCallback<ProvisionVDBBySnapshotParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbBySnapshotDefaultsValidateBeforeCall(provisionVDBBySnapshotDefaultsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBBySnapshotParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbByTimestamp
     * @param provisionVDBByTimestampParameters The parameters to provision a VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByTimestampCall(ProvisionVDBByTimestampParameters provisionVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBByTimestampParameters;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_timestamp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbByTimestampValidateBeforeCall(ProvisionVDBByTimestampParameters provisionVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBByTimestampParameters' is set
        if (provisionVDBByTimestampParameters == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBByTimestampParameters' when calling provisionVdbByTimestamp(Async)");
        }

        return provisionVdbByTimestampCall(provisionVDBByTimestampParameters, _callback);

    }

    /**
     * Provision a new VDB by timestamp.
     * 
     * @param provisionVDBByTimestampParameters The parameters to provision a VDB. (required)
     * @return ProvisionVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBResponse provisionVdbByTimestamp(ProvisionVDBByTimestampParameters provisionVDBByTimestampParameters) throws ApiException {
        ApiResponse<ProvisionVDBResponse> localVarResp = provisionVdbByTimestampWithHttpInfo(provisionVDBByTimestampParameters);
        return localVarResp.getData();
    }

    /**
     * Provision a new VDB by timestamp.
     * 
     * @param provisionVDBByTimestampParameters The parameters to provision a VDB. (required)
     * @return ApiResponse&lt;ProvisionVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBResponse> provisionVdbByTimestampWithHttpInfo(ProvisionVDBByTimestampParameters provisionVDBByTimestampParameters) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbByTimestampValidateBeforeCall(provisionVDBByTimestampParameters, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision a new VDB by timestamp. (asynchronously)
     * 
     * @param provisionVDBByTimestampParameters The parameters to provision a VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByTimestampAsync(ProvisionVDBByTimestampParameters provisionVDBByTimestampParameters, final ApiCallback<ProvisionVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbByTimestampValidateBeforeCall(provisionVDBByTimestampParameters, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbByTimestampDefaults
     * @param provisionVDBByTimestampDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by timestamp. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByTimestampDefaultsCall(ProvisionVDBByTimestampDefaultsRequest provisionVDBByTimestampDefaultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBByTimestampDefaultsRequest;

        // create path and map variables
        String localVarPath = "/vdbs/provision_by_timestamp/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbByTimestampDefaultsValidateBeforeCall(ProvisionVDBByTimestampDefaultsRequest provisionVDBByTimestampDefaultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBByTimestampDefaultsRequest' is set
        if (provisionVDBByTimestampDefaultsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBByTimestampDefaultsRequest' when calling provisionVdbByTimestampDefaults(Async)");
        }

        return provisionVdbByTimestampDefaultsCall(provisionVDBByTimestampDefaultsRequest, _callback);

    }

    /**
     * Get default provision parameters for provisioning a new VDB by timestamp.
     * 
     * @param provisionVDBByTimestampDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by timestamp. (required)
     * @return ProvisionVDBByTimestampParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBByTimestampParameters provisionVdbByTimestampDefaults(ProvisionVDBByTimestampDefaultsRequest provisionVDBByTimestampDefaultsRequest) throws ApiException {
        ApiResponse<ProvisionVDBByTimestampParameters> localVarResp = provisionVdbByTimestampDefaultsWithHttpInfo(provisionVDBByTimestampDefaultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get default provision parameters for provisioning a new VDB by timestamp.
     * 
     * @param provisionVDBByTimestampDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by timestamp. (required)
     * @return ApiResponse&lt;ProvisionVDBByTimestampParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBByTimestampParameters> provisionVdbByTimestampDefaultsWithHttpInfo(ProvisionVDBByTimestampDefaultsRequest provisionVDBByTimestampDefaultsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbByTimestampDefaultsValidateBeforeCall(provisionVDBByTimestampDefaultsRequest, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBByTimestampParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default provision parameters for provisioning a new VDB by timestamp. (asynchronously)
     * 
     * @param provisionVDBByTimestampDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB by timestamp. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbByTimestampDefaultsAsync(ProvisionVDBByTimestampDefaultsRequest provisionVDBByTimestampDefaultsRequest, final ApiCallback<ProvisionVDBByTimestampParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbByTimestampDefaultsValidateBeforeCall(provisionVDBByTimestampDefaultsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBByTimestampParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbFromBookmark
     * @param provisionVDBFromBookmarkParameters The parameters to provision a VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbFromBookmarkCall(ProvisionVDBFromBookmarkParameters provisionVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBFromBookmarkParameters;

        // create path and map variables
        String localVarPath = "/vdbs/provision_from_bookmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbFromBookmarkValidateBeforeCall(ProvisionVDBFromBookmarkParameters provisionVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBFromBookmarkParameters' is set
        if (provisionVDBFromBookmarkParameters == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBFromBookmarkParameters' when calling provisionVdbFromBookmark(Async)");
        }

        return provisionVdbFromBookmarkCall(provisionVDBFromBookmarkParameters, _callback);

    }

    /**
     * Provision a new VDB from a bookmark with a single VDB.
     * 
     * @param provisionVDBFromBookmarkParameters The parameters to provision a VDB. (required)
     * @return ProvisionVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBResponse provisionVdbFromBookmark(ProvisionVDBFromBookmarkParameters provisionVDBFromBookmarkParameters) throws ApiException {
        ApiResponse<ProvisionVDBResponse> localVarResp = provisionVdbFromBookmarkWithHttpInfo(provisionVDBFromBookmarkParameters);
        return localVarResp.getData();
    }

    /**
     * Provision a new VDB from a bookmark with a single VDB.
     * 
     * @param provisionVDBFromBookmarkParameters The parameters to provision a VDB. (required)
     * @return ApiResponse&lt;ProvisionVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBResponse> provisionVdbFromBookmarkWithHttpInfo(ProvisionVDBFromBookmarkParameters provisionVDBFromBookmarkParameters) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbFromBookmarkValidateBeforeCall(provisionVDBFromBookmarkParameters, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provision a new VDB from a bookmark with a single VDB. (asynchronously)
     * 
     * @param provisionVDBFromBookmarkParameters The parameters to provision a VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB provisioning initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbFromBookmarkAsync(ProvisionVDBFromBookmarkParameters provisionVDBFromBookmarkParameters, final ApiCallback<ProvisionVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbFromBookmarkValidateBeforeCall(provisionVDBFromBookmarkParameters, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for provisionVdbFromBookmarkDefaults
     * @param provisionVDBFromBookmarkDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB from a bookmark. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbFromBookmarkDefaultsCall(ProvisionVDBFromBookmarkDefaultsRequest provisionVDBFromBookmarkDefaultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = provisionVDBFromBookmarkDefaultsRequest;

        // create path and map variables
        String localVarPath = "/vdbs/provision_from_bookmark/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provisionVdbFromBookmarkDefaultsValidateBeforeCall(ProvisionVDBFromBookmarkDefaultsRequest provisionVDBFromBookmarkDefaultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provisionVDBFromBookmarkDefaultsRequest' is set
        if (provisionVDBFromBookmarkDefaultsRequest == null) {
            throw new ApiException("Missing the required parameter 'provisionVDBFromBookmarkDefaultsRequest' when calling provisionVdbFromBookmarkDefaults(Async)");
        }

        return provisionVdbFromBookmarkDefaultsCall(provisionVDBFromBookmarkDefaultsRequest, _callback);

    }

    /**
     * Get default provision parameters for provisioning a new VDB from a bookmark.
     * 
     * @param provisionVDBFromBookmarkDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB from a bookmark. (required)
     * @return ProvisionVDBFromBookmarkParameters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ProvisionVDBFromBookmarkParameters provisionVdbFromBookmarkDefaults(ProvisionVDBFromBookmarkDefaultsRequest provisionVDBFromBookmarkDefaultsRequest) throws ApiException {
        ApiResponse<ProvisionVDBFromBookmarkParameters> localVarResp = provisionVdbFromBookmarkDefaultsWithHttpInfo(provisionVDBFromBookmarkDefaultsRequest);
        return localVarResp.getData();
    }

    /**
     * Get default provision parameters for provisioning a new VDB from a bookmark.
     * 
     * @param provisionVDBFromBookmarkDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB from a bookmark. (required)
     * @return ApiResponse&lt;ProvisionVDBFromBookmarkParameters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProvisionVDBFromBookmarkParameters> provisionVdbFromBookmarkDefaultsWithHttpInfo(ProvisionVDBFromBookmarkDefaultsRequest provisionVDBFromBookmarkDefaultsRequest) throws ApiException {
        okhttp3.Call localVarCall = provisionVdbFromBookmarkDefaultsValidateBeforeCall(provisionVDBFromBookmarkDefaultsRequest, null);
        Type localVarReturnType = new TypeToken<ProvisionVDBFromBookmarkParameters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default provision parameters for provisioning a new VDB from a bookmark. (asynchronously)
     * 
     * @param provisionVDBFromBookmarkDefaultsRequest The request to get default VDB provision parameters for provisioning a new VDB from a bookmark. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default VDB provisioning parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provisionVdbFromBookmarkDefaultsAsync(ProvisionVDBFromBookmarkDefaultsRequest provisionVDBFromBookmarkDefaultsRequest, final ApiCallback<ProvisionVDBFromBookmarkParameters> _callback) throws ApiException {

        okhttp3.Call localVarCall = provisionVdbFromBookmarkDefaultsValidateBeforeCall(provisionVDBFromBookmarkDefaultsRequest, _callback);
        Type localVarReturnType = new TypeToken<ProvisionVDBFromBookmarkParameters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshVdbByLocation
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByLocationParameters The parameters to refresh a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbByLocationCall(String vdbId, RefreshVDBByLocationParameters refreshVDBByLocationParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshVDBByLocationParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/refresh_by_location"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshVdbByLocationValidateBeforeCall(String vdbId, RefreshVDBByLocationParameters refreshVDBByLocationParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling refreshVdbByLocation(Async)");
        }

        return refreshVdbByLocationCall(vdbId, refreshVDBByLocationParameters, _callback);

    }

    /**
     * Refresh a VDB by location.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByLocationParameters The parameters to refresh a VDB. (optional)
     * @return RefreshVDBByLocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshVDBByLocationResponse refreshVdbByLocation(String vdbId, RefreshVDBByLocationParameters refreshVDBByLocationParameters) throws ApiException {
        ApiResponse<RefreshVDBByLocationResponse> localVarResp = refreshVdbByLocationWithHttpInfo(vdbId, refreshVDBByLocationParameters);
        return localVarResp.getData();
    }

    /**
     * Refresh a VDB by location.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByLocationParameters The parameters to refresh a VDB. (optional)
     * @return ApiResponse&lt;RefreshVDBByLocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshVDBByLocationResponse> refreshVdbByLocationWithHttpInfo(String vdbId, RefreshVDBByLocationParameters refreshVDBByLocationParameters) throws ApiException {
        okhttp3.Call localVarCall = refreshVdbByLocationValidateBeforeCall(vdbId, refreshVDBByLocationParameters, null);
        Type localVarReturnType = new TypeToken<RefreshVDBByLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a VDB by location. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByLocationParameters The parameters to refresh a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbByLocationAsync(String vdbId, RefreshVDBByLocationParameters refreshVDBByLocationParameters, final ApiCallback<RefreshVDBByLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshVdbByLocationValidateBeforeCall(vdbId, refreshVDBByLocationParameters, _callback);
        Type localVarReturnType = new TypeToken<RefreshVDBByLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshVdbBySnapshot
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBBySnapshotParameters The parameters to refresh a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbBySnapshotCall(String vdbId, RefreshVDBBySnapshotParameters refreshVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshVDBBySnapshotParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/refresh_by_snapshot"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshVdbBySnapshotValidateBeforeCall(String vdbId, RefreshVDBBySnapshotParameters refreshVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling refreshVdbBySnapshot(Async)");
        }

        return refreshVdbBySnapshotCall(vdbId, refreshVDBBySnapshotParameters, _callback);

    }

    /**
     * Refresh a VDB by snapshot.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBBySnapshotParameters The parameters to refresh a VDB. (optional)
     * @return RefreshVDBBySnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshVDBBySnapshotResponse refreshVdbBySnapshot(String vdbId, RefreshVDBBySnapshotParameters refreshVDBBySnapshotParameters) throws ApiException {
        ApiResponse<RefreshVDBBySnapshotResponse> localVarResp = refreshVdbBySnapshotWithHttpInfo(vdbId, refreshVDBBySnapshotParameters);
        return localVarResp.getData();
    }

    /**
     * Refresh a VDB by snapshot.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBBySnapshotParameters The parameters to refresh a VDB. (optional)
     * @return ApiResponse&lt;RefreshVDBBySnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshVDBBySnapshotResponse> refreshVdbBySnapshotWithHttpInfo(String vdbId, RefreshVDBBySnapshotParameters refreshVDBBySnapshotParameters) throws ApiException {
        okhttp3.Call localVarCall = refreshVdbBySnapshotValidateBeforeCall(vdbId, refreshVDBBySnapshotParameters, null);
        Type localVarReturnType = new TypeToken<RefreshVDBBySnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a VDB by snapshot. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBBySnapshotParameters The parameters to refresh a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbBySnapshotAsync(String vdbId, RefreshVDBBySnapshotParameters refreshVDBBySnapshotParameters, final ApiCallback<RefreshVDBBySnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshVdbBySnapshotValidateBeforeCall(vdbId, refreshVDBBySnapshotParameters, _callback);
        Type localVarReturnType = new TypeToken<RefreshVDBBySnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshVdbByTimestamp
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByTimestampParameters The parameters to refresh a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbByTimestampCall(String vdbId, RefreshVDBByTimestampParameters refreshVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshVDBByTimestampParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/refresh_by_timestamp"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshVdbByTimestampValidateBeforeCall(String vdbId, RefreshVDBByTimestampParameters refreshVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling refreshVdbByTimestamp(Async)");
        }

        return refreshVdbByTimestampCall(vdbId, refreshVDBByTimestampParameters, _callback);

    }

    /**
     * Refresh a VDB by timestamp.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByTimestampParameters The parameters to refresh a VDB. (optional)
     * @return RefreshVDBByTimestampResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshVDBByTimestampResponse refreshVdbByTimestamp(String vdbId, RefreshVDBByTimestampParameters refreshVDBByTimestampParameters) throws ApiException {
        ApiResponse<RefreshVDBByTimestampResponse> localVarResp = refreshVdbByTimestampWithHttpInfo(vdbId, refreshVDBByTimestampParameters);
        return localVarResp.getData();
    }

    /**
     * Refresh a VDB by timestamp.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByTimestampParameters The parameters to refresh a VDB. (optional)
     * @return ApiResponse&lt;RefreshVDBByTimestampResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshVDBByTimestampResponse> refreshVdbByTimestampWithHttpInfo(String vdbId, RefreshVDBByTimestampParameters refreshVDBByTimestampParameters) throws ApiException {
        okhttp3.Call localVarCall = refreshVdbByTimestampValidateBeforeCall(vdbId, refreshVDBByTimestampParameters, null);
        Type localVarReturnType = new TypeToken<RefreshVDBByTimestampResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a VDB by timestamp. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBByTimestampParameters The parameters to refresh a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbByTimestampAsync(String vdbId, RefreshVDBByTimestampParameters refreshVDBByTimestampParameters, final ApiCallback<RefreshVDBByTimestampResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshVdbByTimestampValidateBeforeCall(vdbId, refreshVDBByTimestampParameters, _callback);
        Type localVarReturnType = new TypeToken<RefreshVDBByTimestampResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshVdbFromBookmark
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBFromBookmarkParameters The parameters to refresh a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbFromBookmarkCall(String vdbId, RefreshVDBFromBookmarkParameters refreshVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = refreshVDBFromBookmarkParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/refresh_from_bookmark"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshVdbFromBookmarkValidateBeforeCall(String vdbId, RefreshVDBFromBookmarkParameters refreshVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling refreshVdbFromBookmark(Async)");
        }

        return refreshVdbFromBookmarkCall(vdbId, refreshVDBFromBookmarkParameters, _callback);

    }

    /**
     * Refresh a VDB from bookmark with a single VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBFromBookmarkParameters The parameters to refresh a VDB. (optional)
     * @return RefreshVDBFromBookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshVDBFromBookmarkResponse refreshVdbFromBookmark(String vdbId, RefreshVDBFromBookmarkParameters refreshVDBFromBookmarkParameters) throws ApiException {
        ApiResponse<RefreshVDBFromBookmarkResponse> localVarResp = refreshVdbFromBookmarkWithHttpInfo(vdbId, refreshVDBFromBookmarkParameters);
        return localVarResp.getData();
    }

    /**
     * Refresh a VDB from bookmark with a single VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBFromBookmarkParameters The parameters to refresh a VDB. (optional)
     * @return ApiResponse&lt;RefreshVDBFromBookmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshVDBFromBookmarkResponse> refreshVdbFromBookmarkWithHttpInfo(String vdbId, RefreshVDBFromBookmarkParameters refreshVDBFromBookmarkParameters) throws ApiException {
        okhttp3.Call localVarCall = refreshVdbFromBookmarkValidateBeforeCall(vdbId, refreshVDBFromBookmarkParameters, null);
        Type localVarReturnType = new TypeToken<RefreshVDBFromBookmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Refresh a VDB from bookmark with a single VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param refreshVDBFromBookmarkParameters The parameters to refresh a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB refresh initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshVdbFromBookmarkAsync(String vdbId, RefreshVDBFromBookmarkParameters refreshVDBFromBookmarkParameters, final ApiCallback<RefreshVDBFromBookmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshVdbFromBookmarkValidateBeforeCall(vdbId, refreshVDBFromBookmarkParameters, _callback);
        Type localVarReturnType = new TypeToken<RefreshVDBFromBookmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackVdbBySnapshot
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBBySnapshotParameters The parameters to rollback a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbBySnapshotCall(String vdbId, RollbackVDBBySnapshotParameters rollbackVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackVDBBySnapshotParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/rollback_by_snapshot"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackVdbBySnapshotValidateBeforeCall(String vdbId, RollbackVDBBySnapshotParameters rollbackVDBBySnapshotParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling rollbackVdbBySnapshot(Async)");
        }

        return rollbackVdbBySnapshotCall(vdbId, rollbackVDBBySnapshotParameters, _callback);

    }

    /**
     * Rollback a VDB by snapshot.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBBySnapshotParameters The parameters to rollback a VDB. (optional)
     * @return RollbackVDBBySnapshotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RollbackVDBBySnapshotResponse rollbackVdbBySnapshot(String vdbId, RollbackVDBBySnapshotParameters rollbackVDBBySnapshotParameters) throws ApiException {
        ApiResponse<RollbackVDBBySnapshotResponse> localVarResp = rollbackVdbBySnapshotWithHttpInfo(vdbId, rollbackVDBBySnapshotParameters);
        return localVarResp.getData();
    }

    /**
     * Rollback a VDB by snapshot.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBBySnapshotParameters The parameters to rollback a VDB. (optional)
     * @return ApiResponse&lt;RollbackVDBBySnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RollbackVDBBySnapshotResponse> rollbackVdbBySnapshotWithHttpInfo(String vdbId, RollbackVDBBySnapshotParameters rollbackVDBBySnapshotParameters) throws ApiException {
        okhttp3.Call localVarCall = rollbackVdbBySnapshotValidateBeforeCall(vdbId, rollbackVDBBySnapshotParameters, null);
        Type localVarReturnType = new TypeToken<RollbackVDBBySnapshotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a VDB by snapshot. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBBySnapshotParameters The parameters to rollback a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbBySnapshotAsync(String vdbId, RollbackVDBBySnapshotParameters rollbackVDBBySnapshotParameters, final ApiCallback<RollbackVDBBySnapshotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackVdbBySnapshotValidateBeforeCall(vdbId, rollbackVDBBySnapshotParameters, _callback);
        Type localVarReturnType = new TypeToken<RollbackVDBBySnapshotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackVdbByTimestamp
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBByTimestampParameters The parameters to rollback a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbByTimestampCall(String vdbId, RollbackVDBByTimestampParameters rollbackVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackVDBByTimestampParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/rollback_by_timestamp"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackVdbByTimestampValidateBeforeCall(String vdbId, RollbackVDBByTimestampParameters rollbackVDBByTimestampParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling rollbackVdbByTimestamp(Async)");
        }

        return rollbackVdbByTimestampCall(vdbId, rollbackVDBByTimestampParameters, _callback);

    }

    /**
     * Rollback a VDB by timestamp.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBByTimestampParameters The parameters to rollback a VDB. (optional)
     * @return RollbackVDBByTimestampResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RollbackVDBByTimestampResponse rollbackVdbByTimestamp(String vdbId, RollbackVDBByTimestampParameters rollbackVDBByTimestampParameters) throws ApiException {
        ApiResponse<RollbackVDBByTimestampResponse> localVarResp = rollbackVdbByTimestampWithHttpInfo(vdbId, rollbackVDBByTimestampParameters);
        return localVarResp.getData();
    }

    /**
     * Rollback a VDB by timestamp.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBByTimestampParameters The parameters to rollback a VDB. (optional)
     * @return ApiResponse&lt;RollbackVDBByTimestampResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RollbackVDBByTimestampResponse> rollbackVdbByTimestampWithHttpInfo(String vdbId, RollbackVDBByTimestampParameters rollbackVDBByTimestampParameters) throws ApiException {
        okhttp3.Call localVarCall = rollbackVdbByTimestampValidateBeforeCall(vdbId, rollbackVDBByTimestampParameters, null);
        Type localVarReturnType = new TypeToken<RollbackVDBByTimestampResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a VDB by timestamp. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBByTimestampParameters The parameters to rollback a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbByTimestampAsync(String vdbId, RollbackVDBByTimestampParameters rollbackVDBByTimestampParameters, final ApiCallback<RollbackVDBByTimestampResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackVdbByTimestampValidateBeforeCall(vdbId, rollbackVDBByTimestampParameters, _callback);
        Type localVarReturnType = new TypeToken<RollbackVDBByTimestampResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackVdbFromBookmark
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBFromBookmarkParameters The parameters to rollback a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbFromBookmarkCall(String vdbId, RollbackVDBFromBookmarkParameters rollbackVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackVDBFromBookmarkParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/rollback_from_bookmark"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackVdbFromBookmarkValidateBeforeCall(String vdbId, RollbackVDBFromBookmarkParameters rollbackVDBFromBookmarkParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling rollbackVdbFromBookmark(Async)");
        }

        return rollbackVdbFromBookmarkCall(vdbId, rollbackVDBFromBookmarkParameters, _callback);

    }

    /**
     * Rollback a VDB from a bookmark with only the same VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBFromBookmarkParameters The parameters to rollback a VDB. (optional)
     * @return RollbackVDBFromBookmarkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RollbackVDBFromBookmarkResponse rollbackVdbFromBookmark(String vdbId, RollbackVDBFromBookmarkParameters rollbackVDBFromBookmarkParameters) throws ApiException {
        ApiResponse<RollbackVDBFromBookmarkResponse> localVarResp = rollbackVdbFromBookmarkWithHttpInfo(vdbId, rollbackVDBFromBookmarkParameters);
        return localVarResp.getData();
    }

    /**
     * Rollback a VDB from a bookmark with only the same VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBFromBookmarkParameters The parameters to rollback a VDB. (optional)
     * @return ApiResponse&lt;RollbackVDBFromBookmarkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RollbackVDBFromBookmarkResponse> rollbackVdbFromBookmarkWithHttpInfo(String vdbId, RollbackVDBFromBookmarkParameters rollbackVDBFromBookmarkParameters) throws ApiException {
        okhttp3.Call localVarCall = rollbackVdbFromBookmarkValidateBeforeCall(vdbId, rollbackVDBFromBookmarkParameters, null);
        Type localVarReturnType = new TypeToken<RollbackVDBFromBookmarkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rollback a VDB from a bookmark with only the same VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param rollbackVDBFromBookmarkParameters The parameters to rollback a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB rollback initiated. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rollbackVdbFromBookmarkAsync(String vdbId, RollbackVDBFromBookmarkParameters rollbackVDBFromBookmarkParameters, final ApiCallback<RollbackVDBFromBookmarkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackVdbFromBookmarkValidateBeforeCall(vdbId, rollbackVDBFromBookmarkParameters, _callback);
        Type localVarReturnType = new TypeToken<RollbackVDBFromBookmarkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchBookmarksByVdb
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBookmarksByVdbCall(String vdbId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/bookmarks/search"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBookmarksByVdbValidateBeforeCall(String vdbId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling searchBookmarksByVdb(Async)");
        }

        return searchBookmarksByVdbCall(vdbId, limit, cursor, sort, searchBody, _callback);

    }

    /**
     * Search Bookmarks compatible with this VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchBookmarksByVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchBookmarksByVDBResponse searchBookmarksByVdb(String vdbId, Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchBookmarksByVDBResponse> localVarResp = searchBookmarksByVdbWithHttpInfo(vdbId, limit, cursor, sort, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search Bookmarks compatible with this VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchBookmarksByVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchBookmarksByVDBResponse> searchBookmarksByVdbWithHttpInfo(String vdbId, Integer limit, String cursor, String sort, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchBookmarksByVdbValidateBeforeCall(vdbId, limit, cursor, sort, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchBookmarksByVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Bookmarks compatible with this VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBookmarksByVdbAsync(String vdbId, Integer limit, String cursor, String sort, SearchBody searchBody, final ApiCallback<SearchBookmarksByVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBookmarksByVdbValidateBeforeCall(vdbId, limit, cursor, sort, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchBookmarksByVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVdbs
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVdbsCall(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchBody;

        // create path and map variables
        String localVarPath = "/vdbs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (permission != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("permission", permission));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVdbsValidateBeforeCall(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback _callback) throws ApiException {
        return searchVdbsCall(limit, cursor, sort, permission, searchBody, _callback);

    }

    /**
     * Search for VDBs.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return SearchVDBsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchVDBsResponse searchVdbs(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody) throws ApiException {
        ApiResponse<SearchVDBsResponse> localVarResp = searchVdbsWithHttpInfo(limit, cursor, sort, permission, searchBody);
        return localVarResp.getData();
    }

    /**
     * Search for VDBs.
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @return ApiResponse&lt;SearchVDBsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchVDBsResponse> searchVdbsWithHttpInfo(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody) throws ApiException {
        okhttp3.Call localVarCall = searchVdbsValidateBeforeCall(limit, cursor, sort, permission, searchBody, null);
        Type localVarReturnType = new TypeToken<SearchVDBsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for VDBs. (asynchronously)
     * 
     * @param limit Maximum number of objects to return per query. The value must be between 1 and 1000. Default is 100. (optional, default to 100)
     * @param cursor Cursor to fetch the next or previous page of results. The value of this property must be extracted from the &#39;prev_cursor&#39; or &#39;next_cursor&#39; property of a PaginatedResponseMetadata which is contained in the response of list and search API endpoints. (optional)
     * @param sort The field to sort results by. A property name with a prepended &#39;-&#39; signifies descending order. (optional)
     * @param permission Restrict the objects, which are allowed. (optional)
     * @param searchBody A request body containing a filter expression. This enables searching for items matching arbitrarily complex conditions. The list of attributes which can be used in filter expressions is available in the x-filterable vendor extension.  # Filter Expression Overview **Note: All keywords are case-insensitive**  ## Comparison Operators | Operator | Description | Example | | --- | --- | --- | | CONTAINS | Substring or membership testing for string and list attributes respectively. | field3 CONTAINS &#39;foobar&#39;, field4 CONTAINS TRUE  | | IN | Tests if field is a member of a list literal. List can contain a maximum of 100 values | field2 IN [&#39;Goku&#39;, &#39;Vegeta&#39;] | | GE | Tests if a field is greater than or equal to a literal value | field1 GE 1.2e-2 | | GT | Tests if a field is greater than a literal value | field1 GT 1.2e-2 | | LE | Tests if a field is less than or equal to a literal value | field1 LE 9000 | | LT | Tests if a field is less than a literal value | field1 LT 9.02 | | NE | Tests if a field is not equal to a literal value | field1 NE 42 | | EQ | Tests if a field is equal to a literal value | field1 EQ 42 |  ## Search Operator The SEARCH operator filters for items which have any filterable attribute that contains the input string as a substring, comparison is done case-insensitively. This is not restricted to attributes with string values. Specifically &#x60;SEARCH &#39;12&#39;&#x60; would match an item with an attribute with an integer value of &#x60;123&#x60;.  ## Logical Operators Ordered by precedence. | Operator | Description | Example | | --- | --- | --- | | NOT | Logical NOT (Right associative) | NOT field1 LE 9000 | | AND | Logical AND (Left Associative) | field1 GT 9000 AND field2 EQ &#39;Goku&#39; | | OR | Logical OR (Left Associative) | field1 GT 9000 OR field2 EQ &#39;Goku&#39; |  ## Grouping Parenthesis &#x60;()&#x60; can be used to override operator precedence.  For example: NOT (field1 LT 1234 AND field2 CONTAINS &#39;foo&#39;)  ## Literal Values | Literal      | Description | Examples | | --- | --- | --- | | Nil | Represents the absence of a value | nil, Nil, nIl, NIL | | Boolean | true/false boolean | true, false, True, False, TRUE, FALSE | | Number | Signed integer and floating point numbers. Also supports scientific notation. | 0, 1, -1, 1.2, 0.35, 1.2e-2, -1.2e+2 | | String | Single or double quoted | \&quot;foo\&quot;, \&quot;bar\&quot;, \&quot;foo bar\&quot;, &#39;foo&#39;, &#39;bar&#39;, &#39;foo bar&#39; | | Datetime | Formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339) | 2018-04-27T18:39:26.397237+00:00 | | List | Comma-separated literals wrapped in square brackets | [0], [0, 1], [&#39;foo&#39;, \&quot;bar\&quot;] |  ## Limitations - A maximum of 8 unique identifiers may be used inside a filter expression.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVdbsAsync(Integer limit, String cursor, String sort, PermissionEnum permission, SearchBody searchBody, final ApiCallback<SearchVDBsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVdbsValidateBeforeCall(limit, cursor, sort, permission, searchBody, _callback);
        Type localVarReturnType = new TypeToken<SearchVDBsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotVdb
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotVdbCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/snapshots"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotVdbValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling snapshotVdb(Async)");
        }

        return snapshotVdbCall(vdbId, _callback);

    }

    /**
     * Snapshot a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return SnapshotVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotVDBResponse snapshotVdb(String vdbId) throws ApiException {
        ApiResponse<SnapshotVDBResponse> localVarResp = snapshotVdbWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Snapshot a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;SnapshotVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotVDBResponse> snapshotVdbWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = snapshotVdbValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<SnapshotVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Snapshot a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB snapshot initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotVdbAsync(String vdbId, final ApiCallback<SnapshotVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotVdbValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<SnapshotVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startVdb
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB start initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVdbCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/start"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startVdbValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling startVdb(Async)");
        }

        return startVdbCall(vdbId, _callback);

    }

    /**
     * Start a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return StartVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB start initiated. </td><td>  -  </td></tr>
     </table>
     */
    public StartVDBResponse startVdb(String vdbId) throws ApiException {
        ApiResponse<StartVDBResponse> localVarResp = startVdbWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Start a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;StartVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB start initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartVDBResponse> startVdbWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = startVdbValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<StartVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB start initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startVdbAsync(String vdbId, final ApiCallback<StartVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startVdbValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<StartVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopVdb
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB stop initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopVdbCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/stop"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopVdbValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling stopVdb(Async)");
        }

        return stopVdbCall(vdbId, _callback);

    }

    /**
     * Stop a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return StopVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB stop initiated. </td><td>  -  </td></tr>
     </table>
     */
    public StopVDBResponse stopVdb(String vdbId) throws ApiException {
        ApiResponse<StopVDBResponse> localVarResp = stopVdbWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Stop a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;StopVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB stop initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopVDBResponse> stopVdbWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = stopVdbValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<StopVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB stop initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopVdbAsync(String vdbId, final ApiCallback<StopVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopVdbValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<StopVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for switchTimeflow
     * @param vdbId The ID of the VDB. (required)
     * @param switchTimeflowParameters The parameters to switch the timeflow of a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switch timeflow initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call switchTimeflowCall(String vdbId, SwitchTimeflowParameters switchTimeflowParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = switchTimeflowParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/switch_timeflow"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call switchTimeflowValidateBeforeCall(String vdbId, SwitchTimeflowParameters switchTimeflowParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling switchTimeflow(Async)");
        }

        return switchTimeflowCall(vdbId, switchTimeflowParameters, _callback);

    }

    /**
     * Switches the current timeflow of a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param switchTimeflowParameters The parameters to switch the timeflow of a VDB. (optional)
     * @return SwitchTimeflowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switch timeflow initiated. </td><td>  -  </td></tr>
     </table>
     */
    public SwitchTimeflowResponse switchTimeflow(String vdbId, SwitchTimeflowParameters switchTimeflowParameters) throws ApiException {
        ApiResponse<SwitchTimeflowResponse> localVarResp = switchTimeflowWithHttpInfo(vdbId, switchTimeflowParameters);
        return localVarResp.getData();
    }

    /**
     * Switches the current timeflow of a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param switchTimeflowParameters The parameters to switch the timeflow of a VDB. (optional)
     * @return ApiResponse&lt;SwitchTimeflowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switch timeflow initiated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwitchTimeflowResponse> switchTimeflowWithHttpInfo(String vdbId, SwitchTimeflowParameters switchTimeflowParameters) throws ApiException {
        okhttp3.Call localVarCall = switchTimeflowValidateBeforeCall(vdbId, switchTimeflowParameters, null);
        Type localVarReturnType = new TypeToken<SwitchTimeflowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Switches the current timeflow of a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param switchTimeflowParameters The parameters to switch the timeflow of a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Switch timeflow initiated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call switchTimeflowAsync(String vdbId, SwitchTimeflowParameters switchTimeflowParameters, final ApiCallback<SwitchTimeflowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = switchTimeflowValidateBeforeCall(vdbId, switchTimeflowParameters, _callback);
        Type localVarReturnType = new TypeToken<SwitchTimeflowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockVdb
     * @param vdbId The ID of the VDB. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is unlocked. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockVdbCall(String vdbId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}/unlock"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockVdbValidateBeforeCall(String vdbId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling unlockVdb(Async)");
        }

        return unlockVdbCall(vdbId, _callback);

    }

    /**
     * Unlock a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return VDB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is unlocked. </td><td>  -  </td></tr>
     </table>
     */
    public VDB unlockVdb(String vdbId) throws ApiException {
        ApiResponse<VDB> localVarResp = unlockVdbWithHttpInfo(vdbId);
        return localVarResp.getData();
    }

    /**
     * Unlock a VDB.
     * 
     * @param vdbId The ID of the VDB. (required)
     * @return ApiResponse&lt;VDB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is unlocked. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VDB> unlockVdbWithHttpInfo(String vdbId) throws ApiException {
        okhttp3.Call localVarCall = unlockVdbValidateBeforeCall(vdbId, null);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlock a VDB. (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> VDB is unlocked. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockVdbAsync(String vdbId, final ApiCallback<VDB> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockVdbValidateBeforeCall(vdbId, _callback);
        Type localVarReturnType = new TypeToken<VDB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVdbById
     * @param vdbId The ID of the VDB. (required)
     * @param updateVDBParameters The new data to update a VDB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVdbByIdCall(String vdbId, UpdateVDBParameters updateVDBParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVDBParameters;

        // create path and map variables
        String localVarPath = "/vdbs/{vdbId}"
            .replace("{" + "vdbId" + "}", localVarApiClient.escapeString(vdbId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVdbByIdValidateBeforeCall(String vdbId, UpdateVDBParameters updateVDBParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vdbId' is set
        if (vdbId == null) {
            throw new ApiException("Missing the required parameter 'vdbId' when calling updateVdbById(Async)");
        }

        return updateVdbByIdCall(vdbId, updateVDBParameters, _callback);

    }

    /**
     * Update values of a VDB
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param updateVDBParameters The new data to update a VDB. (optional)
     * @return UpdateVDBResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVDBResponse updateVdbById(String vdbId, UpdateVDBParameters updateVDBParameters) throws ApiException {
        ApiResponse<UpdateVDBResponse> localVarResp = updateVdbByIdWithHttpInfo(vdbId, updateVDBParameters);
        return localVarResp.getData();
    }

    /**
     * Update values of a VDB
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param updateVDBParameters The new data to update a VDB. (optional)
     * @return ApiResponse&lt;UpdateVDBResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVDBResponse> updateVdbByIdWithHttpInfo(String vdbId, UpdateVDBParameters updateVDBParameters) throws ApiException {
        okhttp3.Call localVarCall = updateVdbByIdValidateBeforeCall(vdbId, updateVDBParameters, null);
        Type localVarReturnType = new TypeToken<UpdateVDBResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update values of a VDB (asynchronously)
     * 
     * @param vdbId The ID of the VDB. (required)
     * @param updateVDBParameters The new data to update a VDB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVdbByIdAsync(String vdbId, UpdateVDBParameters updateVDBParameters, final ApiCallback<UpdateVDBResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVdbByIdValidateBeforeCall(vdbId, updateVDBParameters, _callback);
        Type localVarReturnType = new TypeToken<UpdateVDBResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
