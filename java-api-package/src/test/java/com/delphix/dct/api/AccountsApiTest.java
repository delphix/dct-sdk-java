/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.Account;
import com.delphix.dct.models.AccountCreateParameter;
import com.delphix.dct.models.AccountCreateResponse;
import com.delphix.dct.models.AccountUpdateParameter;
import com.delphix.dct.models.ChangePasswordParameter;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListAccountsResponse;
import com.delphix.dct.models.PasswordPoliciesParams;
import com.delphix.dct.models.ResetPasswordParameter;
import com.delphix.dct.models.SearchAccountsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Change Account Password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeAccountPasswordTest() throws ApiException {
        Long id = null;
        ChangePasswordParameter changePasswordParameter = null;
        api.changeAccountPassword(id, changePasswordParameter);
        // TODO: test validations
    }

    /**
     * Create a new Account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTest() throws ApiException {
        AccountCreateParameter accountCreateParameter = null;
        AccountCreateResponse response = api.createAccount(accountCreateParameter);
        // TODO: test validations
    }

    /**
     * Create tags for an Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountTagsTest() throws ApiException {
        Long id = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createAccountTags(id, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        Long id = null;
        api.deleteAccount(id);
        // TODO: test validations
    }

    /**
     * Delete tags for an Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTagsTest() throws ApiException {
        Long id = null;
        DeleteTag deleteTag = null;
        api.deleteAccountTags(id, deleteTag);
        // TODO: test validations
    }

    /**
     * Disable an Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableTest() throws ApiException {
        Long id = null;
        api.disable(id);
        // TODO: test validations
    }

    /**
     * Enable an Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableAccountTest() throws ApiException {
        Long id = null;
        api.enableAccount(id);
        // TODO: test validations
    }

    /**
     * Get an Account by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        Long id = null;
        Account response = api.getAccount(id);
        // TODO: test validations
    }

    /**
     * Get tags for an Account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTagsTest() throws ApiException {
        Long id = null;
        TagsResponse response = api.getAccountTags(id);
        // TODO: test validations
    }

    /**
     * Returns a list of Accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListAccountsResponse response = api.getAccounts(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Returns the password policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPasswordPoliciesTest() throws ApiException {
        PasswordPoliciesParams response = api.getPasswordPolicies();
        // TODO: test validations
    }

    /**
     * Reset Account Password. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetAccountPasswordTest() throws ApiException {
        Long id = null;
        ResetPasswordParameter resetPasswordParameter = null;
        api.resetAccountPassword(id, resetPasswordParameter);
        // TODO: test validations
    }

    /**
     * Search for Accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAccountsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchAccountsResponse response = api.searchAccounts(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update an Account 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        Long id = null;
        AccountUpdateParameter accountUpdateParameter = null;
        Account response = api.updateAccount(id, accountUpdateParameter);
        // TODO: test validations
    }

    /**
     * Update password policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePasswordPoliciesTest() throws ApiException {
        PasswordPoliciesParams passwordPoliciesParams = null;
        PasswordPoliciesParams response = api.updatePasswordPolicies(passwordPoliciesParams);
        // TODO: test validations
    }

}
