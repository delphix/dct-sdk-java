/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.BookmarkCompatibleEnvironmentsResponse;
import com.delphix.dct.models.BookmarkCompatibleRepositoryRequest;
import com.delphix.dct.models.CreateEnvironmentResponse;
import com.delphix.dct.models.CreateEnvironmentUserResponse;
import com.delphix.dct.models.CreateHostResponse;
import com.delphix.dct.models.DeleteEnvironmentResponse;
import com.delphix.dct.models.DeleteEnvironmentUserResponse;
import com.delphix.dct.models.DeleteHostResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.DisableEnvironmentResponse;
import com.delphix.dct.models.EnableEnvironmentResponse;
import com.delphix.dct.models.Environment;
import com.delphix.dct.models.EnvironmentCreateParameters;
import com.delphix.dct.models.EnvironmentUpdateParameters;
import com.delphix.dct.models.EnvironmentUserParams;
import com.delphix.dct.models.HostCreateParameters;
import com.delphix.dct.models.HostUpdateParameters;
import com.delphix.dct.models.ListEnvironmentUsers;
import com.delphix.dct.models.ListEnvironmentsResponse;
import com.delphix.dct.models.LocationCompatibleEnvironmentsResponse;
import com.delphix.dct.models.LocationCompatibleRepositoryRequest;
import com.delphix.dct.models.PrimaryEnvironmentUserResponse;
import com.delphix.dct.models.RefreshEnvironmentResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchEnvironmentsResponse;
import com.delphix.dct.models.SnapshotCompatibleEnvironmentsResponse;
import com.delphix.dct.models.SnapshotCompatibleRepositoryRequest;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.TimestampCompatibleEnvironmentsResponse;
import com.delphix.dct.models.TimestampCompatibleRepositoryRequest;
import com.delphix.dct.models.UpdateEnvironmentResponse;
import com.delphix.dct.models.UpdateEnvironmentUserResponse;
import com.delphix.dct.models.UpdateHostResponse;
import com.delphix.dct.models.UpdateRepositoryParameters;
import com.delphix.dct.models.UpdateRepositoryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnvironmentsApi
 */
@Disabled
public class EnvironmentsApiTest {

    private final EnvironmentsApi api = new EnvironmentsApi();

    /**
     * Get compatible repositories corresponding to the location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compatibleRepositoriesByLocationTest() throws ApiException {
        LocationCompatibleRepositoryRequest locationCompatibleRepositoryRequest = null;
        LocationCompatibleEnvironmentsResponse response = api.compatibleRepositoriesByLocation(locationCompatibleRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Get compatible repositories corresponding to the snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compatibleRepositoriesBySnapshotTest() throws ApiException {
        SnapshotCompatibleRepositoryRequest snapshotCompatibleRepositoryRequest = null;
        SnapshotCompatibleEnvironmentsResponse response = api.compatibleRepositoriesBySnapshot(snapshotCompatibleRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Get compatible repositories corresponding to the timestamp.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compatibleRepositoriesByTimestampTest() throws ApiException {
        TimestampCompatibleRepositoryRequest timestampCompatibleRepositoryRequest = null;
        TimestampCompatibleEnvironmentsResponse response = api.compatibleRepositoriesByTimestamp(timestampCompatibleRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Get compatible repositories corresponding to the bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void compatibleRepositoriesFromBookmarkTest() throws ApiException {
        BookmarkCompatibleRepositoryRequest bookmarkCompatibleRepositoryRequest = null;
        BookmarkCompatibleEnvironmentsResponse response = api.compatibleRepositoriesFromBookmark(bookmarkCompatibleRepositoryRequest);
        // TODO: test validations
    }

    /**
     * Create an environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentTest() throws ApiException {
        EnvironmentCreateParameters environmentCreateParameters = null;
        CreateEnvironmentResponse response = api.createEnvironment(environmentCreateParameters);
        // TODO: test validations
    }

    /**
     * Create tags for an Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentTagsTest() throws ApiException {
        String environmentId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createEnvironmentTags(environmentId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Create environment user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentUserTest() throws ApiException {
        String environmentId = null;
        EnvironmentUserParams environmentUserParams = null;
        CreateEnvironmentUserResponse response = api.createEnvironmentUser(environmentId, environmentUserParams);
        // TODO: test validations
    }

    /**
     * Create a new Host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHostTest() throws ApiException {
        String environmentId = null;
        HostCreateParameters hostCreateParameters = null;
        CreateHostResponse response = api.createHost(environmentId, hostCreateParameters);
        // TODO: test validations
    }

    /**
     * Delete an environment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentTest() throws ApiException {
        String environmentId = null;
        DeleteEnvironmentResponse response = api.deleteEnvironment(environmentId);
        // TODO: test validations
    }

    /**
     * Delete tags for an Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentTagsTest() throws ApiException {
        String environmentId = null;
        DeleteTag deleteTag = null;
        api.deleteEnvironmentTags(environmentId, deleteTag);
        // TODO: test validations
    }

    /**
     * Delete environment user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentUserTest() throws ApiException {
        String environmentId = null;
        String userRef = null;
        DeleteEnvironmentUserResponse response = api.deleteEnvironmentUser(environmentId, userRef);
        // TODO: test validations
    }

    /**
     * Delete a Host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHostTest() throws ApiException {
        String environmentId = null;
        String hostId = null;
        DeleteHostResponse response = api.deleteHost(environmentId, hostId);
        // TODO: test validations
    }

    /**
     * Disable environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableEnvironmentTest() throws ApiException {
        String environmentId = null;
        DisableEnvironmentResponse response = api.disableEnvironment(environmentId);
        // TODO: test validations
    }

    /**
     * Enable a disabled environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableEnvironmentTest() throws ApiException {
        String environmentId = null;
        EnableEnvironmentResponse response = api.enableEnvironment(environmentId);
        // TODO: test validations
    }

    /**
     * Returns an environment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvironmentByIdTest() throws ApiException {
        String environmentId = null;
        Environment response = api.getEnvironmentById(environmentId);
        // TODO: test validations
    }

    /**
     * List all environments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvironmentsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListEnvironmentsResponse response = api.getEnvironments(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Get tags for an Environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsEnvironmentTest() throws ApiException {
        String environmentId = null;
        TagsResponse response = api.getTagsEnvironment(environmentId);
        // TODO: test validations
    }

    /**
     * List environment users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnvironmentUsersTest() throws ApiException {
        String environmentId = null;
        ListEnvironmentUsers response = api.listEnvironmentUsers(environmentId);
        // TODO: test validations
    }

    /**
     * Set primary environment user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void primaryEnvironmentUserTest() throws ApiException {
        String environmentId = null;
        String userRef = null;
        PrimaryEnvironmentUserResponse response = api.primaryEnvironmentUser(environmentId, userRef);
        // TODO: test validations
    }

    /**
     * Refresh environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshEnvironmentTest() throws ApiException {
        String environmentId = null;
        RefreshEnvironmentResponse response = api.refreshEnvironment(environmentId);
        // TODO: test validations
    }

    /**
     * Search for environments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchEnvironmentsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchEnvironmentsResponse response = api.searchEnvironments(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update an environment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentTest() throws ApiException {
        String environmentId = null;
        EnvironmentUpdateParameters environmentUpdateParameters = null;
        UpdateEnvironmentResponse response = api.updateEnvironment(environmentId, environmentUpdateParameters);
        // TODO: test validations
    }

    /**
     * Update environment user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentUserTest() throws ApiException {
        String environmentId = null;
        String userRef = null;
        EnvironmentUserParams environmentUserParams = null;
        UpdateEnvironmentUserResponse response = api.updateEnvironmentUser(environmentId, userRef, environmentUserParams);
        // TODO: test validations
    }

    /**
     * Update a Host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHostTest() throws ApiException {
        String environmentId = null;
        String hostId = null;
        HostUpdateParameters hostUpdateParameters = null;
        UpdateHostResponse response = api.updateHost(environmentId, hostId, hostUpdateParameters);
        // TODO: test validations
    }

    /**
     * Update a Repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryTest() throws ApiException {
        String environmentId = null;
        String repositoryId = null;
        UpdateRepositoryParameters updateRepositoryParameters = null;
        UpdateRepositoryResponse response = api.updateRepository(environmentId, repositoryId, updateRepositoryParameters);
        // TODO: test validations
    }

}
