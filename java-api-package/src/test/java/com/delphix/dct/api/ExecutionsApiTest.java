/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.CleanupExecutionResponse;
import com.delphix.dct.models.Execution;
import com.delphix.dct.models.ExecutionCancelParameters;
import com.delphix.dct.models.ExecutionLog;
import com.delphix.dct.models.ListExecutionEventsResponse;
import com.delphix.dct.models.ListExecutionsResponse;
import com.delphix.dct.models.RestartExecutionResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchExecutionEventsResponse;
import com.delphix.dct.models.SearchExecutionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExecutionsApi
 */
@Disabled
public class ExecutionsApiTest {

    private final ExecutionsApi api = new ExecutionsApi();

    /**
     * Cancel an Execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelExecutionTest() throws ApiException {
        String executionId = null;
        ExecutionCancelParameters executionCancelParameters = null;
        api.cancelExecution(executionId, executionCancelParameters);
        // TODO: test validations
    }

    /**
     * Cleanup an Execution (Hyperscale only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cleanupExecutionTest() throws ApiException {
        String executionId = null;
        CleanupExecutionResponse response = api.cleanupExecution(executionId);
        // TODO: test validations
    }

    /**
     * Retrieve an Execution by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExecutionByIdTest() throws ApiException {
        String executionId = null;
        Execution response = api.getExecutionById(executionId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of events for a masking execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExecutionEventsTest() throws ApiException {
        String executionId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListExecutionEventsResponse response = api.getExecutionEvents(executionId, limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Retrieve the masking execution log.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExecutionLogTest() throws ApiException {
        String executionId = null;
        ExecutionLog response = api.getExecutionLog(executionId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of masking executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExecutionsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListExecutionsResponse response = api.getExecutions(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Restart an Execution (Hyperscale only).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restartExecutionTest() throws ApiException {
        String executionId = null;
        RestartExecutionResponse response = api.restartExecution(executionId);
        // TODO: test validations
    }

    /**
     * Search masking executions events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchExecutionEventsTest() throws ApiException {
        String executionId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchExecutionEventsResponse response = api.searchExecutionEvents(executionId, limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search masking executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchExecutionsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchExecutionsResponse response = api.searchExecutions(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

}
