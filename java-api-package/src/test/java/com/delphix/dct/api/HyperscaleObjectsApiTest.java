/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.CreateHyperscaleConnectorResponse;
import com.delphix.dct.models.CreateHyperscaleMountPointResponse;
import com.delphix.dct.models.DeleteHyperscaleConnectorResponse;
import com.delphix.dct.models.DeleteHyperscaleMountPointResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.HyperscaleConnector;
import com.delphix.dct.models.HyperscaleConnectorCreateParameters;
import com.delphix.dct.models.HyperscaleConnectorUpdateParameters;
import com.delphix.dct.models.HyperscaleDataset;
import com.delphix.dct.models.HyperscaleDatasetTableOrFile;
import com.delphix.dct.models.HyperscaleDatasetTableOrFileUpdateParameters;
import com.delphix.dct.models.HyperscaleDatasetUpdateParameters;
import com.delphix.dct.models.HyperscaleMountPoint;
import com.delphix.dct.models.HyperscaleMountPointUpdateParameters;
import com.delphix.dct.models.ListHyperscaleConnectorsResponse;
import com.delphix.dct.models.ListHyperscaleDatasetTablesOrFilesResponse;
import com.delphix.dct.models.ListHyperscaleDatasetsResponse;
import com.delphix.dct.models.ListHyperscaleMountPointsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchHyperscaleConnectorsResponse;
import com.delphix.dct.models.SearchHyperscaleDatasetTablesOrFilesResponse;
import com.delphix.dct.models.SearchHyperscaleDatasetsResponse;
import com.delphix.dct.models.SearchHyperscaleMountPointsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateHyperscaleConnectorResponse;
import com.delphix.dct.models.UpdateHyperscaleDatasetResponse;
import com.delphix.dct.models.UpdateHyperscaleDatasetTableOrFileResponse;
import com.delphix.dct.models.UpdateHyperscaleMountPointResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HyperscaleObjectsApi
 */
@Disabled
public class HyperscaleObjectsApiTest {

    private final HyperscaleObjectsApi api = new HyperscaleObjectsApi();

    /**
     * Create a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHyperscaleConnectorTest() throws ApiException {
        HyperscaleConnectorCreateParameters hyperscaleConnectorCreateParameters = null;
        CreateHyperscaleConnectorResponse response = api.createHyperscaleConnector(hyperscaleConnectorCreateParameters);
        // TODO: test validations
    }

    /**
     * Create tags for a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHyperscaleConnectorTagsTest() throws ApiException {
        String hyperscaleConnectorId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createHyperscaleConnectorTags(hyperscaleConnectorId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Create tags for a Hyperscale Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHyperscaleDatasetTagsTest() throws ApiException {
        String hyperscaleDatasetId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createHyperscaleDatasetTags(hyperscaleDatasetId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Create a Hyperscale Mount Point
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHyperscaleMountPointTest() throws ApiException {
        HyperscaleMountPoint hyperscaleMountPoint = null;
        CreateHyperscaleMountPointResponse response = api.createHyperscaleMountPoint(hyperscaleMountPoint);
        // TODO: test validations
    }

    /**
     * Delete a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHyperscaleConnectorTest() throws ApiException {
        String hyperscaleConnectorId = null;
        DeleteHyperscaleConnectorResponse response = api.deleteHyperscaleConnector(hyperscaleConnectorId);
        // TODO: test validations
    }

    /**
     * Delete tags for a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHyperscaleConnectorTagsTest() throws ApiException {
        String hyperscaleConnectorId = null;
        DeleteTag deleteTag = null;
        api.deleteHyperscaleConnectorTags(hyperscaleConnectorId, deleteTag);
        // TODO: test validations
    }

    /**
     * Delete tags for a Hyperscale Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHyperscaleDatasetTagsTest() throws ApiException {
        String hyperscaleDatasetId = null;
        DeleteTag deleteTag = null;
        api.deleteHyperscaleDatasetTags(hyperscaleDatasetId, deleteTag);
        // TODO: test validations
    }

    /**
     * Delete a Hyperscale Mount Point.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHyperscaleMountPointTest() throws ApiException {
        String hyperscaleMountPointId = null;
        DeleteHyperscaleMountPointResponse response = api.deleteHyperscaleMountPoint(hyperscaleMountPointId);
        // TODO: test validations
    }

    /**
     * Get a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleConnectorByIdTest() throws ApiException {
        String hyperscaleConnectorId = null;
        HyperscaleConnector response = api.getHyperscaleConnectorById(hyperscaleConnectorId);
        // TODO: test validations
    }

    /**
     * Get tags for a Hyperscale Connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleConnectorTagsTest() throws ApiException {
        String hyperscaleConnectorId = null;
        TagsResponse response = api.getHyperscaleConnectorTags(hyperscaleConnectorId);
        // TODO: test validations
    }

    /**
     * Returns a list of Hyperscale Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleConnectorsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListHyperscaleConnectorsResponse response = api.getHyperscaleConnectors(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Get a Hyperscale Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleDatasetByIdTest() throws ApiException {
        String hyperscaleDatasetId = null;
        HyperscaleDataset response = api.getHyperscaleDatasetById(hyperscaleDatasetId);
        // TODO: test validations
    }

    /**
     * Get a Hyperscale Dataset table or file by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleDatasetTableOrFileByIdTest() throws ApiException {
        String hyperscaleDatasetId = null;
        String hyperscaleDatasetTableOrFileId = null;
        HyperscaleDatasetTableOrFile response = api.getHyperscaleDatasetTableOrFileById(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId);
        // TODO: test validations
    }

    /**
     * Get the tables or files of a hyperscale dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleDatasetTablesOrFilesTest() throws ApiException {
        String hyperscaleDatasetId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListHyperscaleDatasetTablesOrFilesResponse response = api.getHyperscaleDatasetTablesOrFiles(hyperscaleDatasetId, limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Get tags for a Hyperscale Dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleDatasetTagsTest() throws ApiException {
        String hyperscaleDatasetId = null;
        TagsResponse response = api.getHyperscaleDatasetTags(hyperscaleDatasetId);
        // TODO: test validations
    }

    /**
     * Returns a list of Hyperscale Datasets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleDatasetsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListHyperscaleDatasetsResponse response = api.getHyperscaleDatasets(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Get a Hyperscale Mount Points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleMountPointByIdTest() throws ApiException {
        String hyperscaleMountPointId = null;
        HyperscaleMountPoint response = api.getHyperscaleMountPointById(hyperscaleMountPointId);
        // TODO: test validations
    }

    /**
     * Returns a list of Hyperscale Mount Points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHyperscaleMountPointsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListHyperscaleMountPointsResponse response = api.getHyperscaleMountPoints(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search for Hyperscale Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchHyperscaleConnectorsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchHyperscaleConnectorsResponse response = api.searchHyperscaleConnectors(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search the tables or files of a hyperscale dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchHyperscaleDatasetTablesOrFilesTest() throws ApiException {
        String hyperscaleDatasetId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchHyperscaleDatasetTablesOrFilesResponse response = api.searchHyperscaleDatasetTablesOrFiles(hyperscaleDatasetId, limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search for Hyperscale Datasets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchHyperscaleDatasetsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchHyperscaleDatasetsResponse response = api.searchHyperscaleDatasets(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search for Hyperscale Mount Points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchHyperscaleMountPointsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchHyperscaleMountPointsResponse response = api.searchHyperscaleMountPoints(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update a Hyperscale Connector by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHyperscaleConnectorByIdTest() throws ApiException {
        String hyperscaleConnectorId = null;
        HyperscaleConnectorUpdateParameters hyperscaleConnectorUpdateParameters = null;
        UpdateHyperscaleConnectorResponse response = api.updateHyperscaleConnectorById(hyperscaleConnectorId, hyperscaleConnectorUpdateParameters);
        // TODO: test validations
    }

    /**
     * Update a Hyperscale Dataset by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHyperscaleDatasetByIdTest() throws ApiException {
        String hyperscaleDatasetId = null;
        HyperscaleDatasetUpdateParameters hyperscaleDatasetUpdateParameters = null;
        UpdateHyperscaleDatasetResponse response = api.updateHyperscaleDatasetById(hyperscaleDatasetId, hyperscaleDatasetUpdateParameters);
        // TODO: test validations
    }

    /**
     * Update a Hyperscale Dataset table or file by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHyperscaleDatasetTableOrFileByIdTest() throws ApiException {
        String hyperscaleDatasetId = null;
        String hyperscaleDatasetTableOrFileId = null;
        HyperscaleDatasetTableOrFileUpdateParameters hyperscaleDatasetTableOrFileUpdateParameters = null;
        UpdateHyperscaleDatasetTableOrFileResponse response = api.updateHyperscaleDatasetTableOrFileById(hyperscaleDatasetId, hyperscaleDatasetTableOrFileId, hyperscaleDatasetTableOrFileUpdateParameters);
        // TODO: test validations
    }

    /**
     * Update a Hyperscale Mount Point by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHyperscaleMountPointByIdTest() throws ApiException {
        String hyperscaleMountPointId = null;
        HyperscaleMountPointUpdateParameters hyperscaleMountPointUpdateParameters = null;
        UpdateHyperscaleMountPointResponse response = api.updateHyperscaleMountPointById(hyperscaleMountPointId, hyperscaleMountPointUpdateParameters);
        // TODO: test validations
    }

}
