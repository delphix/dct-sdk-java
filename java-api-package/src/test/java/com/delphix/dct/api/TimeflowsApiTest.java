/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.DeleteTimeflowResponse;
import com.delphix.dct.models.ListTimeflowsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchTimeflowsResponse;
import com.delphix.dct.models.SnapshotsDayRangesResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.Timeflow;
import com.delphix.dct.models.UpdateTimeflowParameters;
import com.delphix.dct.models.UpdateTimeflowResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeflowsApi
 */
@Disabled
public class TimeflowsApiTest {

    private final TimeflowsApi api = new TimeflowsApi();

    /**
     * Create tags for a Timeflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTimeflowTagsTest() throws ApiException {
        String timeflowId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createTimeflowTags(timeflowId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete a timeflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimeflowTest() throws ApiException {
        String timeflowId = null;
        DeleteTimeflowResponse response = api.deleteTimeflow(timeflowId);
        // TODO: test validations
    }

    /**
     * Delete tags for a Timeflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTimeflowTagsTest() throws ApiException {
        String timeflowId = null;
        DeleteTag deleteTag = null;
        api.deleteTimeflowTags(timeflowId, deleteTag);
        // TODO: test validations
    }

    /**
     * Get a Timeflow by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeflowByIdTest() throws ApiException {
        String timeflowId = null;
        Timeflow response = api.getTimeflowById(timeflowId);
        // TODO: test validations
    }

    /**
     * Returns the count of TimeFlow snapshots of the Timeflow aggregated by day.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeflowSnapshotDayRangeTest() throws ApiException {
        String timeflowId = null;
        SnapshotsDayRangesResponse response = api.getTimeflowSnapshotDayRange(timeflowId);
        // TODO: test validations
    }

    /**
     * Get tags for a Timeflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeflowTagsTest() throws ApiException {
        String timeflowId = null;
        TagsResponse response = api.getTimeflowTags(timeflowId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of timeflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeflowsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListTimeflowsResponse response = api.getTimeflows(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search timeflows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTimeflowsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchTimeflowsResponse response = api.searchTimeflows(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update values of a timeflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeflowTest() throws ApiException {
        String timeflowId = null;
        UpdateTimeflowParameters updateTimeflowParameters = null;
        UpdateTimeflowResponse response = api.updateTimeflow(timeflowId, updateTimeflowParameters);
        // TODO: test validations
    }

}
