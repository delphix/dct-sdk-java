/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.Algorithm;
import com.delphix.dct.models.AlgorithmRevision;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListAlgorithmRevisionsResponse;
import com.delphix.dct.models.ListAlgorithmsResponse;
import com.delphix.dct.models.SearchAlgorithmRevisionsResponse;
import com.delphix.dct.models.SearchAlgorithmsResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SetAlgorithmPrimaryRevisionResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateAlgorithmRevisionParameters;
import com.delphix.dct.models.UpdateAlgorithmRevisionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlgorithmsApi
 */
@Disabled
public class AlgorithmsApiTest {

    private final AlgorithmsApi api = new AlgorithmsApi();

    /**
     * Create tags for an AlgorithmRevision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlgorithmRevisionTagsTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createAlgorithmRevisionTags(algorithmId, revisionId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Create tags for an Algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlgorithmTagsTest() throws ApiException {
        String algorithmId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createAlgorithmTags(algorithmId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete tags for an AlgorithmRevision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlgorithmRevisionTagsTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        DeleteTag deleteTag = null;
        api.deleteAlgorithmRevisionTags(algorithmId, revisionId, deleteTag);
        // TODO: test validations
    }

    /**
     * Delete tags for an Algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlgorithmTagsTest() throws ApiException {
        String algorithmId = null;
        DeleteTag deleteTag = null;
        api.deleteAlgorithmTags(algorithmId, deleteTag);
        // TODO: test validations
    }

    /**
     * Get an algorithm by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmByIdTest() throws ApiException {
        String algorithmId = null;
        Algorithm response = api.getAlgorithmById(algorithmId);
        // TODO: test validations
    }

    /**
     * Retrieve a specific revision of an algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmRevisionByIdTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        AlgorithmRevision response = api.getAlgorithmRevisionById(algorithmId, revisionId);
        // TODO: test validations
    }

    /**
     * Get tags for an AlgorithmRevision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmRevisionTagsTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        TagsResponse response = api.getAlgorithmRevisionTags(algorithmId, revisionId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of algorithm revisions for the algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmRevisionsTest() throws ApiException {
        String algorithmId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListAlgorithmRevisionsResponse response = api.getAlgorithmRevisions(algorithmId, limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Get tags for an Algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmTagsTest() throws ApiException {
        String algorithmId = null;
        TagsResponse response = api.getAlgorithmTags(algorithmId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of algorithms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlgorithmsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListAlgorithmsResponse response = api.getAlgorithms(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search for algorithm revisions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAlgorithmRevisionsTest() throws ApiException {
        String algorithmId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchAlgorithmRevisionsResponse response = api.searchAlgorithmRevisions(algorithmId, limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search for algorithms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAlgorithmsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchAlgorithmsResponse response = api.searchAlgorithms(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Set an algorithm revision to be the primary revision for the algorithm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAlgorithmPrimaryRevisionTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        SetAlgorithmPrimaryRevisionResponse response = api.setAlgorithmPrimaryRevision(algorithmId, revisionId);
        // TODO: test validations
    }

    /**
     * Update an algorithm revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAlgorithmRevisionTest() throws ApiException {
        String algorithmId = null;
        String revisionId = null;
        UpdateAlgorithmRevisionParameters updateAlgorithmRevisionParameters = null;
        UpdateAlgorithmRevisionResponse response = api.updateAlgorithmRevision(algorithmId, revisionId, updateAlgorithmRevisionParameters);
        // TODO: test validations
    }

}
