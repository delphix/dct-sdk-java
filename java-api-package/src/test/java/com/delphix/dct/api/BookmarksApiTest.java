/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.Bookmark;
import com.delphix.dct.models.BookmarkCreateParameters;
import com.delphix.dct.models.CreateBookmarkResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.ListBookmarksResponse;
import com.delphix.dct.models.ListVDBGroupsByBookmarkResponse;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchBookmarksResponse;
import com.delphix.dct.models.SearchVDBGroupsByBookmarkResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import com.delphix.dct.models.UpdateBookmarkParameters;
import com.delphix.dct.models.UpdateBookmarkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BookmarksApi
 */
@Disabled
public class BookmarksApiTest {

    private final BookmarksApi api = new BookmarksApi();

    /**
     * Create a bookmark at the current time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBookmarkTest() throws ApiException {
        BookmarkCreateParameters bookmarkCreateParameters = null;
        CreateBookmarkResponse response = api.createBookmark(bookmarkCreateParameters);
        // TODO: test validations
    }

    /**
     * Create tags for a Bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBookmarkTagsTest() throws ApiException {
        String bookmarkId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createBookmarkTags(bookmarkId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete a bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBookmarkTest() throws ApiException {
        String bookmarkId = null;
        api.deleteBookmark(bookmarkId);
        // TODO: test validations
    }

    /**
     * Delete tags for a Bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBookmarkTagsTest() throws ApiException {
        String bookmarkId = null;
        DeleteTag deleteTag = null;
        api.deleteBookmarkTags(bookmarkId, deleteTag);
        // TODO: test validations
    }

    /**
     * Get a bookmark by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarkByIdTest() throws ApiException {
        String bookmarkId = null;
        Bookmark response = api.getBookmarkById(bookmarkId);
        // TODO: test validations
    }

    /**
     * Get tags for a Bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarkTagsTest() throws ApiException {
        String bookmarkId = null;
        TagsResponse response = api.getBookmarkTags(bookmarkId);
        // TODO: test validations
    }

    /**
     * List all bookmarks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBookmarksTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListBookmarksResponse response = api.getBookmarks(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * List VDB Groups compatible with this bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVdbGroupsByBookmarkTest() throws ApiException {
        String bookmarkId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListVDBGroupsByBookmarkResponse response = api.getVdbGroupsByBookmark(bookmarkId, limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Search for bookmarks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchBookmarksTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchBookmarksResponse response = api.searchBookmarks(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Search for VDB Groups compatible with this bookmark.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVdbGroupsByBookmarkTest() throws ApiException {
        String bookmarkId = null;
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchVDBGroupsByBookmarkResponse response = api.searchVdbGroupsByBookmark(bookmarkId, limit, cursor, sort, searchBody);
        // TODO: test validations
    }

    /**
     * Update a bookmark
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBookmarkTest() throws ApiException {
        String bookmarkId = null;
        UpdateBookmarkParameters updateBookmarkParameters = null;
        UpdateBookmarkResponse response = api.updateBookmark(bookmarkId, updateBookmarkParameters);
        // TODO: test validations
    }

}
