/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.api;

import com.delphix.dct.ApiException;
import com.delphix.dct.models.DeleteMaskingPluginResponse;
import com.delphix.dct.models.DeleteTag;
import com.delphix.dct.models.InstallMaskingPluginParameters;
import com.delphix.dct.models.InstallMaskingPluginResponse;
import com.delphix.dct.models.ListMaskingPluginsResponse;
import com.delphix.dct.models.MaskingPlugin;
import com.delphix.dct.models.SearchBody;
import com.delphix.dct.models.SearchMaskingPluginsResponse;
import com.delphix.dct.models.TagsRequest;
import com.delphix.dct.models.TagsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MaskingPluginsApi
 */
@Disabled
public class MaskingPluginsApiTest {

    private final MaskingPluginsApi api = new MaskingPluginsApi();

    /**
     * Create tags for a masking plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMaskingPluginTagsTest() throws ApiException {
        String maskingPluginId = null;
        TagsRequest tagsRequest = null;
        TagsResponse response = api.createMaskingPluginTags(maskingPluginId, tagsRequest);
        // TODO: test validations
    }

    /**
     * Delete a custom masking plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMaskingPluginTest() throws ApiException {
        String maskingPluginId = null;
        DeleteMaskingPluginResponse response = api.deleteMaskingPlugin(maskingPluginId);
        // TODO: test validations
    }

    /**
     * Delete tags for a masking plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMaskingPluginTagsTest() throws ApiException {
        String maskingPluginId = null;
        DeleteTag deleteTag = null;
        api.deleteMaskingPluginTags(maskingPluginId, deleteTag);
        // TODO: test validations
    }

    /**
     * Get a masking plugin by ID or name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMaskingPluginByIdTest() throws ApiException {
        String maskingPluginId = null;
        MaskingPlugin response = api.getMaskingPluginById(maskingPluginId);
        // TODO: test validations
    }

    /**
     * Get tags for a masking plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMaskingPluginTagsTest() throws ApiException {
        String maskingPluginId = null;
        TagsResponse response = api.getMaskingPluginTags(maskingPluginId);
        // TODO: test validations
    }

    /**
     * Retrieve the list of masking plugins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMaskingPluginsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        ListMaskingPluginsResponse response = api.getMaskingPlugins(limit, cursor, sort);
        // TODO: test validations
    }

    /**
     * Install a custom masking plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installMaskingPluginTest() throws ApiException {
        InstallMaskingPluginParameters installMaskingPluginParameters = null;
        InstallMaskingPluginResponse response = api.installMaskingPlugin(installMaskingPluginParameters);
        // TODO: test validations
    }

    /**
     * Search for masking plugins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchMaskingPluginsTest() throws ApiException {
        Integer limit = null;
        String cursor = null;
        String sort = null;
        SearchBody searchBody = null;
        SearchMaskingPluginsResponse response = api.searchMaskingPlugins(limit, cursor, sort, searchBody);
        // TODO: test validations
    }

}
