/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import com.delphix.dct.models.AdditionalMountPoint;
import com.delphix.dct.models.ClusterNodeInstance;
import com.delphix.dct.models.ConfigSettingsStg;
import com.delphix.dct.models.Hook;
import com.delphix.dct.models.OracleRacCustomEnvFile;
import com.delphix.dct.models.OracleRacCustomEnvVar;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ProvisionVDBFromBookmarkParameters
 */
public class ProvisionVDBFromBookmarkParametersTest {
    private final ProvisionVDBFromBookmarkParameters model = new ProvisionVDBFromBookmarkParameters();

    /**
     * Model tests for ProvisionVDBFromBookmarkParameters
     */
    @Test
    public void testProvisionVDBFromBookmarkParameters() {
        // TODO: test ProvisionVDBFromBookmarkParameters
    }

    /**
     * Test the property 'preRefresh'
     */
    @Test
    public void preRefreshTest() {
        // TODO: test preRefresh
    }

    /**
     * Test the property 'postRefresh'
     */
    @Test
    public void postRefreshTest() {
        // TODO: test postRefresh
    }

    /**
     * Test the property 'preSelfRefresh'
     */
    @Test
    public void preSelfRefreshTest() {
        // TODO: test preSelfRefresh
    }

    /**
     * Test the property 'postSelfRefresh'
     */
    @Test
    public void postSelfRefreshTest() {
        // TODO: test postSelfRefresh
    }

    /**
     * Test the property 'preRollback'
     */
    @Test
    public void preRollbackTest() {
        // TODO: test preRollback
    }

    /**
     * Test the property 'postRollback'
     */
    @Test
    public void postRollbackTest() {
        // TODO: test postRollback
    }

    /**
     * Test the property 'configureClone'
     */
    @Test
    public void configureCloneTest() {
        // TODO: test configureClone
    }

    /**
     * Test the property 'preSnapshot'
     */
    @Test
    public void preSnapshotTest() {
        // TODO: test preSnapshot
    }

    /**
     * Test the property 'postSnapshot'
     */
    @Test
    public void postSnapshotTest() {
        // TODO: test postSnapshot
    }

    /**
     * Test the property 'preStart'
     */
    @Test
    public void preStartTest() {
        // TODO: test preStart
    }

    /**
     * Test the property 'postStart'
     */
    @Test
    public void postStartTest() {
        // TODO: test postStart
    }

    /**
     * Test the property 'preStop'
     */
    @Test
    public void preStopTest() {
        // TODO: test preStop
    }

    /**
     * Test the property 'postStop'
     */
    @Test
    public void postStopTest() {
        // TODO: test postStop
    }

    /**
     * Test the property 'targetGroupId'
     */
    @Test
    public void targetGroupIdTest() {
        // TODO: test targetGroupId
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'databaseName'
     */
    @Test
    public void databaseNameTest() {
        // TODO: test databaseName
    }

    /**
     * Test the property 'cdbId'
     */
    @Test
    public void cdbIdTest() {
        // TODO: test cdbId
    }

    /**
     * Test the property 'clusterNodeIds'
     */
    @Test
    public void clusterNodeIdsTest() {
        // TODO: test clusterNodeIds
    }

    /**
     * Test the property 'clusterNodeInstances'
     */
    @Test
    public void clusterNodeInstancesTest() {
        // TODO: test clusterNodeInstances
    }

    /**
     * Test the property 'truncateLogOnCheckpoint'
     */
    @Test
    public void truncateLogOnCheckpointTest() {
        // TODO: test truncateLogOnCheckpoint
    }

    /**
     * Test the property 'osUsername'
     */
    @Test
    public void osUsernameTest() {
        // TODO: test osUsername
    }

    /**
     * Test the property 'osPassword'
     */
    @Test
    public void osPasswordTest() {
        // TODO: test osPassword
    }

    /**
     * Test the property 'environmentId'
     */
    @Test
    public void environmentIdTest() {
        // TODO: test environmentId
    }

    /**
     * Test the property 'environmentUserId'
     */
    @Test
    public void environmentUserIdTest() {
        // TODO: test environmentUserId
    }

    /**
     * Test the property 'repositoryId'
     */
    @Test
    public void repositoryIdTest() {
        // TODO: test repositoryId
    }

    /**
     * Test the property 'autoSelectRepository'
     */
    @Test
    public void autoSelectRepositoryTest() {
        // TODO: test autoSelectRepository
    }

    /**
     * Test the property 'vdbRestart'
     */
    @Test
    public void vdbRestartTest() {
        // TODO: test vdbRestart
    }

    /**
     * Test the property 'templateId'
     */
    @Test
    public void templateIdTest() {
        // TODO: test templateId
    }

    /**
     * Test the property 'auxiliaryTemplateId'
     */
    @Test
    public void auxiliaryTemplateIdTest() {
        // TODO: test auxiliaryTemplateId
    }

    /**
     * Test the property 'fileMappingRules'
     */
    @Test
    public void fileMappingRulesTest() {
        // TODO: test fileMappingRules
    }

    /**
     * Test the property 'oracleInstanceName'
     */
    @Test
    public void oracleInstanceNameTest() {
        // TODO: test oracleInstanceName
    }

    /**
     * Test the property 'uniqueName'
     */
    @Test
    public void uniqueNameTest() {
        // TODO: test uniqueName
    }

    /**
     * Test the property 'vcdbName'
     */
    @Test
    public void vcdbNameTest() {
        // TODO: test vcdbName
    }

    /**
     * Test the property 'vcdbDatabaseName'
     */
    @Test
    public void vcdbDatabaseNameTest() {
        // TODO: test vcdbDatabaseName
    }

    /**
     * Test the property 'mountPoint'
     */
    @Test
    public void mountPointTest() {
        // TODO: test mountPoint
    }

    /**
     * Test the property 'openResetLogs'
     */
    @Test
    public void openResetLogsTest() {
        // TODO: test openResetLogs
    }

    /**
     * Test the property 'snapshotPolicyId'
     */
    @Test
    public void snapshotPolicyIdTest() {
        // TODO: test snapshotPolicyId
    }

    /**
     * Test the property 'retentionPolicyId'
     */
    @Test
    public void retentionPolicyIdTest() {
        // TODO: test retentionPolicyId
    }

    /**
     * Test the property 'recoveryModel'
     */
    @Test
    public void recoveryModelTest() {
        // TODO: test recoveryModel
    }

    /**
     * Test the property 'preScript'
     */
    @Test
    public void preScriptTest() {
        // TODO: test preScript
    }

    /**
     * Test the property 'postScript'
     */
    @Test
    public void postScriptTest() {
        // TODO: test postScript
    }

    /**
     * Test the property 'cdcOnProvision'
     */
    @Test
    public void cdcOnProvisionTest() {
        // TODO: test cdcOnProvision
    }

    /**
     * Test the property 'onlineLogSize'
     */
    @Test
    public void onlineLogSizeTest() {
        // TODO: test onlineLogSize
    }

    /**
     * Test the property 'onlineLogGroups'
     */
    @Test
    public void onlineLogGroupsTest() {
        // TODO: test onlineLogGroups
    }

    /**
     * Test the property 'archiveLog'
     */
    @Test
    public void archiveLogTest() {
        // TODO: test archiveLog
    }

    /**
     * Test the property 'newDbid'
     */
    @Test
    public void newDbidTest() {
        // TODO: test newDbid
    }

    /**
     * Test the property 'masked'
     */
    @Test
    public void maskedTest() {
        // TODO: test masked
    }

    /**
     * Test the property 'listenerIds'
     */
    @Test
    public void listenerIdsTest() {
        // TODO: test listenerIds
    }

    /**
     * Test the property 'customEnvVars'
     */
    @Test
    public void customEnvVarsTest() {
        // TODO: test customEnvVars
    }

    /**
     * Test the property 'customEnvFiles'
     */
    @Test
    public void customEnvFilesTest() {
        // TODO: test customEnvFiles
    }

    /**
     * Test the property 'oracleRacCustomEnvFiles'
     */
    @Test
    public void oracleRacCustomEnvFilesTest() {
        // TODO: test oracleRacCustomEnvFiles
    }

    /**
     * Test the property 'oracleRacCustomEnvVars'
     */
    @Test
    public void oracleRacCustomEnvVarsTest() {
        // TODO: test oracleRacCustomEnvVars
    }

    /**
     * Test the property 'parentTdeKeystorePath'
     */
    @Test
    public void parentTdeKeystorePathTest() {
        // TODO: test parentTdeKeystorePath
    }

    /**
     * Test the property 'parentTdeKeystorePassword'
     */
    @Test
    public void parentTdeKeystorePasswordTest() {
        // TODO: test parentTdeKeystorePassword
    }

    /**
     * Test the property 'tdeExportedKeyFileSecret'
     */
    @Test
    public void tdeExportedKeyFileSecretTest() {
        // TODO: test tdeExportedKeyFileSecret
    }

    /**
     * Test the property 'tdeKeyIdentifier'
     */
    @Test
    public void tdeKeyIdentifierTest() {
        // TODO: test tdeKeyIdentifier
    }

    /**
     * Test the property 'targetVcdbTdeKeystorePath'
     */
    @Test
    public void targetVcdbTdeKeystorePathTest() {
        // TODO: test targetVcdbTdeKeystorePath
    }

    /**
     * Test the property 'cdbTdeKeystorePassword'
     */
    @Test
    public void cdbTdeKeystorePasswordTest() {
        // TODO: test cdbTdeKeystorePassword
    }

    /**
     * Test the property 'vcdbTdeKeyIdentifier'
     */
    @Test
    public void vcdbTdeKeyIdentifierTest() {
        // TODO: test vcdbTdeKeyIdentifier
    }

    /**
     * Test the property 'appdataSourceParams'
     */
    @Test
    public void appdataSourceParamsTest() {
        // TODO: test appdataSourceParams
    }

    /**
     * Test the property 'additionalMountPoints'
     */
    @Test
    public void additionalMountPointsTest() {
        // TODO: test additionalMountPoints
    }

    /**
     * Test the property 'appdataConfigParams'
     */
    @Test
    public void appdataConfigParamsTest() {
        // TODO: test appdataConfigParams
    }

    /**
     * Test the property 'configParams'
     */
    @Test
    public void configParamsTest() {
        // TODO: test configParams
    }

    /**
     * Test the property 'privilegedOsUser'
     */
    @Test
    public void privilegedOsUserTest() {
        // TODO: test privilegedOsUser
    }

    /**
     * Test the property 'postgresPort'
     */
    @Test
    public void postgresPortTest() {
        // TODO: test postgresPort
    }

    /**
     * Test the property 'configSettingsStg'
     */
    @Test
    public void configSettingsStgTest() {
        // TODO: test configSettingsStg
    }

    /**
     * Test the property 'vcdbRestart'
     */
    @Test
    public void vcdbRestartTest() {
        // TODO: test vcdbRestart
    }

    /**
     * Test the property 'mssqlFailoverDriveLetter'
     */
    @Test
    public void mssqlFailoverDriveLetterTest() {
        // TODO: test mssqlFailoverDriveLetter
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'bookmarkId'
     */
    @Test
    public void bookmarkIdTest() {
        // TODO: test bookmarkId
    }

    /**
     * Test the property 'makeCurrentAccountOwner'
     */
    @Test
    public void makeCurrentAccountOwnerTest() {
        // TODO: test makeCurrentAccountOwner
    }

}
