/*
 * Delphix DCT API
 * Delphix DCT API
 *
 * The version of the OpenAPI document: 3.10.0
 * Contact: support@delphix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.delphix.dct.models;

import com.delphix.dct.models.NameValuePair;
import com.delphix.dct.models.SourceOperation;
import com.delphix.dct.models.Tag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OracleStagingPushDSourceLinkSourceParameters
 */
public class OracleStagingPushDSourceLinkSourceParametersTest {
    private final OracleStagingPushDSourceLinkSourceParameters model = new OracleStagingPushDSourceLinkSourceParameters();

    /**
     * Model tests for OracleStagingPushDSourceLinkSourceParameters
     */
    @Test
    public void testOracleStagingPushDSourceLinkSourceParameters() {
        // TODO: test OracleStagingPushDSourceLinkSourceParameters
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'sourceId'
     */
    @Test
    public void sourceIdTest() {
        // TODO: test sourceId
    }

    /**
     * Test the property 'groupId'
     */
    @Test
    public void groupIdTest() {
        // TODO: test groupId
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'logSyncEnabled'
     */
    @Test
    public void logSyncEnabledTest() {
        // TODO: test logSyncEnabled
    }

    /**
     * Test the property 'syncPolicyId'
     */
    @Test
    public void syncPolicyIdTest() {
        // TODO: test syncPolicyId
    }

    /**
     * Test the property 'retentionPolicyId'
     */
    @Test
    public void retentionPolicyIdTest() {
        // TODO: test retentionPolicyId
    }

    /**
     * Test the property 'makeCurrentAccountOwner'
     */
    @Test
    public void makeCurrentAccountOwnerTest() {
        // TODO: test makeCurrentAccountOwner
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'opsPreSync'
     */
    @Test
    public void opsPreSyncTest() {
        // TODO: test opsPreSync
    }

    /**
     * Test the property 'opsPostSync'
     */
    @Test
    public void opsPostSyncTest() {
        // TODO: test opsPostSync
    }

    /**
     * Test the property 'engineId'
     */
    @Test
    public void engineIdTest() {
        // TODO: test engineId
    }

    /**
     * Test the property 'containerType'
     */
    @Test
    public void containerTypeTest() {
        // TODO: test containerType
    }

    /**
     * Test the property 'environmentUserId'
     */
    @Test
    public void environmentUserIdTest() {
        // TODO: test environmentUserId
    }

    /**
     * Test the property 'repository'
     */
    @Test
    public void repositoryTest() {
        // TODO: test repository
    }

    /**
     * Test the property 'databaseName'
     */
    @Test
    public void databaseNameTest() {
        // TODO: test databaseName
    }

    /**
     * Test the property 'databaseUniqueName'
     */
    @Test
    public void databaseUniqueNameTest() {
        // TODO: test databaseUniqueName
    }

    /**
     * Test the property 'sid'
     */
    @Test
    public void sidTest() {
        // TODO: test sid
    }

    /**
     * Test the property 'mountBase'
     */
    @Test
    public void mountBaseTest() {
        // TODO: test mountBase
    }

    /**
     * Test the property 'customEnvVariablesPairs'
     */
    @Test
    public void customEnvVariablesPairsTest() {
        // TODO: test customEnvVariablesPairs
    }

    /**
     * Test the property 'customEnvVariablesPaths'
     */
    @Test
    public void customEnvVariablesPathsTest() {
        // TODO: test customEnvVariablesPaths
    }

    /**
     * Test the property 'autoStagingRestart'
     */
    @Test
    public void autoStagingRestartTest() {
        // TODO: test autoStagingRestart
    }

    /**
     * Test the property 'physicalStandby'
     */
    @Test
    public void physicalStandbyTest() {
        // TODO: test physicalStandby
    }

    /**
     * Test the property 'validateSnapshotInReadonly'
     */
    @Test
    public void validateSnapshotInReadonlyTest() {
        // TODO: test validateSnapshotInReadonly
    }

    /**
     * Test the property 'stagingDatabaseTemplates'
     */
    @Test
    public void stagingDatabaseTemplatesTest() {
        // TODO: test stagingDatabaseTemplates
    }

    /**
     * Test the property 'stagingDatabaseConfigParams'
     */
    @Test
    public void stagingDatabaseConfigParamsTest() {
        // TODO: test stagingDatabaseConfigParams
    }

    /**
     * Test the property 'stagingContainerDatabaseReference'
     */
    @Test
    public void stagingContainerDatabaseReferenceTest() {
        // TODO: test stagingContainerDatabaseReference
    }

    /**
     * Test the property 'opsPreLogSync'
     */
    @Test
    public void opsPreLogSyncTest() {
        // TODO: test opsPreLogSync
    }

    /**
     * Test the property 'tdeKeystoreConfigType'
     */
    @Test
    public void tdeKeystoreConfigTypeTest() {
        // TODO: test tdeKeystoreConfigType
    }

}
